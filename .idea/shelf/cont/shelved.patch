Index: app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.presentation.conversation\n\nimport android.Manifest\nimport android.os.Build\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_messaging.domain.model.SendMessageModel\nimport com.example.cyclistance.feature_messaging.domain.model.ui.chats.MessagingUserItemModel\nimport com.example.cyclistance.feature_messaging.presentation.conversation.components.ConversationContent\nimport com.example.cyclistance.feature_messaging.presentation.conversation.event.ConversationUiEvent\nimport com.example.cyclistance.feature_messaging.presentation.conversation.event.ConversationVmEvent\nimport com.example.cyclistance.feature_messaging.presentation.conversation.state.ConversationUiState\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.rememberPermissionState\n\n@OptIn(ExperimentalPermissionsApi::class)\n@Composable\nfun ConversationScreen(\n    viewModel: ConversationViewModel = hiltViewModel(),\n    navController: NavController,\n    paddingValues: PaddingValues,\n    userReceiverMessage: MessagingUserItemModel,\n    userSenderMessage: MessagingUserItemModel,\n    newConversationDetails: (MessagingUserItemModel) -> Unit\n) {\n\n\n    val conversationState = viewModel.conversationState\n    val state by viewModel.state.collectAsStateWithLifecycle()\n    var uiState by rememberSaveable { mutableStateOf(ConversationUiState()) }\n    var message by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val onToggleExpand = remember {\n        {\n            uiState = uiState.copy(\n                messageAreaExpanded = !uiState.messageAreaExpanded\n            )\n        }\n    }\n    val onChangeValueMessage = remember<(TextFieldValue) -> Unit> {\n        {\n            message = it\n        }\n    }\n\n    val onClickChatItem = remember {\n        { index: Int ->\n            uiState = uiState.copy(\n                chatItemSelectedIndex = if (uiState.chatItemSelectedIndex == index) {\n                    -1\n                } else {\n                    index\n                })\n        }\n    }\n\n    val resetSelectedIndex = remember {\n        {\n            uiState = uiState.copy(\n                chatItemSelectedIndex = -1\n            )\n        }\n    }\n\n    val closeConversationMessage = remember {\n        {\n            navController.popBackStack()\n        }\n    }\n\n\n    val sendMessage = remember {\n        {\n\n            val receiverId = state.userReceiverMessage!!.userDetails.uid\n            viewModel.onEvent(\n                event = ConversationVmEvent.SendMessage(\n                    sendMessageModel = SendMessageModel(\n                        receiverId = receiverId,\n                        message = message.text\n                    )\n                )).also {\n                message = TextFieldValue()\n            }\n\n        }\n    }\n\n\n\n\n\n    val notificationLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission(),\n        onResult = { isGranted ->\n            if (isGranted){\n                sendMessage()\n            }\n        }\n    )\n\n\n    val notificationPermissionState = rememberPermissionState(\n        permission = Manifest.permission.POST_NOTIFICATIONS\n    ){ permissionGranted ->\n        if(permissionGranted){\n            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n        }\n\n    }\n\n\n    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(notificationPermissionVisible = visible)\n    }}\n\n\n\n\n    val onSendMessage = remember{{\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            notificationPermissionState.requestPermission(onGranted = {\n                notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n            }, onExplain = {\n                showPermissionDialog()\n            }, onDenied = {\n                sendMessage()\n            })\n        } else {\n            sendMessage()\n        }\n    }}\n\n\n\n\n\n    LaunchedEffect(key1 = userReceiverMessage){\n\n        viewModel.onEvent(\n            event = ConversationVmEvent.OnInitialized(\n                userReceiverMessage = userReceiverMessage,\n                userSenderMessage = userSenderMessage))\n\n        newConversationDetails(userReceiverMessage)\n    }\n\n    BackHandler(enabled = true, onBack = {\n        if (uiState.messageAreaExpanded) {\n            onToggleExpand()\n        } else {\n            navController.popBackStack()\n        }\n    })\n\n\n\n\n    ConversationContent(\n        conversation = conversationState,\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(paddingValues = paddingValues),\n        uiState = uiState,\n        state = state,\n        message = message,\n        event = { event ->\n            when (event) {\n                is ConversationUiEvent.CloseConversationScreen -> closeConversationMessage()\n                is ConversationUiEvent.OnSendMessage -> onSendMessage()\n                is ConversationUiEvent.ResetSelectedIndex -> resetSelectedIndex()\n                is ConversationUiEvent.SelectChatItem -> onClickChatItem(event.index)\n                is ConversationUiEvent.ToggleMessageArea -> onToggleExpand()\n                is ConversationUiEvent.OnChangeValueMessage -> onChangeValueMessage(event.message)\n                is ConversationUiEvent.DismissNotificationPermissionDialog -> dismissPermissionDialog()\n            }\n        }\n    )\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationScreen.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationScreen.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationScreen.kt	(date 1694450670423)
@@ -111,10 +111,8 @@
 
     val notificationLauncher = rememberLauncherForActivityResult(
         contract = ActivityResultContracts.RequestPermission(),
-        onResult = { isGranted ->
-            if (isGranted){
-                sendMessage()
-            }
+        onResult = {
+            sendMessage()
         }
     )
 
@@ -142,7 +140,7 @@
             notificationPermissionState.requestPermission(onGranted = {
                 notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
             }, onExplain = {
-                showPermissionDialog()
+                notificationPermissionDialogVisibility(true)
             }, onDenied = {
                 sendMessage()
             })
@@ -192,7 +190,7 @@
                 is ConversationUiEvent.SelectChatItem -> onClickChatItem(event.index)
                 is ConversationUiEvent.ToggleMessageArea -> onToggleExpand()
                 is ConversationUiEvent.OnChangeValueMessage -> onChangeValueMessage(event.message)
-                is ConversationUiEvent.DismissNotificationPermissionDialog -> dismissPermissionDialog()
+                is ConversationUiEvent.DismissNotificationPermissionDialog -> notificationPermissionDialogVisibility(false)
             }
         }
     )
