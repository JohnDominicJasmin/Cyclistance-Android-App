Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason\n\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.utils.constants.MappingConstants.CANCELLATION_VM_STATE_KEY\nimport com.example.cyclistance.feature_authentication.domain.exceptions.AuthExceptions\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\n\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.CancellationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.CancellationReasonModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.StatusModel\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.event.CancellationReasonEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.event.CancellationReasonVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.state.CancellationReasonState\nimport com.example.cyclistance.feature_user_profile.domain.use_case.UserProfileUseCase\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport javax.inject.Inject\n\n@HiltViewModel\nclass CancellationReasonViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val mappingUseCase: MappingUseCase,\n    private val authUseCase: AuthenticationUseCase,\n    private val userProfileUseCase: UserProfileUseCase\n): ViewModel() {\n\n\n    private val _transactionId: String = savedStateHandle[\"transactionId\"] ?: \"\"\n\n    private val _state = MutableStateFlow(savedStateHandle[CANCELLATION_VM_STATE_KEY] ?: CancellationReasonState())\n    val state = _state.asStateFlow()\n    \n    private val _eventFlow: MutableSharedFlow<CancellationReasonEvent> = MutableSharedFlow()\n    val eventFlow = _eventFlow.asSharedFlow()\n\n\n    fun onEvent(event: CancellationReasonVmEvent) {\n        when (event) {\n\n            is CancellationReasonVmEvent.ConfirmCancellationReason -> {\n\n                confirmCancellationReason(\n                    reason = event.reason,\n                    message = event.message)\n\n            }\n\n        }\n        savedStateHandle[CANCELLATION_VM_STATE_KEY] = state.value\n    }\n\n    private fun confirmCancellationReason(reason: String, message: String) {\n        viewModelScope.launch(Dispatchers.IO) {\n            runCatching {\n                startLoading()\n                mappingUseCase.confirmCancellationUseCase(\n                    rescueTransaction = RescueTransactionItem(\n                        id = _transactionId,\n                        cancellation = CancellationModel(\n                            cancellationReason = CancellationReasonModel(\n                                reason = reason,\n                                message = message\n                            ),\n                            idCancelledBy = getId(),\n                            nameCancelledBy = getName(),\n                            rescueCancelled = true,\n                        ),\n                        status = StatusModel(),\n                        route = RouteModel()\n                    )\n                )\n\n            }.onSuccess {\n                broadcastRescueTransaction()\n                delay(500)\n                finishLoading()\n                _eventFlow.emit(value = CancellationReasonEvent.ConfirmCancellationReasonSuccess)\n            }.onFailure { exception ->\n                finishLoading()\n                exception.handleException()\n            }.also {\n                savedStateHandle[CANCELLATION_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun startLoading() {\n        _state.update { it.copy(isLoading = true) }\n    }\n\n    private fun finishLoading() {\n        _state.update { it.copy(isLoading = false) }\n    }\n\n\n\n    private suspend fun broadcastRescueTransaction() {\n        runCatching {\n            mappingUseCase.broadcastRescueTransactionUseCase()\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n\n\n    private suspend fun Throwable.handleException() {\n        when (this) {\n\n            is MappingExceptions.UnexpectedErrorException -> {\n                _eventFlow.emit(value = CancellationReasonEvent.UnexpectedError(this.message!!))\n            }\n\n            is AuthExceptions.UserException -> {\n                _eventFlow.emit(value = CancellationReasonEvent.UserFailed(this.message!!))\n            }\n\n            is MappingExceptions.RescueTransactionNotFoundException -> {\n                _eventFlow.emit(value = CancellationReasonEvent.RescueTransactionFailed(this.message!!))\n            }\n\n            is MappingExceptions.NetworkException -> {\n                _eventFlow.emit(value = CancellationReasonEvent.NoInternetConnection)\n            }\n\n            is MappingExceptions.RescueTransactionReasonException -> {\n                _eventFlow.emit(value = CancellationReasonEvent.InvalidCancellationReason(this.message!!))\n            }\n\n        }\n        savedStateHandle[CANCELLATION_VM_STATE_KEY] = state.value\n    }\n    private fun getId() = authUseCase.getIdUseCase()\n    private suspend fun getName() = userProfileUseCase.getNameUseCase()\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonViewModel.kt	(revision ec320690b4cd387cc10c863e6f69ee0116eedb37)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonViewModel.kt	(date 1697357481216)
@@ -85,7 +85,7 @@
 
             }.onSuccess {
                 broadcastRescueTransaction()
-                delay(500)
+                delay(1000)
                 finishLoading()
                 _eventFlow.emit(value = CancellationReasonEvent.ConfirmCancellationReasonSuccess)
             }.onFailure { exception ->
