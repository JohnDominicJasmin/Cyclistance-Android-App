Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInTextFields.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.components\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.text.KeyboardActionScope\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state.SignInState\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstraintsItem\r\nimport com.example.cyclistance.feature_authentication.presentation.common.ConfirmPasswordTextField\r\nimport com.example.cyclistance.feature_authentication.presentation.common.EmailTextField\r\n\r\n\r\n@Composable\r\nfun SignInTextFieldsArea(\r\n    state: SignInState,\r\n    email: String,\r\n    emailErrorMessage: String,\r\n    password: String,\r\n    passwordErrorMessage: String,\r\n    passwordVisible: Boolean,\r\n    focusRequester: FocusRequester,\r\n    onValueChangeEmail: (String) -> Unit,\r\n    onValueChangePassword: (String) -> Unit,\r\n    keyboardActionOnDone: (KeyboardActionScope.() -> Unit),\r\n    onClickPasswordVisibility: () -> Unit) {\r\n\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .layoutId(AuthenticationConstraintsItem.TextFields.layoutId)\r\n            .fillMaxWidth(fraction = 0.9f),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.spacedBy(13.dp)) {\r\n\r\n\r\n        EmailTextField(\r\n            focusRequester = focusRequester,\r\n            email = email,\r\n            emailErrorMessage = emailErrorMessage,\r\n            onValueChange = onValueChangeEmail,\r\n            clearIconOnClick = {\r\n                onValueChangeEmail(\"\")\r\n            },\r\n            enabled = !state.isLoading)\r\n\r\n        ConfirmPasswordTextField(\r\n            password = password,\r\n            passwordErrorMessage = passwordErrorMessage,\r\n            onValueChange = onValueChangePassword,\r\n            keyboardActionOnDone = keyboardActionOnDone,\r\n            isPasswordVisible = passwordVisible,\r\n            passwordVisibilityIconOnClick = onClickPasswordVisibility,\r\n            enabled = !state.isLoading\r\n        )\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInTextFields.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInTextFields.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInTextFields.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInTextFields.kt	(date 1687223246908)
@@ -9,6 +9,7 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.layout.layoutId
+import androidx.compose.ui.text.input.TextFieldValue
 import androidx.compose.ui.unit.dp
 import com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state.SignInState
 import com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstraintsItem
@@ -19,14 +20,14 @@
 @Composable
 fun SignInTextFieldsArea(
     state: SignInState,
-    email: String,
+    email: TextFieldValue,
     emailErrorMessage: String,
-    password: String,
+    password: TextFieldValue,
     passwordErrorMessage: String,
     passwordVisible: Boolean,
     focusRequester: FocusRequester,
-    onValueChangeEmail: (String) -> Unit,
-    onValueChangePassword: (String) -> Unit,
+    onValueChangeEmail: (TextFieldValue) -> Unit,
+    onValueChangePassword: (TextFieldValue) -> Unit,
     keyboardActionOnDone: (KeyboardActionScope.() -> Unit),
     onClickPasswordVisibility: () -> Unit) {
 
@@ -45,7 +46,7 @@
             emailErrorMessage = emailErrorMessage,
             onValueChange = onValueChangeEmail,
             clearIconOnClick = {
-                onValueChangeEmail("")
+                onValueChangeEmail(TextFieldValue(""))
             },
             enabled = !state.isLoading)
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/.idea/misc.xml	(date 1687225322446)
@@ -1,4 +1,6 @@
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
 </project>
\ No newline at end of file
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n#\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\n# Default value: -Xmx1024m -XX:MaxPermSize=256m\r\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\r\n#\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n#Mon May 08 21:28:15 PST 2023\r\nandroid.defaults.buildfeatures.buildconfig=true\r\nandroid.enableJetifier=false\r\nandroid.nonFinalResIds=false\r\nandroid.nonTransitiveRClass=true\r\nandroid.useAndroidX=true\r\nkotlin.code.style=official\r\norg.gradle.caching=true\r\norg.gradle.configureondemand=true\r\norg.gradle.daemon=true\r\norg.gradle.jvmargs=-Xmx4g -XX:+UseParallelGC -XX:MaxMetaspaceSize=1g -Dkotlin.daemon.jvm.options\\=\"-Xmx2048M\" -XX\\:+HeapDumpOnOutOfMemoryError -Dfile.encoding\\=UTF-8\r\norg.gradle.parallel=true\r\norg.gradle.unsafe.configuration-cache=true\r\n# Use this flag carefully, in case some of the plugins are not fully compatible.\r\norg.gradle.unsafe.configuration-cache-problems=warn
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/gradle.properties	(date 1687222728558)
@@ -10,7 +10,7 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-#Mon May 08 21:28:15 PST 2023
+#Tue Jun 20 08:58:48 PST 2023
 android.defaults.buildfeatures.buildconfig=true
 android.enableJetifier=false
 android.nonFinalResIds=false
@@ -20,8 +20,7 @@
 org.gradle.caching=true
 org.gradle.configureondemand=true
 org.gradle.daemon=true
-org.gradle.jvmargs=-Xmx4g -XX:+UseParallelGC -XX:MaxMetaspaceSize=1g -Dkotlin.daemon.jvm.options\="-Xmx2048M" -XX\:+HeapDumpOnOutOfMemoryError -Dfile.encoding\=UTF-8
+org.gradle.jvmargs=-Xmx1536M -XX\:+UseParallelGC -XX\:MaxMetaspaceSize\=1g -Dkotlin.daemon.jvm.options\="-Xmx1536M" -XX\:+HeapDumpOnOutOfMemoryError -Dfile.encoding\=UTF-8
 org.gradle.parallel=true
 org.gradle.unsafe.configuration-cache=true
-# Use this flag carefully, in case some of the plugins are not fully compatible.
-org.gradle.unsafe.configuration-cache-problems=warn
\ No newline at end of file
+org.gradle.unsafe.configuration-cache-problems=warn
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInScreenContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.components\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.CircularProgressIndicator\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.Surface\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_email.state.EmailAuthState\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.event.SignUiEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state.SignInState\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state.SignInUiState\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstraintsItem\r\nimport com.example.cyclistance.feature_authentication.presentation.common.Waves\r\nimport com.example.cyclistance.feature_authentication.presentation.common.visible\r\nimport com.example.cyclistance.feature_dialogs.presentation.alert_dialog.AlertDialog\r\nimport com.example.cyclistance.feature_dialogs.presentation.no_internet_dialog.NoInternetDialog\r\nimport com.example.cyclistance.theme.CyclistanceTheme\r\n\r\n\r\n@Preview(device = \"id:Galaxy Nexus\")\r\n@Composable\r\nfun PreviewSignInScreenDark() {\r\n\r\n    var uiState by rememberSaveable {\r\n        mutableStateOf(SignInUiState())\r\n    }\r\n\r\n\r\n    val onValueChangeEmail = remember<(String) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                email = it,\r\n                emailErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n\r\n    val onValueChangePassword = remember<(String) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                password = it,\r\n                passwordErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n\r\n    CyclistanceTheme(true) {\r\n        SignInScreenContent(uiState = uiState, event = {\r\n            when (it) {\r\n                is SignUiEvent.ChangeEmail -> onValueChangeEmail(it.email)\r\n                is SignUiEvent.ChangePassword -> onValueChangePassword(it.password)\r\n                else -> {}\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n@Preview(device = \"id:Galaxy Nexus\")\r\n@Composable\r\nfun PreviewSignInScreenLight() {\r\n\r\n    var uiState by rememberSaveable {\r\n        mutableStateOf(SignInUiState())\r\n    }\r\n\r\n\r\n    val onValueChangeEmail = remember<(String) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                email = it,\r\n                emailErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n\r\n    val onValueChangePassword = remember<(String) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                password = it,\r\n                passwordErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    CyclistanceTheme(false) {\r\n        SignInScreenContent(uiState = uiState, event = {\r\n            when (it) {\r\n                is SignUiEvent.ChangeEmail -> onValueChangeEmail(it.email)\r\n                is SignUiEvent.ChangePassword -> onValueChangePassword(it.password)\r\n                else -> {}\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun SignInScreenContent(\r\n    modifier: Modifier = Modifier,\r\n    focusRequester: FocusRequester = FocusRequester(),\r\n    signInState: SignInState = SignInState(),\r\n    emailAuthState: EmailAuthState = EmailAuthState(),\r\n    uiState: SignInUiState = SignInUiState(),\r\n    event: (SignUiEvent) -> Unit = {}) {\r\n\r\n\r\n    Surface(modifier = modifier.fillMaxSize(), color = MaterialTheme.colors.background) {\r\n\r\n        ConstraintLayout(\r\n            constraintSet = signInConstraints,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .verticalScroll(rememberScrollState())) {\r\n\r\n            Spacer(modifier = Modifier.layoutId(AuthenticationConstraintsItem.TopSpacer.layoutId))\r\n\r\n            Image(\r\n                contentDescription = \"App Icon\",\r\n                painter = painterResource(R.drawable.ic_app_icon_cyclistance),\r\n                modifier = Modifier\r\n                    .layoutId(AuthenticationConstraintsItem.IconDisplay.layoutId)\r\n            )\r\n\r\n\r\n            SignUpTextArea()\r\n\r\n            if (uiState.alertDialogState.visible()) {\r\n                AlertDialog(\r\n                    alertDialog = uiState.alertDialogState,\r\n                    onDismissRequest = {\r\n                        event(SignUiEvent.DismissAlertDialog)\r\n                    })\r\n            }\r\n\r\n            Waves(\r\n                topWaveLayoutId = AuthenticationConstraintsItem.TopWave.layoutId,\r\n                bottomWaveLayoutId = AuthenticationConstraintsItem.BottomWave.layoutId,\r\n            )\r\n\r\n            SignInTextFieldsArea(\r\n                focusRequester = focusRequester,\r\n                state = signInState,\r\n                keyboardActionOnDone = {\r\n                    event(SignUiEvent.KeyboardActionDone)\r\n                },\r\n                onValueChangeEmail = { event(SignUiEvent.ChangeEmail(it)) },\r\n                onValueChangePassword = { event(SignUiEvent.ChangePassword(it)) },\r\n                onClickPasswordVisibility = { event(SignUiEvent.TogglePasswordVisibility) },\r\n                email = uiState.email,\r\n                emailErrorMessage = uiState.emailErrorMessage,\r\n                password = uiState.password,\r\n                passwordErrorMessage = uiState.passwordErrorMessage,\r\n                passwordVisible = uiState.isPasswordVisible\r\n            )\r\n\r\n            val isLoading = remember(signInState.isLoading, emailAuthState.isLoading) {\r\n                (signInState.isLoading || emailAuthState.isLoading)\r\n            }\r\n\r\n            SignInCredentialsSection(\r\n                onClickFacebookButton = { event(SignUiEvent.SignInWithFacebook) },\r\n                onClickGoogleButton = { event(SignUiEvent.SignInWithGoogle) },\r\n                enabled = !isLoading\r\n            )\r\n\r\n            SignInButton(\r\n                onClickSignInButton = { event(SignUiEvent.SignInWithEmailAndPassword) },\r\n                enabled = !isLoading)\r\n\r\n            SignInClickableText(\r\n                onClickSignInText = { event(SignUiEvent.NavigateToSignUp) },\r\n                enabled = !isLoading)\r\n\r\n            if (isLoading) {\r\n                CircularProgressIndicator(\r\n                    modifier = Modifier.layoutId(AuthenticationConstraintsItem.ProgressBar.layoutId)\r\n                )\r\n            }\r\n\r\n            if (uiState.isNoInternetVisible) {\r\n                NoInternetDialog(\r\n                    onDismiss = {\r\n                        event(SignUiEvent.DismissNoInternetDialog)\r\n                    },\r\n                    modifier = Modifier.layoutId(AuthenticationConstraintsItem.NoInternetScreen.layoutId))\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInScreenContent.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInScreenContent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInScreenContent.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/components/SignInScreenContent.kt	(date 1687223246920)
@@ -18,6 +18,7 @@
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.layout.layoutId
 import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.text.input.TextFieldValue
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.constraintlayout.compose.ConstraintLayout
 import com.example.cyclistance.R
@@ -42,7 +43,7 @@
     }
 
 
-    val onValueChangeEmail = remember<(String) -> Unit> {
+    val onValueChangeEmail = remember<(TextFieldValue) -> Unit> {
         {
             uiState = uiState.copy(
                 email = it,
@@ -51,7 +52,7 @@
         }
     }
 
-    val onValueChangePassword = remember<(String) -> Unit> {
+    val onValueChangePassword = remember<(TextFieldValue) -> Unit> {
         {
             uiState = uiState.copy(
                 password = it,
@@ -80,7 +81,7 @@
     }
 
 
-    val onValueChangeEmail = remember<(String) -> Unit> {
+    val onValueChangeEmail = remember<(TextFieldValue) -> Unit> {
         {
             uiState = uiState.copy(
                 email = it,
@@ -89,7 +90,7 @@
         }
     }
 
-    val onValueChangePassword = remember<(String) -> Unit> {
+    val onValueChangePassword = remember<(TextFieldValue) -> Unit> {
         {
             uiState = uiState.copy(
                 password = it,
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>buildscript {\r\n\r\n    ext {\r\n        compose_version = '1.3.1'\r\n        kotlin_version = '1.7.10'\r\n    }\r\n\r\n    dependencies {\r\n        classpath(\"com.google.dagger:hilt-android-gradle-plugin:2.45\")\r\n        classpath 'com.android.tools.build:gradle:8.0.0'\r\n        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.21'\r\n        classpath 'com.google.gms:google-services:4.3.15'\r\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.5'\r\n    }\r\n\r\n}\r\n\r\nplugins {\r\n    id 'com.android.application' version '8.0.0' apply false\r\n    id 'com.android.library' version '8.0.0' apply false\r\n    id 'org.jetbrains.kotlin.android' version '1.8.0' apply false // change to 1.8.0\r\n    id 'com.google.dagger.hilt.android' version '2.41' apply false\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/build.gradle	(date 1687186308244)
@@ -7,7 +7,7 @@
 
     dependencies {
         classpath("com.google.dagger:hilt-android-gradle-plugin:2.45")
-        classpath 'com.android.tools.build:gradle:8.0.0'
+        classpath 'com.android.tools.build:gradle:8.0.2'
         classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.21'
         classpath 'com.google.gms:google-services:4.3.15'
         classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.5'
@@ -16,8 +16,8 @@
 }
 
 plugins {
-    id 'com.android.application' version '8.0.0' apply false
-    id 'com.android.library' version '8.0.0' apply false
+    id 'com.android.application' version '8.0.2' apply false
+    id 'com.android.library' version '8.0.2' apply false
     id 'org.jetbrains.kotlin.android' version '1.8.0' apply false // change to 1.8.0
     id 'com.google.dagger.hilt.android' version '2.41' apply false
 }
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/state/SignInUiState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state\r\n\r\nimport android.os.Parcelable\r\nimport com.example.cyclistance.core.utils.annotations.StableState\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport kotlinx.parcelize.Parcelize\r\n\r\n@Parcelize\r\n@StableState\r\ndata class SignInUiState(\r\n    val alertDialogState: AlertDialogState = AlertDialogState(),\r\n    val isNoInternetVisible : Boolean = false,\r\n    val email: String = \"\",\r\n    val emailErrorMessage: String = \"\",\r\n    val password: String = \"\",\r\n    val passwordErrorMessage: String = \"\",\r\n    val isPasswordVisible: Boolean = false\r\n):Parcelable\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/state/SignInUiState.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/state/SignInUiState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/state/SignInUiState.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/state/SignInUiState.kt	(date 1687223002185)
@@ -1,18 +1,21 @@
 package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state
 
 import android.os.Parcelable
+import androidx.annotation.RawRes
+import androidx.compose.ui.text.input.TextFieldValue
 import com.example.cyclistance.core.utils.annotations.StableState
 import com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState
 import kotlinx.parcelize.Parcelize
+import kotlinx.parcelize.RawValue
 
 @Parcelize
 @StableState
 data class SignInUiState(
     val alertDialogState: AlertDialogState = AlertDialogState(),
     val isNoInternetVisible : Boolean = false,
-    val email: String = "",
+    val email: @RawValue TextFieldValue = TextFieldValue(""),
     val emailErrorMessage: String = "",
-    val password: String = "",
+    val password: @RawValue TextFieldValue = TextFieldValue(""),
     val passwordErrorMessage: String = "",
     val isPasswordVisible: Boolean = false
 ):Parcelable
Index: app/src/main/java/com/example/cyclistance/feature_message/presentation/components/MessagingConversation.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_message.presentation.components\r\n\r\nimport androidx.activity.compose.BackHandler\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.wrapContentHeight\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.itemsIndexed\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.Surface\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.CompositionLocalProvider\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.derivedStateOf\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.cyclistance.core.utils.composable_utils.Keyboard\r\nimport com.example.cyclistance.core.utils.composable_utils.keyboardAsState\r\nimport com.example.cyclistance.core.utils.composable_utils.noRippleClickable\r\nimport com.example.cyclistance.feature_authentication.domain.util.findActivity\r\nimport com.example.cyclistance.feature_message.domain.model.ui.Duration\r\nimport com.example.cyclistance.feature_message.domain.model.ui.MessageContent\r\nimport com.example.cyclistance.feature_message.domain.model.ui.MessageConversation\r\nimport com.example.cyclistance.navigation.IsDarkTheme\r\nimport com.example.cyclistance.theme.CyclistanceTheme\r\nimport kotlinx.coroutines.launch\r\n\r\nprivate val USER_ID = \"1\"\r\nprivate val conversation = MessageConversation(\r\n    messages = listOf(\r\n        MessageContent(\r\n            messageId = \"12\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"Hello\",\r\n            dateSent = \"10:30 AM\",\r\n            duration = Duration.OneDay,\r\n\r\n            ),\r\n        MessageContent(\r\n            messageId = \"13\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"How are you?\",\r\n            dateSent = \"11:32 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"14\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"I'm fine, thanks\",\r\n            dateSent = \"11:35 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"15\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"How about you?\",\r\n            dateSent = \"FEB 13 12:12 AM\",\r\n            duration = Duration.OneMonth\r\n        ),\r\n        MessageContent(\r\n            messageId = \"16\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"I'm fine too\",\r\n            dateSent = \"11:42 AM\",\r\n            duration = Duration.OneHour\r\n        ),\r\n        MessageContent(\r\n            messageId = \"17\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"Good to hear that\",\r\n            dateSent = \"11:43 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"18\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"orem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia,\\n\" +\r\n                      \"molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum\\n\" +\r\n                      \"numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium\\n\" +\r\n                      \"optio, eaque rerum! Provident similique accusantium nemo autem.\",\r\n            dateSent = \"11:45 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"19357846457\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"Let's go for a ride?\",\r\n            dateSent = \"11:50 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"23457570\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"Sure\",\r\n            dateSent = \"11:55 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"19\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"Let's go for a ride?\",\r\n            dateSent = \"11:50 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"23453450\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"Sure\",\r\n            dateSent = \"11:55 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"194533467\",\r\n            senderId = \"1\",\r\n            recipientId = \"2\",\r\n            content = \"Let's go for a ride?\",\r\n            dateSent = \"11:50 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"203223\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"Sure asdasdasd\",\r\n            dateSent = \"11:55 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"18553\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"orem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia,\\n\" +\r\n                      \"molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum\\n\" +\r\n                      \"numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium\\n\" +\r\n                      \"optio, eaque rerum! Provident similique accusantium nemo autem.\",\r\n            dateSent = \"11:45 AM\"\r\n        ),\r\n        MessageContent(\r\n            messageId = \"2546718\",\r\n            senderId = \"2\",\r\n            recipientId = \"1\",\r\n            content = \"orem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia,\\n\" +\r\n                      \"molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum\\n\" +\r\n                      \"numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium\\n\" +\r\n                      \"optio, eaque rerum! Provident similique accusantium nemo autem.\",\r\n            dateSent = \"11:45 AM\"\r\n        ),\r\n    )\r\n)\r\n\r\n\r\n@Composable\r\nfun MessagingConversation() {\r\n\r\n    var selectedIndex by rememberSaveable { mutableIntStateOf(-1) }\r\n    var message by remember { mutableStateOf(\"\") }\r\n    var messageAreaExpanded by rememberSaveable { mutableStateOf(false) }\r\n    val listState =\r\n        rememberLazyListState(initialFirstVisibleItemIndex = conversation.messages.indices.last)\r\n    val focusManager = LocalFocusManager.current\r\n    val keyboardState by keyboardAsState()\r\n\r\n    val onToggleExpand = remember {\r\n        {\r\n            messageAreaExpanded = !messageAreaExpanded\r\n        }\r\n    }\r\n    val onChangeValueMessage = remember<(String) -> Unit> {\r\n        {\r\n            message = it\r\n        }\r\n    }\r\n\r\n    val resetSelectedIndex = remember {\r\n        {\r\n            selectedIndex = -1\r\n        }\r\n    }\r\n\r\n    val scope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val onClickChatItem = remember {\r\n        { index: Int ->\r\n            selectedIndex = if (selectedIndex == index) {\r\n                -1\r\n            } else {\r\n                index\r\n            }\r\n        }\r\n    }\r\n    val stateFirstVisibleItemIndex by remember { derivedStateOf { listState.firstVisibleItemIndex } }\r\n    var farthestVisibleItemIndex by rememberSaveable { mutableIntStateOf(0) }\r\n    val isScrollingUp by remember { derivedStateOf { farthestVisibleItemIndex > stateFirstVisibleItemIndex + 3 } }\r\n\r\n    LaunchedEffect(key1 = listState.isScrollInProgress) {\r\n        if (stateFirstVisibleItemIndex > farthestVisibleItemIndex) {\r\n            farthestVisibleItemIndex = stateFirstVisibleItemIndex\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(key1 = keyboardState) {\r\n        if (keyboardState == Keyboard.Opened) {\r\n            return@LaunchedEffect\r\n        }\r\n        if (!messageAreaExpanded) {\r\n            return@LaunchedEffect\r\n        }\r\n        onToggleExpand()\r\n\r\n    }\r\n\r\n    BackHandler(enabled = true, onBack = {\r\n        if (messageAreaExpanded) {\r\n            onToggleExpand()\r\n        } else {\r\n            scope.launch {\r\n                context.findActivity()?.finish()\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    Surface(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .noRippleClickable {\r\n                resetSelectedIndex()\r\n                if (messageAreaExpanded) {\r\n                    onToggleExpand()\r\n                }\r\n                focusManager.clearFocus()\r\n            },\r\n        color = MaterialTheme.colors.background,\r\n    ) {\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()) {\r\n\r\n\r\n            LazyColumn(\r\n                state = listState,\r\n                verticalArrangement = Arrangement.Top,\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                modifier = Modifier.weight(1f),\r\n                contentPadding = PaddingValues(top = 16.dp, bottom = 24.dp)\r\n            ) {\r\n\r\n                itemsIndexed(\r\n                    items = conversation.messages,\r\n                    key = { _, item -> item.messageId }) { index, message ->\r\n\r\n                    val isSender by remember { derivedStateOf { message.senderId != USER_ID } }\r\n                    val timeStampAvailable by remember { derivedStateOf { message.duration != null && message.dateSent != null } }\r\n\r\n                    AnimatedVisibility(visible = timeStampAvailable) {\r\n\r\n                        MessagingTimeStamp(\r\n                            value = message.dateSent!!,\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(vertical = 8.dp))\r\n                    }\r\n\r\n\r\n                    ChatItem(\r\n                        message = message,\r\n                        isSender = isSender,\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(vertical = 8.dp, horizontal = 6.dp),\r\n                        contentAlignment = if (isSender) Alignment.CenterStart else Alignment.CenterEnd,\r\n                        currentIndex = index,\r\n                        selectedIndex = selectedIndex,\r\n                        onClick = onClickChatItem\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n\r\n            Column(\r\n                horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.background(\r\n                    Color.Transparent)) {\r\n\r\n                ScrollToBottomButton(isVisible = isScrollingUp, onClick = {\r\n\r\n                })\r\n\r\n                MessagingTextArea(\r\n                    message = message,\r\n                    onValueChange = { onChangeValueMessage(it) },\r\n                    modifier = Modifier.wrapContentHeight(),\r\n                    onClickSend = {\r\n\r\n                    },\r\n                    onToggleExpand = onToggleExpand,\r\n                    isExpanded = messageAreaExpanded)\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewMessagingConversationContentDark() {\r\n    CompositionLocalProvider(IsDarkTheme provides true) {\r\n        CyclistanceTheme(darkTheme = true) {\r\n            MessagingConversation()\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewMessagingConversationContentLight() {\r\n    CompositionLocalProvider(IsDarkTheme provides false) {\r\n        CyclistanceTheme(darkTheme = false) {\r\n            MessagingConversation()\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_message/presentation/components/MessagingConversation.kt b/app/src/main/java/com/example/cyclistance/feature_message/presentation/components/MessagingConversation.kt
--- a/app/src/main/java/com/example/cyclistance/feature_message/presentation/components/MessagingConversation.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_message/presentation/components/MessagingConversation.kt	(date 1687222504306)
@@ -1,4 +1,4 @@
-package com.example.cyclistance.feature_message.presentation.components
+    package com.example.cyclistance.feature_message.presentation.components
 
 import androidx.activity.compose.BackHandler
 import androidx.compose.animation.AnimatedVisibility
@@ -175,8 +175,7 @@
     var selectedIndex by rememberSaveable { mutableIntStateOf(-1) }
     var message by remember { mutableStateOf("") }
     var messageAreaExpanded by rememberSaveable { mutableStateOf(false) }
-    val listState =
-        rememberLazyListState(initialFirstVisibleItemIndex = conversation.messages.indices.last)
+    val listState = rememberLazyListState(initialFirstVisibleItemIndex = conversation.messages.indices.last)
     val focusManager = LocalFocusManager.current
     val keyboardState by keyboardAsState()
 
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/SignInScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in\r\n\r\nimport android.widget.Toast\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\r\nimport androidx.navigation.NavController\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.core.utils.constants.AuthConstants.GOOGLE_SIGN_IN_REQUEST_CODE\r\nimport com.example.cyclistance.feature_authentication.domain.model.SignInCredential\r\nimport com.example.cyclistance.feature_authentication.domain.util.AuthResult\r\nimport com.example.cyclistance.feature_authentication.domain.util.LocalActivityResultCallbackManager\r\nimport com.example.cyclistance.feature_authentication.domain.util.findActivity\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_email.EmailAuthViewModel\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_email.event.EmailAuthEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_email.event.EmailAuthVmEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.components.SignInScreenContent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.event.SignInEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.event.SignInVmEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.event.SignUiEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.state.SignInUiState\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport com.example.cyclistance.navigation.Screens\r\nimport com.example.cyclistance.navigation.navigateScreen\r\nimport com.example.cyclistance.navigation.navigateScreenInclusively\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount\r\nimport com.google.android.gms.common.api.ApiException\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\n@Composable\r\nfun SignInScreen(\r\n    signInViewModel: SignInViewModel = hiltViewModel(),\r\n    emailAuthViewModel: EmailAuthViewModel = hiltViewModel(),\r\n    paddingValues: PaddingValues,\r\n    navController: NavController) {\r\n\r\n    val context = LocalContext.current\r\n    val scope = rememberCoroutineScope()\r\n    val signInState by signInViewModel.state.collectAsStateWithLifecycle()\r\n    val emailAuthState by emailAuthViewModel.state.collectAsStateWithLifecycle()\r\n    val focusRequester = remember { FocusRequester() }\r\n    var uiState by rememberSaveable {\r\n        mutableStateOf(SignInUiState())\r\n    }\r\n\r\n    val focusManager = LocalFocusManager.current\r\n    val authResultLauncher = rememberLauncherForActivityResult(contract = AuthResult()) { task ->\r\n        try {\r\n            val account: GoogleSignInAccount? = task?.getResult(ApiException::class.java)\r\n            account?.idToken?.let { token ->\r\n                scope.launch {\r\n                    signInViewModel.onEvent(\r\n                        event = SignInVmEvent.SignInGoogle(\r\n                            authCredential = SignInCredential.Google(\r\n                                providerToken = token)))\r\n                }\r\n            }\r\n        } catch (e: ApiException) {\r\n            Toast.makeText(context, e.message, Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    val callbackManager = LocalActivityResultCallbackManager.current\r\n    DisposableEffect(Unit) {\r\n        callbackManager.addListener(signInViewModel)\r\n        onDispose {\r\n            callbackManager.removeListener(signInViewModel)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = true) {\r\n        focusRequester.requestFocus()\r\n        signInViewModel.eventFlow.collectLatest { signInEvent ->\r\n\r\n            when (signInEvent) {\r\n\r\n                is SignInEvent.RefreshEmail -> {\r\n                    emailAuthViewModel.onEvent(EmailAuthVmEvent.RefreshEmail)\r\n                }\r\n\r\n                is SignInEvent.SignInSuccess -> {\r\n                    navController.navigateScreenInclusively(\r\n                        Screens.MappingScreen.route,\r\n                        Screens.SignInScreen.route)\r\n                }\r\n\r\n                is SignInEvent.SignInFailed -> {\r\n                    Toast.makeText(context, signInEvent.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is SignInEvent.NoInternetConnection -> {\r\n                    uiState = uiState.copy(\r\n                        isNoInternetVisible = true\r\n                    )\r\n                }\r\n\r\n                is SignInEvent.AccountBlockedTemporarily -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Account Blocked Temporarily\",\r\n                            description = \"You have been blocked temporarily for too many failed attempts. Please try again later.\",\r\n                            icon = R.raw.error,\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is SignInEvent.ConflictFbToken -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Conflict Facebook Account\",\r\n                            description = \"Sorry, something went wrong. Please try again.\",\r\n                            icon = R.raw.error)\r\n                    )\r\n                }\r\n\r\n                is SignInEvent.FacebookSignInFailed -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Facebook Sign In Failed\",\r\n                            description = \"Failed to sign in with Facebook. Please try again.\",\r\n                            icon = R.raw.error)\r\n                    )\r\n                }\r\n\r\n                is SignInEvent.InvalidEmail -> {\r\n                    uiState = uiState.copy(\r\n                        emailErrorMessage = signInEvent.reason\r\n                    )\r\n                }\r\n\r\n                is SignInEvent.InvalidPassword -> {\r\n                    uiState = uiState.copy(\r\n                        passwordErrorMessage = signInEvent.reason\r\n                    )\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = true) {\r\n        emailAuthViewModel.eventFlow.collectLatest { emailAuthEvent ->\r\n            when (emailAuthEvent) {\r\n                is EmailAuthEvent.EmailVerificationSuccess -> {\r\n                    navController.navigateScreenInclusively(\r\n                        Screens.MappingScreen.route,\r\n                        Screens.SignInScreen.route)\r\n                }\r\n\r\n                is EmailAuthEvent.ReloadEmailFailed -> {\r\n                    Toast.makeText(context, emailAuthEvent.reason, Toast.LENGTH_LONG).show()\r\n                }\r\n\r\n                is EmailAuthEvent.EmailVerificationNotSent -> {\r\n                    Toast.makeText(context, emailAuthEvent.reason, Toast.LENGTH_LONG).show()\r\n                }\r\n\r\n                is EmailAuthEvent.EmailVerificationFailed -> {\r\n                    navController.navigateScreenInclusively(\r\n                        Screens.EmailAuthScreen.route,\r\n                        Screens.SignInScreen.route)\r\n                }\r\n\r\n                is EmailAuthEvent.EmailVerificationSent -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"New Email Sent.\",\r\n                            description = \"New verification email has been sent to your email address.\",\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is EmailAuthEvent.SendEmailVerificationFailed -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Email Verification Failed.\",\r\n                            description = \"Failed to send verification email. Please try again later.\",\r\n                            icon = R.raw.error)\r\n                    )\r\n                }\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val onDismissAlertDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                alertDialogState = AlertDialogState()\r\n            )\r\n        }\r\n    }\r\n    val onDoneKeyboardAction = remember {\r\n        {\r\n            signInViewModel.onEvent(\r\n                SignInVmEvent.SignInWithEmailAndPassword(\r\n                    email = uiState.email,\r\n                    password = uiState.password))\r\n            focusManager.clearFocus()\r\n        }\r\n    }\r\n\r\n    val onValueChangeEmail = remember<(String) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                email = it,\r\n                emailErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n\r\n    val onValueChangePassword = remember<(String) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                password = it,\r\n                passwordErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n\r\n    val onClickPasswordVisibility = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isPasswordVisible = !uiState.isPasswordVisible\r\n            )\r\n        }\r\n    }\r\n\r\n    val onClickFacebookButton = remember {\r\n        {\r\n            signInViewModel.onEvent(SignInVmEvent.SignInFacebook(activity = context.findActivity()))\r\n        }\r\n    }\r\n\r\n    val onClickGoogleButton = remember {\r\n        {\r\n            scope.launch {\r\n                authResultLauncher.launch(GOOGLE_SIGN_IN_REQUEST_CODE)\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val onClickSignInButton = remember {\r\n        {\r\n            signInViewModel.onEvent(\r\n                SignInVmEvent.SignInWithEmailAndPassword(\r\n                    email = uiState.email,\r\n                    password = uiState.password\r\n                ))\r\n        }\r\n    }\r\n\r\n    val onClickSignInText = remember {\r\n        {\r\n            navController.navigateScreen(Screens.SignUpScreen.route)\r\n        }\r\n    }\r\n\r\n    val onDismissNoInternetDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isNoInternetVisible = false\r\n            )\r\n        }\r\n    }\r\n\r\n    SignInScreenContent(\r\n        modifier = Modifier.padding(paddingValues),\r\n        signInState = signInState,\r\n        emailAuthState = emailAuthState,\r\n        focusRequester = focusRequester,\r\n        uiState = uiState,\r\n        event = { event ->\r\n            when (event) {\r\n                is SignUiEvent.DismissAlertDialog -> onDismissAlertDialog()\r\n                is SignUiEvent.KeyboardActionDone -> onDoneKeyboardAction()\r\n                is SignUiEvent.ChangeEmail -> onValueChangeEmail(event.email)\r\n                is SignUiEvent.ChangePassword -> onValueChangePassword(event.password)\r\n                is SignUiEvent.TogglePasswordVisibility -> onClickPasswordVisibility()\r\n                is SignUiEvent.SignInWithFacebook -> onClickFacebookButton()\r\n                is SignUiEvent.SignInWithGoogle -> onClickGoogleButton()\r\n                is SignUiEvent.SignInWithEmailAndPassword -> onClickSignInButton()\r\n                is SignUiEvent.NavigateToSignUp -> onClickSignInText()\r\n                is SignUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\r\n            }\r\n        }\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/SignInScreen.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/SignInScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/SignInScreen.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/SignInScreen.kt	(date 1687223971772)
@@ -17,6 +17,7 @@
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalFocusManager
+import androidx.compose.ui.text.input.TextFieldValue
 import androidx.hilt.navigation.compose.hiltViewModel
 import androidx.lifecycle.compose.collectAsStateWithLifecycle
 import androidx.navigation.NavController
@@ -216,13 +217,13 @@
         {
             signInViewModel.onEvent(
                 SignInVmEvent.SignInWithEmailAndPassword(
-                    email = uiState.email,
-                    password = uiState.password))
+                    email = uiState.email.text,
+                    password = uiState.password.text))
             focusManager.clearFocus()
         }
     }
 
-    val onValueChangeEmail = remember<(String) -> Unit> {
+    val onValueChangeEmail = remember<(TextFieldValue) -> Unit> {
         {
             uiState = uiState.copy(
                 email = it,
@@ -231,7 +232,7 @@
         }
     }
 
-    val onValueChangePassword = remember<(String) -> Unit> {
+    val onValueChangePassword = remember<(TextFieldValue) -> Unit> {
         {
             uiState = uiState.copy(
                 password = it,
@@ -265,10 +266,13 @@
 
     val onClickSignInButton = remember {
         {
+
+
+
             signInViewModel.onEvent(
                 SignInVmEvent.SignInWithEmailAndPassword(
-                    email = uiState.email,
-                    password = uiState.password
+                    email = uiState.email.text,
+                    password = uiState.password.text
                 ))
         }
     }
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/components/SignUpTextFields.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.components\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.text.KeyboardActionScope\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.state.SignUpState\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstraintsItem\r\nimport com.example.cyclistance.feature_authentication.presentation.common.ConfirmPasswordTextField\r\nimport com.example.cyclistance.feature_authentication.presentation.common.EmailTextField\r\nimport com.example.cyclistance.feature_authentication.presentation.common.PasswordTextField\r\n\r\n@Composable\r\nfun SignUpTextFieldsArea(\r\n    state: SignUpState,\r\n    email: String,\r\n    emailErrorMessage: String,\r\n    password: String,\r\n    passwordErrorMessage: String,\r\n    confirmPassword: String,\r\n    confirmPasswordErrorMessage: String,\r\n    passwordVisibility: Boolean,\r\n    focusRequester: FocusRequester,\r\n    onValueChangeEmail: (String) -> Unit,\r\n    onValueChangePassword: (String) -> Unit,\r\n    onValueChangeConfirmPassword: (String) -> Unit,\r\n    keyboardActionOnDone: (KeyboardActionScope.() -> Unit),\r\n    onClickPasswordVisibility: () -> Unit) {\r\n\r\n\r\n    with(state) {\r\n        Column(\r\n            modifier = Modifier\r\n                .layoutId(AuthenticationConstraintsItem.TextFields.layoutId)\r\n                .fillMaxWidth(fraction = 0.9f),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(13.dp)) {\r\n\r\n\r\n            EmailTextField(\r\n                focusRequester = focusRequester,\r\n                email = email,\r\n                emailErrorMessage = emailErrorMessage,\r\n                clearIconOnClick = {\r\n                 onValueChangeEmail(\"\")\r\n                },\r\n                onValueChange = onValueChangeEmail,\r\n                enabled = !isLoading)\r\n\r\n\r\n            PasswordTextField(\r\n                password = password,\r\n                passwordExceptionMessage = passwordErrorMessage,\r\n                clearIconOnClick = {\r\n                    onValueChangePassword(\"\")\r\n                },\r\n                onValueChange = onValueChangePassword,\r\n                enabled = !isLoading,\r\n\r\n                )\r\n\r\n            ConfirmPasswordTextField(\r\n                password = confirmPassword,\r\n                passwordErrorMessage = confirmPasswordErrorMessage,\r\n                onValueChange = onValueChangeConfirmPassword,\r\n                keyboardActionOnDone = keyboardActionOnDone,\r\n                isPasswordVisible = passwordVisibility,\r\n                passwordVisibilityIconOnClick = onClickPasswordVisibility,\r\n                enabled = !isLoading\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/components/SignUpTextFields.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/components/SignUpTextFields.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/components/SignUpTextFields.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/components/SignUpTextFields.kt	(date 1687224160797)
@@ -9,6 +9,7 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.layout.layoutId
+import androidx.compose.ui.text.input.TextFieldValue
 import androidx.compose.ui.unit.dp
 import com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.state.SignUpState
 import com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstraintsItem
@@ -19,17 +20,17 @@
 @Composable
 fun SignUpTextFieldsArea(
     state: SignUpState,
-    email: String,
+    email: TextFieldValue,
     emailErrorMessage: String,
-    password: String,
+    password: TextFieldValue,
     passwordErrorMessage: String,
-    confirmPassword: String,
+    confirmPassword: TextFieldValue,
     confirmPasswordErrorMessage: String,
     passwordVisibility: Boolean,
     focusRequester: FocusRequester,
-    onValueChangeEmail: (String) -> Unit,
-    onValueChangePassword: (String) -> Unit,
-    onValueChangeConfirmPassword: (String) -> Unit,
+    onValueChangeEmail: (TextFieldValue) -> Unit,
+    onValueChangePassword: (TextFieldValue) -> Unit,
+    onValueChangeConfirmPassword: (TextFieldValue) -> Unit,
     keyboardActionOnDone: (KeyboardActionScope.() -> Unit),
     onClickPasswordVisibility: () -> Unit) {
 
@@ -48,7 +49,7 @@
                 email = email,
                 emailErrorMessage = emailErrorMessage,
                 clearIconOnClick = {
-                 onValueChangeEmail("")
+                 onValueChangeEmail(TextFieldValue(""))
                 },
                 onValueChange = onValueChangeEmail,
                 enabled = !isLoading)
@@ -58,7 +59,7 @@
                 password = password,
                 passwordExceptionMessage = passwordErrorMessage,
                 clearIconOnClick = {
-                    onValueChangePassword("")
+                    onValueChangePassword(TextFieldValue(""))
                 },
                 onValueChange = onValueChangePassword,
                 enabled = !isLoading,
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/event/SignUiEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.event\r\n\r\nsealed class SignUiEvent{\r\n    object DismissAlertDialog: SignUiEvent()\r\n    object KeyboardActionDone: SignUiEvent()\r\n    data class ChangeEmail(val email: String): SignUiEvent()\r\n    data class ChangePassword(val password: String): SignUiEvent()\r\n    object TogglePasswordVisibility: SignUiEvent()\r\n    object SignInWithFacebook: SignUiEvent()\r\n    object SignInWithGoogle: SignUiEvent()\r\n    object SignInWithEmailAndPassword: SignUiEvent()\r\n    object NavigateToSignUp: SignUiEvent()\r\n    object DismissNoInternetDialog: SignUiEvent()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/event/SignUiEvent.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/event/SignUiEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/event/SignUiEvent.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_in/event/SignUiEvent.kt	(date 1687223246892)
@@ -1,10 +1,12 @@
 package com.example.cyclistance.feature_authentication.presentation.authentication_sign_in.event
 
+import androidx.compose.ui.text.input.TextFieldValue
+
 sealed class SignUiEvent{
     object DismissAlertDialog: SignUiEvent()
     object KeyboardActionDone: SignUiEvent()
-    data class ChangeEmail(val email: String): SignUiEvent()
-    data class ChangePassword(val password: String): SignUiEvent()
+    data class ChangeEmail(val email: TextFieldValue): SignUiEvent()
+    data class ChangePassword(val password: TextFieldValue): SignUiEvent()
     object TogglePasswordVisibility: SignUiEvent()
     object SignInWithFacebook: SignUiEvent()
     object SignInWithGoogle: SignUiEvent()
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/SignUpScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_up\r\n\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\r\nimport androidx.navigation.NavController\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.components.SignUpScreenContent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.event.SignUpEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.event.SignUpUiEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.event.SignUpVmEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.state.SignUpUiState\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport com.example.cyclistance.navigation.Screens\r\nimport com.example.cyclistance.navigation.navigateScreenInclusively\r\nimport kotlinx.coroutines.flow.collectLatest\r\n\r\n@Composable\r\nfun SignUpScreen(\r\n    signUpViewModel: SignUpViewModel = hiltViewModel(),\r\n    paddingValues: PaddingValues,\r\n    navController: NavController) {\r\n\r\n    val signUpState by signUpViewModel.state.collectAsStateWithLifecycle()\r\n    val focusManager = LocalFocusManager.current\r\n    val focusRequester = remember { FocusRequester() }\r\n\r\n    var uiState by rememberSaveable { mutableStateOf(SignUpUiState()) }\r\n\r\n    val signUpAccount = remember(key1 = uiState.email, key2 = signUpState.hasAccountSignedIn) {\r\n        {\r\n            val isUserCreatedNewAccount = uiState.email != signUpState.savedAccountEmail\r\n            if (signUpState.hasAccountSignedIn && isUserCreatedNewAccount) {\r\n                signUpViewModel.onEvent(SignUpVmEvent.SignOut)\r\n            }\r\n            signUpViewModel.onEvent(\r\n                SignUpVmEvent.SignUp(\r\n                    email = uiState.email,\r\n                    password = uiState.password,\r\n                    confirmPassword = uiState.confirmPassword))\r\n        }\r\n\r\n    }\r\n\r\n    val onDismissAlertDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                alertDialogState = AlertDialogState()\r\n            )\r\n        }\r\n    }\r\n\r\n    val onDoneKeyboardAction = remember{\r\n        {\r\n            signUpAccount()\r\n            focusManager.clearFocus()\r\n        }\r\n    }\r\n    val onValueChangeEmail = remember {\r\n        { inputEmail: String ->\r\n            uiState = uiState.copy(\r\n                email = inputEmail,\r\n                emailErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n    val onValueChangePassword = remember {\r\n        { inputPassword: String ->\r\n            uiState = uiState.copy(\r\n                password = inputPassword,\r\n                passwordErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n    val onValueChangeConfirmPassword = remember {\r\n        { inputConfirmPassword: String ->\r\n            uiState = uiState.copy(\r\n                confirmPassword = inputConfirmPassword,\r\n                confirmPasswordErrorMessage = \"\"\r\n            )\r\n        }\r\n    }\r\n    val onClickPasswordVisibility = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                passwordVisible = !uiState.passwordVisible\r\n            )\r\n        }\r\n    }\r\n    val onClickSignUpButton = remember {\r\n        {\r\n            signUpAccount()\r\n        }\r\n    }\r\n    val onClickSignUpText = remember {\r\n        {\r\n            navController.navigateScreenInclusively(\r\n                Screens.SignInScreen.route,\r\n                Screens.SignUpScreen.route)\r\n        }\r\n    }\r\n    val onDismissNoInternetDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isNoInternetVisible = false\r\n            )\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(key1 = true) {\r\n        focusRequester.requestFocus()\r\n        signUpViewModel.eventFlow.collectLatest { event ->\r\n\r\n            when (event) {\r\n                is SignUpEvent.SignUpSuccess -> {\r\n                    navController.navigateScreenInclusively(\r\n                        Screens.EmailAuthScreen.route,\r\n                        Screens.SignUpScreen.route)\r\n\r\n                }\r\n\r\n                is SignUpEvent.CreateAccountFailed -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Failed to create account\",\r\n                            description = \" Failed to create account. Check info and try again or contact support.\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n\r\n                }\r\n\r\n                is SignUpEvent.NoInternetConnection -> {\r\n                    uiState = uiState.copy(\r\n                        isNoInternetVisible = true\r\n                    )\r\n                }\r\n\r\n                is SignUpEvent.AccountAlreadyTaken -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Account already taken\",\r\n                            description = \"Account already taken. Try again or contact support.\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is SignUpEvent.InvalidEmail -> {\r\n                    uiState = uiState.copy(\r\n                        emailErrorMessage = event.reason\r\n                    )\r\n                }\r\n\r\n                is SignUpEvent.InvalidPassword -> {\r\n                    uiState = uiState.copy(\r\n                        passwordErrorMessage = event.reason\r\n                    )\r\n                }\r\n\r\n                is SignUpEvent.InvalidConfirmPassword -> {\r\n                    uiState = uiState.copy(\r\n                        confirmPasswordErrorMessage = event.reason\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    SignUpScreenContent(\r\n        modifier = Modifier.padding(paddingValues),\r\n        focusRequester = focusRequester,\r\n        signUpState = signUpState,\r\n        uiState = uiState,\r\n        event = { event ->\r\n            when (event) {\r\n                is SignUpUiEvent.DismissAlertDialog -> onDismissAlertDialog()\r\n                is SignUpUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\r\n                is SignUpUiEvent.KeyboardActionDone -> onDoneKeyboardAction()\r\n                is SignUpUiEvent.ChangeEmail -> onValueChangeEmail(event.email)\r\n                is SignUpUiEvent.ChangePassword -> onValueChangePassword(event.password)\r\n                is SignUpUiEvent.ChangeConfirmPassword -> onValueChangeConfirmPassword(event.confirmPassword)\r\n                is SignUpUiEvent.TogglePasswordVisibility -> onClickPasswordVisibility()\r\n                is SignUpUiEvent.SignUpWithEmailAndPassword -> onClickSignUpButton()\r\n                is SignUpUiEvent.NavigateToSignIn -> onClickSignUpText()\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/SignUpScreen.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/SignUpScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/SignUpScreen.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/SignUpScreen.kt	(date 1687225198949)
@@ -12,6 +12,7 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.platform.LocalFocusManager
+import androidx.compose.ui.text.input.TextFieldValue
 import androidx.hilt.navigation.compose.hiltViewModel
 import androidx.lifecycle.compose.collectAsStateWithLifecycle
 import androidx.navigation.NavController
@@ -40,15 +41,15 @@
 
     val signUpAccount = remember(key1 = uiState.email, key2 = signUpState.hasAccountSignedIn) {
         {
-            val isUserCreatedNewAccount = uiState.email != signUpState.savedAccountEmail
+            val isUserCreatedNewAccount = uiState.email.text != signUpState.savedAccountEmail
             if (signUpState.hasAccountSignedIn && isUserCreatedNewAccount) {
                 signUpViewModel.onEvent(SignUpVmEvent.SignOut)
             }
             signUpViewModel.onEvent(
                 SignUpVmEvent.SignUp(
-                    email = uiState.email,
-                    password = uiState.password,
-                    confirmPassword = uiState.confirmPassword))
+                    email = uiState.email.text,
+                    password = uiState.password.text,
+                    confirmPassword = uiState.confirmPassword.text))
         }
 
     }
@@ -66,9 +67,9 @@
             signUpAccount()
             focusManager.clearFocus()
         }
-    }
+    } 
     val onValueChangeEmail = remember {
-        { inputEmail: String ->
+        { inputEmail: TextFieldValue ->
             uiState = uiState.copy(
                 email = inputEmail,
                 emailErrorMessage = ""
@@ -76,7 +77,7 @@
         }
     }
     val onValueChangePassword = remember {
-        { inputPassword: String ->
+        { inputPassword: TextFieldValue ->
             uiState = uiState.copy(
                 password = inputPassword,
                 passwordErrorMessage = ""
@@ -84,7 +85,7 @@
         }
     }
     val onValueChangeConfirmPassword = remember {
-        { inputConfirmPassword: String ->
+        { inputConfirmPassword: TextFieldValue ->
             uiState = uiState.copy(
                 confirmPassword = inputConfirmPassword,
                 confirmPasswordErrorMessage = ""
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/event/SignUpUiEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.event\r\n\r\nsealed class SignUpUiEvent{\r\n    object DismissAlertDialog: SignUpUiEvent()\r\n    object KeyboardActionDone: SignUpUiEvent()\r\n    data class ChangeEmail(val email: String): SignUpUiEvent()\r\n    data class ChangePassword(val password: String): SignUpUiEvent()\r\n    data class ChangeConfirmPassword(val confirmPassword: String): SignUpUiEvent()\r\n    object TogglePasswordVisibility: SignUpUiEvent()\r\n    object SignUpWithEmailAndPassword: SignUpUiEvent()\r\n    object NavigateToSignIn: SignUpUiEvent()\r\n    object DismissNoInternetDialog: SignUpUiEvent()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/event/SignUpUiEvent.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/event/SignUpUiEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/event/SignUpUiEvent.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/event/SignUpUiEvent.kt	(date 1687224417955)
@@ -1,11 +1,13 @@
 package com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.event
 
+import androidx.compose.ui.text.input.TextFieldValue
+
 sealed class SignUpUiEvent{
     object DismissAlertDialog: SignUpUiEvent()
     object KeyboardActionDone: SignUpUiEvent()
-    data class ChangeEmail(val email: String): SignUpUiEvent()
-    data class ChangePassword(val password: String): SignUpUiEvent()
-    data class ChangeConfirmPassword(val confirmPassword: String): SignUpUiEvent()
+    data class ChangeEmail(val email: TextFieldValue): SignUpUiEvent()
+    data class ChangePassword(val password: TextFieldValue): SignUpUiEvent()
+    data class ChangeConfirmPassword(val confirmPassword: TextFieldValue): SignUpUiEvent()
     object TogglePasswordVisibility: SignUpUiEvent()
     object SignUpWithEmailAndPassword: SignUpUiEvent()
     object NavigateToSignIn: SignUpUiEvent()
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/state/SignUpUiState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.state\r\n\r\nimport android.os.Parcelable\r\nimport com.example.cyclistance.core.utils.annotations.StableState\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport kotlinx.parcelize.Parcelize\r\n\r\n\r\n@Parcelize\r\n@StableState\r\ndata class SignUpUiState(\r\n    val email:String = \"\",\r\n    val emailErrorMessage:String = \"\",\r\n    val password:String = \"\",\r\n    val passwordErrorMessage:String = \"\",\r\n    val confirmPassword:String = \"\",\r\n    val confirmPasswordErrorMessage:String = \"\",\r\n    val alertDialogState: AlertDialogState = AlertDialogState(),\r\n    val passwordVisible: Boolean = false,\r\n    val isNoInternetVisible: Boolean = false,\r\n): Parcelable\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/state/SignUpUiState.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/state/SignUpUiState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/state/SignUpUiState.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/authentication_sign_up/state/SignUpUiState.kt	(date 1687224417997)
@@ -1,19 +1,21 @@
 package com.example.cyclistance.feature_authentication.presentation.authentication_sign_up.state
 
 import android.os.Parcelable
+import androidx.compose.ui.text.input.TextFieldValue
 import com.example.cyclistance.core.utils.annotations.StableState
 import com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState
 import kotlinx.parcelize.Parcelize
+import kotlinx.parcelize.RawValue
 
 
 @Parcelize
 @StableState
 data class SignUpUiState(
-    val email:String = "",
+    val email: @RawValue TextFieldValue = TextFieldValue(""),
     val emailErrorMessage:String = "",
-    val password:String = "",
+    val password: @RawValue TextFieldValue = TextFieldValue(""),
     val passwordErrorMessage:String = "",
-    val confirmPassword:String = "",
+    val confirmPassword: @RawValue TextFieldValue = TextFieldValue(""),
     val confirmPasswordErrorMessage:String = "",
     val alertDialogState: AlertDialogState = AlertDialogState(),
     val passwordVisible: Boolean = false,
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.common\r\n\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.wrapContentHeight\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardActionScope\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.Icon\r\nimport androidx.compose.material.IconButton\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.Text\r\nimport androidx.compose.material.TextField\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Cancel\r\nimport androidx.compose.material.icons.filled.Email\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material.icons.filled.Lock\r\nimport androidx.compose.material.icons.filled.Visibility\r\nimport androidx.compose.material.icons.filled.VisibilityOff\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.cyclistance.theme.Black500\r\n\r\n\r\n@Composable\r\nfun ConfirmPasswordTextField(\r\n    enabled: Boolean,\r\n    password: String,\r\n    passwordErrorMessage: String,\r\n    isPasswordVisible: Boolean,\r\n    passwordVisibilityIconOnClick: () -> Unit,\r\n    onValueChange: (String) -> Unit,\r\n    keyboardActionOnDone: (KeyboardActionScope.() -> Unit)) {\r\n\r\n\r\n    SetupTextField(\r\n        enabled = enabled,\r\n        textFieldValue = password,\r\n        failureMessage = passwordErrorMessage,\r\n        onValueChange = onValueChange,\r\n        placeholderText = \"Confirm Password\",\r\n        trailingIcon = {\r\n            val image =\r\n                if (isPasswordVisible) Icons.Filled.Visibility else Icons.Filled.VisibilityOff\r\n            IconButton(onClick = passwordVisibilityIconOnClick) {\r\n                Icon(imageVector = image, \"\", tint = Black500)\r\n            }\r\n        },\r\n        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),\r\n        keyboardOptions = KeyboardOptions(\r\n            keyboardType = KeyboardType.Password,\r\n            autoCorrect = false,\r\n            imeAction = ImeAction.Done),\r\n        keyboardActions = KeyboardActions(onDone = keyboardActionOnDone)\r\n\r\n    )\r\n}\r\n\r\n@Composable\r\nfun PasswordTextField(\r\n    enabled: Boolean,\r\n    password: String,\r\n    passwordExceptionMessage: String,\r\n    clearIconOnClick: () -> Unit,\r\n    onValueChange: (String) -> Unit) {\r\n\r\n    val hasError = passwordExceptionMessage.isNotEmpty()\r\n\r\n\r\n    SetupTextField(\r\n        enabled = enabled,\r\n        textFieldValue = password,\r\n        failureMessage = passwordExceptionMessage,\r\n        onValueChange = onValueChange,\r\n        placeholderText = \"Password\",\r\n        trailingIcon = {\r\n\r\n            AnimatedVisibility(\r\n                visible = hasError,\r\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\r\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\r\n\r\n                Icon(\r\n                    imageVector = Icons.Filled.Error,\r\n                    contentDescription = \"error\",\r\n                    tint = MaterialTheme.colors.error)\r\n            }\r\n\r\n            AnimatedVisibility(\r\n                visible = password.isNotEmpty() && !hasError,\r\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\r\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\r\n\r\n                IconButton(onClick = clearIconOnClick) {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Cancel,\r\n                        contentDescription = \"\",\r\n                        tint = Black500,\r\n                        modifier = Modifier.size(20.dp)\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        keyboardOptions = KeyboardOptions(\r\n            keyboardType = KeyboardType.Password,\r\n            autoCorrect = false,\r\n            imeAction = ImeAction.Next),\r\n        visualTransformation = PasswordVisualTransformation()\r\n    )\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun SetupTextField(\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester = FocusRequester(),\r\n    textFieldValue: String,\r\n    failureMessage: String,\r\n    onValueChange: (String) -> Unit,\r\n    placeholderText: String,\r\n    leadingIcon: ImageVector = Icons.Default.Lock,\r\n    trailingIcon: @Composable (() -> Unit)? = null,\r\n    visualTransformation: VisualTransformation = VisualTransformation.None,\r\n    keyboardOptions: KeyboardOptions,\r\n    keyboardActions: KeyboardActions = KeyboardActions()\r\n) {\r\n\r\n    val hasError = failureMessage.isNotEmpty()\r\n\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        horizontalAlignment = Alignment.Start,\r\n        verticalArrangement = Arrangement.spacedBy(3.dp)) {\r\n\r\n        TextField(\r\n            enabled = enabled,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .wrapContentHeight()\r\n                .shadow(elevation = 4.dp, shape = RoundedCornerShape(12.dp), clip = true)\r\n                .focusRequester(focusRequester),\r\n            value = textFieldValue,\r\n            onValueChange = onValueChange,\r\n            singleLine = true,\r\n            maxLines = 1,\r\n            shape = RoundedCornerShape(12.dp),\r\n            placeholder = {\r\n                Text(\r\n                    modifier = Modifier.padding(horizontal = 3.dp),\r\n                    text = placeholderText,\r\n                    style = MaterialTheme.typography.subtitle2.copy(\r\n                        fontWeight = FontWeight.Normal,\r\n                        color = if (hasError) MaterialTheme.colors.error else Black500,\r\n                        textAlign = TextAlign.Center),\r\n                )\r\n            },\r\n            trailingIcon = trailingIcon,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = leadingIcon,\r\n                    contentDescription = \"Password Icon\",\r\n                    tint = if (hasError) MaterialTheme.colors.error else Black500,\r\n                    modifier = Modifier.size(18.dp)\r\n                )\r\n            },\r\n            isError = hasError,\r\n            keyboardOptions = keyboardOptions,\r\n            colors = textFieldColors(),\r\n            visualTransformation = visualTransformation,\r\n            keyboardActions = keyboardActions,\r\n            textStyle = TextStyle(\r\n                fontSize = TextUnit(value = 14f, type = TextUnitType.Sp)\r\n            )\r\n\r\n\r\n        )\r\n\r\n        AnimatedVisibility(\r\n            visible = hasError,\r\n            enter = fadeIn(animationSpec = tween(durationMillis = 100)),\r\n            exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\r\n\r\n            Text(\r\n                text = failureMessage,\r\n                color = MaterialTheme.colors.error,\r\n                style = MaterialTheme.typography.caption,\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun EmailTextField(\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    email: String,\r\n    emailErrorMessage: String,\r\n    clearIconOnClick: () -> Unit,\r\n    onValueChange: (String) -> Unit) {\r\n\r\n    val hasError = emailErrorMessage.isNotEmpty()\r\n\r\n    SetupTextField(\r\n        enabled = enabled,\r\n        focusRequester = focusRequester,\r\n        textFieldValue = email,\r\n        failureMessage = emailErrorMessage,\r\n        onValueChange = onValueChange,\r\n        placeholderText = \"Email\",\r\n        leadingIcon = Icons.Default.Email,\r\n        trailingIcon = {\r\n\r\n            AnimatedVisibility(\r\n                visible = hasError,\r\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\r\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\r\n\r\n                Icon(\r\n                    imageVector = Icons.Filled.Error,\r\n                    contentDescription = \"Error Icon\",\r\n                    tint = MaterialTheme.colors.error,\r\n                    modifier = Modifier.size(20.dp)\r\n                )\r\n            }\r\n\r\n            AnimatedVisibility(\r\n                visible = email.isNotEmpty() && !hasError,\r\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\r\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\r\n\r\n                IconButton(onClick = clearIconOnClick) {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Cancel,\r\n                        contentDescription = \"Clear Icon\",\r\n                        tint = Black500,\r\n                        modifier = Modifier.size(20.dp)\r\n                    )\r\n                }\r\n            }\r\n\r\n        },\r\n        keyboardOptions = KeyboardOptions(\r\n            keyboardType = KeyboardType.Email,\r\n            imeAction = ImeAction.Next),\r\n    )\r\n}\r\n\r\n\r\n@Composable\r\nfun ErrorMessage(errorMessage: String, modifier: Modifier = Modifier) {\r\n\r\n    Row(\r\n        modifier = modifier,\r\n        horizontalArrangement = Arrangement.spacedBy(3.dp),\r\n        verticalAlignment = Alignment.CenterVertically) {\r\n        Icon(\r\n            imageVector = Icons.Default.Error,\r\n            tint = MaterialTheme.colors.error,\r\n            modifier = Modifier.size(12.dp),\r\n            contentDescription = \"Icon error\")\r\n        Text(\r\n            text = errorMessage,\r\n            color = MaterialTheme.colors.error,\r\n            style = MaterialTheme.typography.caption,\r\n\r\n            )\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt	(revision a327842c0246eba7156cb6c903cce2c4698c6b68)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt	(date 1687223216167)
@@ -39,6 +39,7 @@
 import androidx.compose.ui.text.input.ImeAction
 import androidx.compose.ui.text.input.KeyboardType
 import androidx.compose.ui.text.input.PasswordVisualTransformation
+import androidx.compose.ui.text.input.TextFieldValue
 import androidx.compose.ui.text.input.VisualTransformation
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.TextUnit
@@ -50,11 +51,11 @@
 @Composable
 fun ConfirmPasswordTextField(
     enabled: Boolean,
-    password: String,
+    password: TextFieldValue,
     passwordErrorMessage: String,
     isPasswordVisible: Boolean,
     passwordVisibilityIconOnClick: () -> Unit,
-    onValueChange: (String) -> Unit,
+    onValueChange: (TextFieldValue) -> Unit,
     keyboardActionOnDone: (KeyboardActionScope.() -> Unit)) {
 
 
@@ -84,10 +85,10 @@
 @Composable
 fun PasswordTextField(
     enabled: Boolean,
-    password: String,
+    password: TextFieldValue,
     passwordExceptionMessage: String,
     clearIconOnClick: () -> Unit,
-    onValueChange: (String) -> Unit) {
+    onValueChange: (TextFieldValue) -> Unit) {
 
     val hasError = passwordExceptionMessage.isNotEmpty()
 
@@ -112,7 +113,7 @@
             }
 
             AnimatedVisibility(
-                visible = password.isNotEmpty() && !hasError,
+                visible = password.text.isNotEmpty() && !hasError,
                 enter = fadeIn(animationSpec = tween(durationMillis = 100)),
                 exit = fadeOut(animationSpec = tween(durationMillis = 100))) {
 
@@ -139,9 +140,9 @@
 private fun SetupTextField(
     enabled: Boolean,
     focusRequester: FocusRequester = FocusRequester(),
-    textFieldValue: String,
+    textFieldValue: TextFieldValue,
     failureMessage: String,
-    onValueChange: (String) -> Unit,
+    onValueChange: (TextFieldValue) -> Unit,
     placeholderText: String,
     leadingIcon: ImageVector = Icons.Default.Lock,
     trailingIcon: @Composable (() -> Unit)? = null,
@@ -219,10 +220,10 @@
 fun EmailTextField(
     enabled: Boolean,
     focusRequester: FocusRequester,
-    email: String,
+    email: TextFieldValue,
     emailErrorMessage: String,
     clearIconOnClick: () -> Unit,
-    onValueChange: (String) -> Unit) {
+    onValueChange: (TextFieldValue) -> Unit) {
 
     val hasError = emailErrorMessage.isNotEmpty()
 
@@ -250,7 +251,7 @@
             }
 
             AnimatedVisibility(
-                visible = email.isNotEmpty() && !hasError,
+                visible = email.text.isNotEmpty() && !hasError,
                 enter = fadeIn(animationSpec = tween(durationMillis = 100)),
                 exit = fadeOut(animationSpec = tween(durationMillis = 100))) {
 
