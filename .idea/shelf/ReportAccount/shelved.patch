Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ /dev/null	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
@@ -1,116 +0,0 @@
-package com.example.cyclistance.feature_report_account.presentation
-
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.derivedStateOf
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateListOf
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.text.input.TextFieldValue
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.window.Dialog
-import androidx.compose.ui.window.DialogProperties
-import com.example.cyclistance.feature_report_account.domain.model.ui.AccountReport
-import com.example.cyclistance.feature_report_account.presentation.components.ReportAccountDialogContent
-import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountUiEvent
-import com.example.cyclistance.feature_report_account.presentation.state.ReportAccountUiState
-import com.example.cyclistance.theme.CyclistanceTheme
-
-@Composable
-fun ReportAccountDialog(onDismiss: () -> Unit) {
-
-    var uiState by rememberSaveable {
-        mutableStateOf(ReportAccountUiState())
-    }
-    val selectedOptions = rememberSaveable { mutableStateListOf<String>() }
-    var message by rememberSaveable(stateSaver = TextFieldValue.Saver) {
-        mutableStateOf(TextFieldValue())
-    }
-
-    val onChangeMessage = remember {
-        { _message: TextFieldValue ->
-            message = _message
-        }
-    }
-    val showReportFeedback = remember {
-        {
-            uiState = uiState.copy(shouldShowReportFeedback = true)
-        }
-    }
-    val onReasonChecked = remember {
-        { reason: String ->
-
-            selectedOptions.apply {
-                if (contains(reason)) {
-                    remove(reason)
-                    return@apply
-                }
-
-                if (uiState.isReportMaxLimitReached) {
-                    return@apply
-                }
-                selectedOptions.add(reason)
-
-            }.also {
-                uiState = uiState.copy(accountReport = AccountReport(selectedOptions = it))
-            }
-
-        }
-    }
-
-
-    val isReportMaxLimitReached by remember(uiState.accountReport) { derivedStateOf { uiState.accountReport.selectedOptions.size == 3 } }
-    val isReportButtonEnabled by remember(uiState.accountReport) { derivedStateOf { uiState.accountReport.selectedOptions.isNotEmpty() } }
-
-    LaunchedEffect(key1 = isReportButtonEnabled) {
-        uiState = uiState.copy(
-            isReportButtonEnabled = isReportButtonEnabled
-        )
-    }
-
-    LaunchedEffect(key1 = isReportMaxLimitReached){
-        uiState = uiState.copy(
-            isReportMaxLimitReached = isReportMaxLimitReached
-        )
-    }
-
-    Dialog(
-        onDismissRequest = onDismiss,
-        properties = DialogProperties(
-            usePlatformDefaultWidth = false,
-            dismissOnClickOutside = false,
-            dismissOnBackPress = true
-        )
-    ) {
-
-        ReportAccountDialogContent(
-            modifier = Modifier,
-            message = message,
-            uiState = uiState,
-            event = { event ->
-                when (event) {
-                    is ReportAccountUiEvent.DismissReportAccountDialog -> onDismiss()
-                    is ReportAccountUiEvent.ShowReportFeedback -> showReportFeedback()
-                    is ReportAccountUiEvent.OnReasonChecked -> onReasonChecked(event.reason)
-                    is ReportAccountUiEvent.OnChangeMessage -> onChangeMessage(event.message)
-                }
-
-            }
-
-        )
-    }
-
-}
-
-
-@Preview
-@Composable
-fun PreviewReportAccountDialog() {
-    CyclistanceTheme(darkTheme = true) {
-        ReportAccountDialog(onDismiss = {})
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/navigation/Screens.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.navigation\n\nimport com.example.cyclistance.core.utils.constants.EmergencyCallConstants.SHOULD_OPEN_CONTACT_DIALOG\nimport com.example.cyclistance.core.utils.constants.MessagingConstants.RECEIVER_MESSAGE_OBJ\nimport com.example.cyclistance.core.utils.constants.MessagingConstants.SENDER_MESSAGE_OBJ\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.CANCELLATION_TYPE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.CLIENT_ID\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.TRANSACTION_ID\nimport com.example.cyclistance.core.utils.constants.UserProfileConstants.USER_ID\n\nsealed class Screens {\n\n\n    open class AuthenticationNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"authentication_navigation\"\n        }\n\n        object SignIn : AuthenticationNavigation(screenRoute = \"sign_in_screen\")\n        object ForgotPassword : AuthenticationNavigation(screenRoute = \"forgot_password_screen\")\n        object ResetPassword : AuthenticationNavigation(screenRoute = \"change_password_screen\")\n        object SignUp : AuthenticationNavigation(screenRoute = \"sign_up_screen\")\n        object EmailAuth : AuthenticationNavigation(screenRoute = \"email_auth_screen\")\n    }\n\n    open class EmergencyCallNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"emergency_call_navigation\"\n        }\n\n        object EmergencyCall :\n            EmergencyCallNavigation(screenRoute = \"emergency_call_screen?$SHOULD_OPEN_CONTACT_DIALOG={$SHOULD_OPEN_CONTACT_DIALOG}\") {\n            fun passArgument(shouldOpenContactDialog: Boolean) =\n                \"emergency_call_screen?$SHOULD_OPEN_CONTACT_DIALOG=$shouldOpenContactDialog\"\n        }\n    }\n\n    open class MessagingNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"messaging_navigation\"\n        }\n\n        object Chats : MessagingNavigation(screenRoute = \"chat_screen\")\n        object SearchUser : MessagingNavigation(screenRoute = \"search_user_screen\")\n        object Conversation :\n            MessagingNavigation(screenRoute = \"conversation_screen/{$RECEIVER_MESSAGE_OBJ}/{$SENDER_MESSAGE_OBJ}\") {\n            fun passArgument(receiverMessageUser: String, senderMessageUser: String) =\n                \"conversation_screen/$receiverMessageUser/$senderMessageUser\"\n        }\n    }\n\n    open class OnBoardingNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"on_boarding_navigation\"\n        }\n\n        object IntroSlider : OnBoardingNavigation(screenRoute = \"intro_slider_screen\")\n    }\n\n    open class MappingNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"mapping_navigation\"\n        }\n\n        object SinoTrack: MappingNavigation(screenRoute = \"sino_track_screen\")\n        object RescueResults: MappingNavigation(screenRoute = \"rescue_results_screen\")\n        object RescueDetails: MappingNavigation(screenRoute = \"rescue_details_screen\")\n        object Mapping : MappingNavigation(screenRoute = \"mapping_screen\")\n        object Cancellation :\n            MappingNavigation(screenRoute = \"cancellation_screen\" + \"/{${CANCELLATION_TYPE}}/{${TRANSACTION_ID}}/{${CLIENT_ID}}\") {\n            fun passArgument(cancellationType: String, transactionId: String, clientId: String) =\n                \"cancellation_screen/$cancellationType/$transactionId/$clientId\"\n\n        }\n        object ConfirmDetails : MappingNavigation(screenRoute = \"confirm_details_screen\"+\"?${LATITUDE}={${LATITUDE}}&${LONGITUDE}={${LONGITUDE}}\"){\n            fun passArgument(latitude: Float, longitude: Float) =\n                \"confirm_details_screen\"+\"?$LATITUDE=${latitude}&$LONGITUDE=${longitude}\"\n        }\n    }\n\n    open class SettingsNavigation(val screenRoute: String = \"\") : Screens() {\n\n        companion object {\n            const val ROUTE = \"settings_navigation\"\n        }\n\n        object Setting : SettingsNavigation(screenRoute = \"setting_screen\")\n    }\n\n\n    open class RideHistoryNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"ride_history_navigation\"\n        }\n\n        object RideHistory : RideHistoryNavigation(screenRoute = \"ride_history_screen\")\n        object RideHistoryDetails :\n            RideHistoryNavigation(screenRoute = \"ride_history_details_screen\")\n    }\n\n    open class UserProfileNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"user_profile_navigation\"\n        }\n\n        object UserProfile :\n            UserProfileNavigation(screenRoute = \"user_profile_screen/{$USER_ID}\") {\n            fun passArgument(userId: String) = \"user_profile_screen/$userId\"\n\n        }\n\n        object EditProfile : UserProfileNavigation(screenRoute = \"edit_profile_screen\")\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/navigation/Screens.kt b/app/src/main/java/com/example/cyclistance/navigation/Screens.kt
--- a/app/src/main/java/com/example/cyclistance/navigation/Screens.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/navigation/Screens.kt	(date 1694834975850)
@@ -114,4 +114,12 @@
         object EditProfile : UserProfileNavigation(screenRoute = "edit_profile_screen")
     }
 
+    open class ReportAccountNavigation(val screenRoute: String = ""): Screens(){
+        companion object{
+            const val ROUTE = "report_account_navigation"
+        }
+
+        object ReportAccount: ReportAccountNavigation(screenRoute = "report_account_screen")
+    }
+
 }
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt
new file mode 100644
--- /dev/null	(date 1694837596863)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt	(date 1694837596863)
@@ -0,0 +1,7 @@
+package com.example.cyclistance.feature_report_account.presentation.event
+
+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
+
+sealed class ReportAccountVmEvent{
+    data class ReportAccount(val reportAccountDetails: ReportAccountDetails): ReportAccountVmEvent()
+}
Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt
new file mode 100644
--- /dev/null	(date 1694840901725)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt	(date 1694840901725)
@@ -0,0 +1,5 @@
+package com.example.cyclistance.feature_report_account.domain.exceptions
+
+object ReportAccountExceptions {
+    class ReportAccountException(message: String = "Report account failed") : RuntimeException()
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/OptionsReport.kt
rename from app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt
rename to app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/OptionsReport.kt
--- a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/OptionsReport.kt	(date 1694836738938)
@@ -6,7 +6,7 @@
 
 @Parcelize
 @StableState
-data class AccountReport(
+data class OptionsReport(
     val selectedOptions: List<String> = emptyList()
 ): Parcelable
 
Index: app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt
new file mode 100644
--- /dev/null	(date 1694862331292)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt	(date 1694862331292)
@@ -0,0 +1,34 @@
+package com.example.cyclistance.feature_report_account.data.repository
+
+import com.example.cyclistance.core.utils.constants.ReportAccountConstants.REPORT_ACCOUNT_COLLECTION
+import com.example.cyclistance.feature_report_account.domain.exceptions.ReportAccountExceptions
+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
+import com.example.cyclistance.feature_report_account.domain.repository.ReportAccountRepository
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+import kotlinx.coroutines.suspendCancellableCoroutine
+import kotlin.coroutines.resume
+import kotlin.coroutines.resumeWithException
+
+class ReportAccountRepositoryImpl(
+    private val firestore: FirebaseFirestore,
+    private val auth: FirebaseAuth,
+) : ReportAccountRepository{
+
+    override suspend fun reportAccount(reportAccountDetails: ReportAccountDetails) {
+
+        suspendCancellableCoroutine { continuation ->
+            firestore
+                .collection(REPORT_ACCOUNT_COLLECTION)
+                .add(reportAccountDetails)
+                .addOnSuccessListener {
+                    continuation.resume(Unit)
+                }.addOnFailureListener {
+                    println("ReportAccountRepositoryImpl: reportAccount: failure")
+                    continuation.resumeWithException(
+                        ReportAccountExceptions.ReportAccountException(
+                            it.message.toString()))
+                }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountContent.kt
rename from app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt
rename to app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountContent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountContent.kt	(date 1694862670275)
@@ -54,7 +54,7 @@
 )
 
 @Composable
-fun ReportAccountDialogContent(
+fun ReportAccountContent(
     modifier: Modifier = Modifier,
     message: TextFieldValue,
     uiState: ReportAccountUiState,
@@ -151,14 +151,12 @@
                         }) {
 
                         reasonsToReportAccount.forEach { reason ->
-                            val isChecked by remember(uiState.accountReport) { derivedStateOf { reason in uiState.accountReport.selectedOptions } }
+                            val isChecked by remember(uiState.optionsReport) { derivedStateOf { reason in uiState.optionsReport.selectedOptions } }
                             ReportReasonItem(
                                 label = reason,
                                 isChecked = isChecked,
                                 onReasonChecked = {
-
                                     event(ReportAccountUiEvent.OnReasonChecked(reason = reason))
-
                                 })
                         }
                     }
@@ -229,7 +227,7 @@
 @Composable
 private fun PreviewReportAccountDialogContent() {
     CyclistanceTheme(darkTheme = true) {
-        ReportAccountDialogContent(
+        ReportAccountContent(
             message = TextFieldValue(),
             uiState = ReportAccountUiState(),
             event = {})
Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt
new file mode 100644
--- /dev/null	(date 1694840901712)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt	(date 1694840901712)
@@ -0,0 +1,10 @@
+package com.example.cyclistance.feature_report_account.domain.use_case
+
+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
+import com.example.cyclistance.feature_report_account.domain.repository.ReportAccountRepository
+
+class ReportUseCase(private val repository: ReportAccountRepository) {
+    suspend operator fun invoke(reportAccountDetails: ReportAccountDetails){
+        repository.reportAccount(reportAccountDetails)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_report_account.presentation.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_report_account.domain.model.ui.AccountReport\nimport kotlinx.parcelize.Parcelize\n\n\n@Parcelize\n@StableState\ndata class ReportAccountUiState(\n    val accountReport: AccountReport = AccountReport(),\n    val shouldShowReportFeedback: Boolean = false,\n    val isReportMaxLimitReached: Boolean = false,\n    val isReportButtonEnabled: Boolean = false,\n    val reportedName: String = \"\",\n    val reportedPhoto: String = \"\"\n) : Parcelable\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt	(date 1694836738925)
@@ -2,14 +2,14 @@
 
 import android.os.Parcelable
 import com.example.cyclistance.core.utils.annotations.StableState
-import com.example.cyclistance.feature_report_account.domain.model.ui.AccountReport
+import com.example.cyclistance.feature_report_account.domain.model.ui.OptionsReport
 import kotlinx.parcelize.Parcelize
 
 
 @Parcelize
 @StableState
 data class ReportAccountUiState(
-    val accountReport: AccountReport = AccountReport(),
+    val optionsReport: OptionsReport = OptionsReport(),
     val shouldShowReportFeedback: Boolean = false,
     val isReportMaxLimitReached: Boolean = false,
     val isReportButtonEnabled: Boolean = false,
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt
new file mode 100644
--- /dev/null	(date 1694837596869)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt	(date 1694837596869)
@@ -0,0 +1,11 @@
+package com.example.cyclistance.feature_report_account.presentation.state
+
+import android.os.Parcelable
+import kotlinx.parcelize.Parcelize
+
+@Parcelize
+@com.example.cyclistance.core.utils.annotations.StableState
+data class ReportAccountState(
+    val isLoading: Boolean = false
+
+):Parcelable
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_report_account.presentation.event\n\nimport androidx.compose.ui.text.input.TextFieldValue\n\nsealed class ReportAccountUiEvent{\n    object DismissReportAccountDialog: ReportAccountUiEvent()\n    object ShowReportFeedback: ReportAccountUiEvent()\n    data class OnReasonChecked(val reason: String): ReportAccountUiEvent()\n    data class OnChangeMessage(val message: TextFieldValue): ReportAccountUiEvent()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt	(date 1694863751024)
@@ -3,8 +3,8 @@
 import androidx.compose.ui.text.input.TextFieldValue
 
 sealed class ReportAccountUiEvent{
-    object DismissReportAccountDialog: ReportAccountUiEvent()
-    object ShowReportFeedback: ReportAccountUiEvent()
+    data object DismissReportAccountDialog: ReportAccountUiEvent()
+    data object ReportAccount: ReportAccountUiEvent()
     data class OnReasonChecked(val reason: String): ReportAccountUiEvent()
     data class OnChangeMessage(val message: TextFieldValue): ReportAccountUiEvent()
 }
Index: app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt b/app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt
new file mode 100644
--- /dev/null	(date 1694840901739)
+++ b/app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt	(date 1694840901739)
@@ -0,0 +1,43 @@
+package com.example.cyclistance.di.report_account
+
+import com.example.cyclistance.feature_report_account.data.repository.ReportAccountRepositoryImpl
+import com.example.cyclistance.feature_report_account.domain.repository.ReportAccountRepository
+import com.example.cyclistance.feature_report_account.domain.use_case.ReportAccountUseCase
+import com.example.cyclistance.feature_report_account.domain.use_case.ReportUseCase
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.components.ViewModelComponent
+import dagger.hilt.android.scopes.ViewModelScoped
+
+
+@Module
+@InstallIn(ViewModelComponent::class)
+object ReportAccountViewModelModule {
+
+    @Provides
+    @ViewModelScoped
+    fun provideReportAccountRepository(
+        fireStore: FirebaseFirestore,
+        firebaseAuth: FirebaseAuth
+    ): ReportAccountRepository {
+        return ReportAccountRepositoryImpl(
+            firestore = fireStore,
+            auth = firebaseAuth
+        )
+    }
+
+    @Provides
+    @ViewModelScoped
+    fun provideReportAccountUseCase(
+        repository: ReportAccountRepository
+    ): ReportAccountUseCase {
+        return ReportAccountUseCase(
+            reportUseCase = ReportUseCase(
+                repository = repository)
+        )
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt
new file mode 100644
--- /dev/null	(date 1694840901719)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt	(date 1694840901719)
@@ -0,0 +1,5 @@
+package com.example.cyclistance.feature_report_account.domain.use_case
+
+data class ReportAccountUseCase(
+    val reportUseCase: ReportUseCase
+)
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt
new file mode 100644
--- /dev/null	(date 1694841078354)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt	(date 1694841078354)
@@ -0,0 +1,6 @@
+package com.example.cyclistance.feature_report_account.presentation.event
+
+sealed class ReportAccountEvent{
+    data object ReportAccountSuccess: ReportAccountEvent()
+    data class ReportAccountFailed(val reason: String): ReportAccountEvent()
+}
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_report_account.presentation.components\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Button\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\nimport coil.request.CachePolicy\nimport coil.request.ImageRequest\nimport com.example.cyclistance.R\nimport com.example.cyclistance.theme.Black500\nimport com.example.cyclistance.theme.CyclistanceTheme\n\n@Composable\nfun ReportAccountFeedback(\n    modifier: Modifier = Modifier,\n    photo: String,\n    name: String,\n    onClickOkayButton: () -> Unit\n) {\n    Column(\n        verticalArrangement = Arrangement.Top,\n        horizontalAlignment = Alignment.CenterHorizontally, modifier = modifier.fillMaxWidth()\n    ) {\n\n\n        Image(\n            painter = painterResource(id = R.drawable.ic_report_account_feedback),\n            contentDescription = \"Report Account Feedback\",\n            modifier = Modifier.padding(vertical = 16.dp)\n        )\n\n        Text(\n            text = \"Thank you for feedback\",\n            color = MaterialTheme.colors.onBackground,\n            style = MaterialTheme.typography.body1,\n        )\n\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(\n                8.dp,\n                alignment = Alignment.CenterHorizontally\n            ),\n            modifier = Modifier\n                .padding(vertical = 16.dp)\n                .fillMaxWidth(0.9f)\n        ) {\n\n\n            AsyncImage(\n                model = ImageRequest.Builder(LocalContext.current)\n                    .data(photo)\n                    .crossfade(true)\n                    .networkCachePolicy(CachePolicy.ENABLED)\n                    .diskCachePolicy(CachePolicy.ENABLED)\n                    .memoryCachePolicy(CachePolicy.ENABLED)\n                    .build(),\n                alignment = Alignment.Center,\n                contentDescription = \"User Profile Image\",\n                modifier = Modifier\n                    .clip(CircleShape)\n                    .size(45.dp),\n                contentScale = ContentScale.Crop,\n                placeholder = painterResource(id = R.drawable.ic_empty_profile_placeholder_large),\n                error = painterResource(id = R.drawable.ic_empty_profile_placeholder_large),\n                fallback = painterResource(id = R.drawable.ic_empty_profile_placeholder_large)\n            )\n\n            Text(\n                text = name,\n                color = MaterialTheme.colors.onBackground,\n                style = MaterialTheme.typography.body1,\n                overflow = TextOverflow.Ellipsis,\n                maxLines = 1,\n                modifier = Modifier.weight(0.3f)\n\n            )\n\n\n        }\n\n        Text(\n            text = \"The reported account will be validated. The penalty will be implied once the action has been confirmed.\",\n            color = Black500,\n            style = MaterialTheme.typography.body1.copy(textAlign = TextAlign.Center),\n            modifier = Modifier\n                .fillMaxWidth(0.8f)\n                .padding(vertical = 16.dp),\n            )\n\n        Button(onClick = onClickOkayButton, shape = RoundedCornerShape(8.dp)) {\n            Text(\n                text = \"Okay\",\n                color = MaterialTheme.colors.onPrimary,\n                style = MaterialTheme.typography.button,\n                modifier = Modifier.padding(horizontal = 16.dp),\n\n                )\n        }\n    }\n}\n\n@Preview\n@Composable\nprivate fun PreviewReportAccountFeedback() {\n    CyclistanceTheme(darkTheme = true) {\n        Box(modifier = Modifier.background(MaterialTheme.colors.background)) {\n            Box(modifier = Modifier.fillMaxSize()) {\n                ReportAccountFeedback(\n                    photo = \"\",\n                    name = \"John Doe John DoeJohn DoeJohn DoeJohn DoeJohn DoeJohn DoeJohn DoeJohn Doe\",\n                    onClickOkayButton = {})\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt
--- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt	(date 1694864383026)
@@ -25,6 +25,8 @@
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.TextUnit
+import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
 import coil.compose.AsyncImage
 import coil.request.CachePolicy
@@ -105,11 +107,13 @@
         Text(
             text = "The reported account will be validated. The penalty will be implied once the action has been confirmed.",
             color = Black500,
-            style = MaterialTheme.typography.body1.copy(textAlign = TextAlign.Center),
+            style = MaterialTheme.typography.body1.copy(
+                textAlign = TextAlign.Justify,
+                letterSpacing = TextUnit(0.6f, type = TextUnitType.Sp)),
             modifier = Modifier
                 .fillMaxWidth(0.8f)
                 .padding(vertical = 16.dp),
-            )
+        )
 
         Button(onClick = onClickOkayButton, shape = RoundedCornerShape(8.dp)) {
             Text(
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt
new file mode 100644
--- /dev/null	(date 1694864383033)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt	(date 1694864383033)
@@ -0,0 +1,113 @@
+package com.example.cyclistance.feature_report_account.presentation
+
+import androidx.compose.foundation.layout.PaddingValues
+import androidx.compose.foundation.layout.padding
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.derivedStateOf
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateListOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.input.TextFieldValue
+import androidx.hilt.navigation.compose.hiltViewModel
+import androidx.navigation.NavController
+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
+import com.example.cyclistance.feature_report_account.domain.model.ui.OptionsReport
+import com.example.cyclistance.feature_report_account.presentation.components.ReportAccountContent
+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountUiEvent
+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountVmEvent
+import com.example.cyclistance.feature_report_account.presentation.state.ReportAccountUiState
+import java.util.Date
+
+@Composable
+fun ReportAccountScreen(
+    paddingValues: PaddingValues,
+    navController: NavController,
+    viewModel: ReportAccountViewModel = hiltViewModel()) {
+
+    var uiState by rememberSaveable {
+        mutableStateOf(ReportAccountUiState())
+    }
+    val selectedOptions = rememberSaveable { mutableStateListOf<String>() }
+    var comment by rememberSaveable(stateSaver = TextFieldValue.Saver) {
+        mutableStateOf(TextFieldValue())
+    }
+
+    val onChangeComment = remember {
+        { _comment: TextFieldValue ->
+            comment = _comment
+        }
+    }
+
+    val reportAccount = remember{{
+        viewModel.onEvent(event = ReportAccountVmEvent.ReportAccount(
+            reportAccountDetails = ReportAccountDetails(
+               reasons = OptionsReport(selectedOptions = selectedOptions),
+                name = uiState.reportedName,
+                date = Date(),
+                comment = comment.text,
+
+            )
+        ))
+    }}
+
+    val onReasonChecked = remember {
+        { reason: String ->
+
+            selectedOptions.apply {
+                if (contains(reason)) {
+                    remove(reason)
+                    return@apply
+                }
+
+                if (uiState.isReportMaxLimitReached) {
+                    return@apply
+                }
+                selectedOptions.add(reason)
+
+            }.also {
+                uiState = uiState.copy(optionsReport = OptionsReport(selectedOptions = it))
+            }
+
+        }
+    }
+
+
+    val isReportMaxLimitReached by remember(uiState.optionsReport) { derivedStateOf { uiState.optionsReport.selectedOptions.size == 3 } }
+    val isReportButtonEnabled by remember(uiState.optionsReport) { derivedStateOf { uiState.optionsReport.selectedOptions.isNotEmpty() } }
+
+    LaunchedEffect(key1 = isReportButtonEnabled) {
+        uiState = uiState.copy(
+            isReportButtonEnabled = isReportButtonEnabled
+        )
+    }
+
+    LaunchedEffect(key1 = isReportMaxLimitReached) {
+        uiState = uiState.copy(
+            isReportMaxLimitReached = isReportMaxLimitReached
+        )
+    }
+
+
+    ReportAccountContent(
+        modifier = Modifier.padding(paddingValues),
+        message = comment,
+        uiState = uiState,
+        event = { event ->
+            when (event) {
+                is ReportAccountUiEvent.DismissReportAccountDialog -> navController.popBackStack()
+                is ReportAccountUiEvent.ReportAccount -> showReportFeedback()
+                is ReportAccountUiEvent.OnReasonChecked -> onReasonChecked(event.reason)
+                is ReportAccountUiEvent.OnChangeMessage -> onChangeComment(event.message)
+            }
+
+        }
+
+    )
+
+}
+
Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt
new file mode 100644
--- /dev/null	(date 1694841476768)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt	(date 1694841476768)
@@ -0,0 +1,50 @@
+package com.example.cyclistance.feature_report_account.presentation
+
+import androidx.lifecycle.SavedStateHandle
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.example.cyclistance.core.utils.constants.ReportAccountConstants.REPORT_ACCOUNT_VM_STATE_KEY
+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
+import com.example.cyclistance.feature_report_account.domain.use_case.ReportAccountUseCase
+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountEvent
+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountVmEvent
+import com.example.cyclistance.feature_report_account.presentation.state.ReportAccountState
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.MutableSharedFlow
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.asSharedFlow
+import kotlinx.coroutines.flow.asStateFlow
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class ReportAccountViewModel @Inject constructor(
+    private val savedStateHandle: SavedStateHandle,
+    private val reportAccountUseCase: ReportAccountUseCase
+): ViewModel() {
+
+    private val _state = MutableStateFlow(ReportAccountState())
+    val state = _state.asStateFlow()
+
+    private val _eventFlow = MutableSharedFlow<ReportAccountEvent>()
+    val eventFlow = _eventFlow.asSharedFlow()
+
+    fun onEvent(event: ReportAccountVmEvent){
+        when(event){
+            is ReportAccountVmEvent.ReportAccount -> reportAccount(event.reportAccountDetails)
+        }
+        savedStateHandle[REPORT_ACCOUNT_VM_STATE_KEY] = state.value
+    }
+
+    private fun reportAccount(reportAccountDetails: ReportAccountDetails){
+        viewModelScope.launch {
+            runCatching {
+                reportAccountUseCase.reportUseCase(reportAccountDetails)
+            }.onSuccess {
+                _eventFlow.emit(value = ReportAccountEvent.ReportAccountSuccess)
+            }.onFailure {
+                _eventFlow.emit(value = ReportAccountEvent.ReportAccountFailed(reason = it.message ?: "Failed to report account"))
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.navigation.nav_graph\n\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport com.example.cyclistance.navigation.event.NavUiEvent\nimport com.example.cyclistance.navigation.state.NavUiState\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\n\n\n@ExperimentalPermissionsApi\n@Composable\nfun NavGraph(\n    navController: NavHostController,\n    paddingValues: PaddingValues,\n    uiState: NavUiState,\n    event: (NavUiEvent) -> Unit) {\n\n\n    NavHost(\n        navController = navController,\n        startDestination = uiState.startingDestination,\n        enterTransition = {\n            fadeIn(\n                animationSpec = tween(\n                    durationMillis = 300))\n        },\n        exitTransition = {\n            fadeOut(\n                animationSpec = tween(\n                    durationMillis = 300))\n        }) {\n\n\n        authenticationGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n        )\n\n        mappingGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n            hasInternetConnection = uiState.internetAvailable,\n            isNavigating = uiState.isNavigating,\n            onChangeNavigatingState = { event(NavUiEvent.OnChangeNavigation(it)) }\n        )\n\n        emergencyCallGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n        messagingGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n            isInternetAvailable = uiState.internetAvailable,\n            newConversationDetails = {\n                event(\n                    NavUiEvent.NewConversationDetails(it))\n            }\n        )\n\n        onBoardingGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n        settingGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n            onToggleTheme = { event(NavUiEvent.OnToggleTheme) }\n        )\n\n        rideHistoryGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n        userProfileGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n    }\n}\n\n\nfun NavController.navigateScreenInclusively(\n    destination: String,\n    popUpToDestination: String) {\n    navigate(destination) {\n        popUpTo(popUpToDestination) {\n            inclusive = true\n        }\n        launchSingleTop = true\n    }\n\n}\n\nfun NavController.navigateScreen(\n    route: String) {\n    navigate(route) {\n        popUpTo(route) {\n            saveState = true\n\n        }\n        restoreState = true\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt
--- a/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
+++ b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt	(date 1694835094322)
@@ -86,6 +86,11 @@
             paddingValues = paddingValues
         )
 
+        onReportAccountGraph(
+            navController = navController,
+            paddingValues = paddingValues
+        )
+
     }
 }
 
Index: app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt
new file mode 100644
--- /dev/null	(date 1694835094332)
+++ b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt	(date 1694835094332)
@@ -0,0 +1,31 @@
+package com.example.cyclistance.navigation.nav_graph
+
+import androidx.compose.foundation.layout.PaddingValues
+import androidx.navigation.NavController
+import androidx.navigation.NavGraphBuilder
+import androidx.navigation.compose.composable
+import androidx.navigation.navigation
+import com.example.cyclistance.feature_report_account.presentation.ReportAccountScreen
+import com.example.cyclistance.navigation.Screens
+
+fun NavGraphBuilder.onReportAccountGraph(
+    navController: NavController,
+    paddingValues: PaddingValues
+) {
+
+    navigation(
+        startDestination = Screens.ReportAccountNavigation.ReportAccount.screenRoute,
+        route = Screens.ReportAccountNavigation.ROUTE){
+
+        composable(Screens.ReportAccountNavigation.ReportAccount.screenRoute){
+            ReportAccountScreen(
+                navController = navController,
+                paddingValues = paddingValues
+            )
+        }
+
+    }
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt
new file mode 100644
--- /dev/null	(date 1694838235595)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt	(date 1694838235595)
@@ -0,0 +1,7 @@
+package com.example.cyclistance.feature_report_account.domain.repository
+
+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
+
+interface ReportAccountRepository {
+    suspend fun reportAccount(reportAccountDetails: ReportAccountDetails)
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt
new file mode 100644
--- /dev/null	(date 1694862545106)
+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt	(date 1694862545106)
@@ -0,0 +1,19 @@
+package com.example.cyclistance.feature_report_account.domain.model
+
+import android.os.Parcelable
+import com.example.cyclistance.core.utils.annotations.StableState
+import com.example.cyclistance.feature_report_account.domain.model.ui.OptionsReport
+import kotlinx.parcelize.Parcelize
+import java.util.Date
+
+@Parcelize
+@StableState
+data class ReportAccountDetails(
+    val reasons: OptionsReport = OptionsReport(),
+    val name: String = "",
+    val userId: String = "",
+    val idReportBy: String = "",
+    val comment: String = "",
+    val date: Date? = null,
+
+    ):Parcelable
Index: app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt b/app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt
new file mode 100644
--- /dev/null	(date 1694841476758)
+++ b/app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt	(date 1694841476758)
@@ -0,0 +1,6 @@
+package com.example.cyclistance.core.utils.constants
+
+object ReportAccountConstants {
+    const val REPORT_ACCOUNT_COLLECTION = "reportAccount"
+    const val REPORT_ACCOUNT_VM_STATE_KEY = "reportAccountVmState"
+}
\ No newline at end of file
