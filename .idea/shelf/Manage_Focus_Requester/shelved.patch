Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.common\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.wrapContentHeight\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActionScope\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.Icon\nimport androidx.compose.material.IconButton\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Cancel\nimport androidx.compose.material.icons.filled.Email\nimport androidx.compose.material.icons.filled.Error\nimport androidx.compose.material.icons.filled.Lock\nimport androidx.compose.material.icons.filled.Visibility\nimport androidx.compose.material.icons.filled.VisibilityOff\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.semantics.clearAndSetSemantics\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.text.input.VisualTransformation\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.TextUnit\nimport androidx.compose.ui.unit.TextUnitType\nimport androidx.compose.ui.unit.dp\nimport com.example.cyclistance.theme.Black500\n\n\n@Composable\nfun ConfirmPasswordTextField(\n    modifier: Modifier = Modifier,\n    enabled: Boolean,\n    password: TextFieldValue,\n    passwordErrorMessage: String,\n    isPasswordVisible: Boolean,\n    passwordVisibilityIconOnClick: () -> Unit,\n    onValueChange: (TextFieldValue) -> Unit,\n    keyboardActionOnDone: (KeyboardActionScope.() -> Unit)) {\n\n\n    SetupTextField(\n        modifier = modifier,\n        enabled = enabled,\n        textFieldValue = password,\n        failureMessage = passwordErrorMessage,\n        onValueChange = onValueChange,\n        placeholderText = \"Confirm Password\",\n        trailingIcon = {\n            val image =\n                if (isPasswordVisible) Icons.Filled.Visibility else Icons.Filled.VisibilityOff\n            IconButton(onClick = passwordVisibilityIconOnClick) {\n                Icon(imageVector = image, \"\", tint = Black500)\n            }\n        },\n        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),\n        keyboardOptions = KeyboardOptions(\n            keyboardType = KeyboardType.Password,\n            autoCorrect = false,\n            imeAction = ImeAction.Done),\n        keyboardActions = KeyboardActions(onDone = keyboardActionOnDone)\n\n    )\n}\n\n@Composable\nfun PasswordTextField(\n    modifier: Modifier = Modifier,\n    placeholderText: String = \"Password\",\n    enabled: Boolean,\n    password: TextFieldValue,\n    passwordExceptionMessage: String,\n    clearIconOnClick: () -> Unit,\n    onValueChange: (TextFieldValue) -> Unit) {\n\n    val hasError = passwordExceptionMessage.isNotEmpty()\n\n\n    SetupTextField(\n        modifier = modifier,\n        enabled = enabled,\n        textFieldValue = password,\n        failureMessage = passwordExceptionMessage,\n        onValueChange = onValueChange,\n        placeholderText = placeholderText,\n        trailingIcon = {\n\n            AnimatedVisibility(\n                visible = hasError,\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\n\n                Icon(\n                    imageVector = Icons.Filled.Error,\n                    contentDescription = \"error\",\n                    tint = MaterialTheme.colors.error)\n            }\n\n            AnimatedVisibility(\n                visible = password.text.isNotEmpty() && !hasError,\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\n\n                IconButton(onClick = clearIconOnClick) {\n                    Icon(\n                        imageVector = Icons.Default.Cancel,\n                        contentDescription = \"\",\n                        tint = Black500,\n                        modifier = Modifier.size(20.dp)\n                    )\n                }\n            }\n        },\n        keyboardOptions = KeyboardOptions(\n            keyboardType = KeyboardType.Password,\n            autoCorrect = false,\n            imeAction = ImeAction.Next),\n        visualTransformation = PasswordVisualTransformation()\n    )\n}\n\n\n@Composable\nprivate fun SetupTextField(\n    modifier: Modifier = Modifier,\n    enabled: Boolean,\n    focusRequester: FocusRequester = FocusRequester(),\n    textFieldValue: TextFieldValue,\n    failureMessage: String,\n    onValueChange: (TextFieldValue) -> Unit,\n    placeholderText: String,\n    leadingIcon: ImageVector = Icons.Default.Lock,\n    trailingIcon: @Composable (() -> Unit)? = null,\n    visualTransformation: VisualTransformation = VisualTransformation.None,\n    keyboardOptions: KeyboardOptions,\n    keyboardActions: KeyboardActions = KeyboardActions()\n) {\n\n    val hasError = failureMessage.isNotEmpty()\n\n    Column(\n        modifier = modifier.fillMaxWidth(),\n        horizontalAlignment = Alignment.Start,\n        verticalArrangement = Arrangement.spacedBy(3.dp)) {\n\n        TextField(\n            enabled = enabled,\n            modifier = Modifier\n                .fillMaxWidth()\n                .wrapContentHeight()\n                .shadow(elevation = 4.dp, shape = RoundedCornerShape(12.dp), clip = true)\n                .focusRequester(focusRequester)\n                .clearAndSetSemantics { },\n            value = textFieldValue,\n            onValueChange = onValueChange,\n            singleLine = true,\n            maxLines = 1,\n            shape = RoundedCornerShape(12.dp),\n            placeholder = {\n                Text(\n                    modifier = Modifier.padding(horizontal = 3.dp),\n                    text = placeholderText,\n                    style = MaterialTheme.typography.subtitle2.copy(\n                        fontWeight = FontWeight.Normal,\n                        color = if (hasError) MaterialTheme.colors.error else Black500,\n                        textAlign = TextAlign.Center),\n                )\n            },\n            trailingIcon = trailingIcon,\n            leadingIcon = {\n                Icon(\n                    imageVector = leadingIcon,\n                    contentDescription = \"Password Icon\",\n                    tint = if (hasError) MaterialTheme.colors.error else Black500,\n                    modifier = Modifier.size(18.dp)\n                )\n            },\n            isError = hasError,\n            keyboardOptions = keyboardOptions,\n            colors = textFieldColors(),\n            visualTransformation = visualTransformation,\n            keyboardActions = keyboardActions,\n            textStyle = TextStyle(\n                fontSize = TextUnit(value = 14f, type = TextUnitType.Sp)\n            )\n\n\n        )\n\n        AnimatedVisibility(\n            visible = hasError,\n            enter = fadeIn(animationSpec = tween(durationMillis = 100)),\n            exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\n\n            Text(\n                text = failureMessage,\n                color = MaterialTheme.colors.error,\n                style = MaterialTheme.typography.caption,\n            )\n        }\n    }\n}\n\n\n@Composable\nfun EmailTextField(\n    modifier: Modifier = Modifier,\n    enabled: Boolean,\n    focusRequester: FocusRequester,\n    email: TextFieldValue,\n    emailErrorMessage: String,\n    clearIconOnClick: () -> Unit,\n    onValueChange: (TextFieldValue) -> Unit) {\n\n    val hasError = emailErrorMessage.isNotEmpty()\n\n    SetupTextField(\n        modifier = modifier,\n        enabled = enabled,\n        focusRequester = focusRequester,\n        textFieldValue = email,\n        failureMessage = emailErrorMessage,\n        onValueChange = onValueChange,\n        placeholderText = \"Email\",\n        leadingIcon = Icons.Default.Email,\n        trailingIcon = {\n\n            AnimatedVisibility(\n                visible = hasError,\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\n\n                Icon(\n                    imageVector = Icons.Filled.Error,\n                    contentDescription = \"Error Icon\",\n                    tint = MaterialTheme.colors.error,\n                    modifier = Modifier.size(20.dp)\n                )\n            }\n\n            AnimatedVisibility(\n                visible = email.text.isNotEmpty() && !hasError,\n                enter = fadeIn(animationSpec = tween(durationMillis = 100)),\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\n\n                IconButton(onClick = clearIconOnClick) {\n                    Icon(\n                        imageVector = Icons.Default.Cancel,\n                        contentDescription = \"Clear Icon\",\n                        tint = Black500,\n                        modifier = Modifier.size(20.dp)\n                    )\n                }\n            }\n\n        },\n        keyboardOptions = KeyboardOptions(\n            keyboardType = KeyboardType.Email,\n            imeAction = ImeAction.Next),\n    )\n}\n\n\n@Composable\nfun ErrorMessage(errorMessage: String, modifier: Modifier = Modifier) {\n\n    Row(\n        modifier = modifier,\n        horizontalArrangement = Arrangement.spacedBy(3.dp),\n        verticalAlignment = Alignment.CenterVertically) {\n        Icon(\n            imageVector = Icons.Default.Error,\n            tint = MaterialTheme.colors.error,\n            modifier = Modifier.size(12.dp),\n            contentDescription = \"Icon error\")\n        Text(\n            text = errorMessage,\n            color = MaterialTheme.colors.error,\n            style = MaterialTheme.typography.caption,\n\n            )\n    }\n}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt	(revision d100c21e87b311fe49a802d918dce64790822898)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/common/AuthenticationTextFields.kt	(date 1691641182105)
@@ -146,7 +146,7 @@
 private fun SetupTextField(
     modifier: Modifier = Modifier,
     enabled: Boolean,
-    focusRequester: FocusRequester = FocusRequester(),
+    focusRequester: FocusRequester? = null,
     textFieldValue: TextFieldValue,
     failureMessage: String,
     onValueChange: (TextFieldValue) -> Unit,
@@ -171,7 +171,7 @@
                 .fillMaxWidth()
                 .wrapContentHeight()
                 .shadow(elevation = 4.dp, shape = RoundedCornerShape(12.dp), clip = true)
-                .focusRequester(focusRequester)
+                .apply { focusRequester?.let { focusRequester(it) } }
                 .clearAndSetSemantics { },
             value = textFieldValue,
             onValueChange = onValueChange,
@@ -228,7 +228,7 @@
 fun EmailTextField(
     modifier: Modifier = Modifier,
     enabled: Boolean,
-    focusRequester: FocusRequester,
+    focusRequester: FocusRequester? = null,
     email: TextFieldValue,
     emailErrorMessage: String,
     clearIconOnClick: () -> Unit,
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_forgot_password/components/ForgotPasswordContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.auth_forgot_password.components\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.layout.layoutId\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport com.example.cyclistance.R\nimport com.example.cyclistance.feature_authentication.presentation.auth_forgot_password.state.ForgotPasswordState\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.BOTTOM_WAVE_ID\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.BUTTONS_ID\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.ICON_DISPLAY_ID\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TEXT_FIELDS_ID\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TEXT_LABEL\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TOP_SPACER_ID\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TOP_WAVE_ID\nimport com.example.cyclistance.feature_authentication.presentation.common.EmailTextField\nimport com.example.cyclistance.feature_authentication.presentation.common.Waves\nimport com.example.cyclistance.feature_mapping.presentation.common.ButtonNavigation\nimport com.example.cyclistance.navigation.IsDarkTheme\nimport com.example.cyclistance.theme.Black500\nimport com.example.cyclistance.theme.CyclistanceTheme\n\n@Composable\nfun ForgotPasswordContent(\n    modifier: Modifier = Modifier,\n    state: ForgotPasswordState\n) {\n\n    Surface(\n        modifier = modifier.fillMaxSize(),\n        color = MaterialTheme.colors.background) {\n\n\n        val isDarkTheme = IsDarkTheme.current\n\n        ConstraintLayout(\n            modifier = Modifier\n                .fillMaxSize()\n                .verticalScroll(rememberScrollState()),\n            constraintSet = forgotPasswordConstraints) {\n\n\n            Spacer(modifier = Modifier.layoutId(TOP_SPACER_ID))\n\n            Image(\n                contentDescription = \"Display Image\",\n                painter = painterResource(id = if (isDarkTheme) R.drawable.ic_forgot_pw_dark else R.drawable.ic_forgot_pw_light),\n                modifier = Modifier.layoutId(ICON_DISPLAY_ID),\n            )\n\n            Waves(\n                topWaveLayoutId = TOP_WAVE_ID,\n                bottomWaveLayoutId = BOTTOM_WAVE_ID)\n\n            Column(\n                modifier = Modifier\n                    .layoutId(TEXT_LABEL)\n                    .padding(top = 15.dp)\n                    .padding(horizontal = 15.dp)) {\n                Text(\n                    text = \"Forgot Password\",\n                    style = MaterialTheme.typography.subtitle1.copy(fontWeight = FontWeight.Medium),\n                    color = MaterialTheme.colors.onBackground,\n                    modifier = Modifier.padding(bottom = 8.dp))\n\n                Text(\n                    text = \"Don’t worry it happens. Kindly enter the email address associated with your account.\",\n                    style = MaterialTheme.typography.subtitle2.copy(fontWeight = FontWeight.Normal),\n                    color = Black500)\n\n            }\n\n            EmailTextField(\n                modifier = Modifier\n                    .layoutId(TEXT_FIELDS_ID)\n                    .padding(horizontal = 15.dp),\n                enabled = !state.isLoading,\n                focusRequester = FocusRequester(),\n                email = TextFieldValue(\"\"),\n                emailErrorMessage = \"\",\n                clearIconOnClick = { /*TODO*/ },\n                onValueChange = {})\n\n\n            ButtonNavigation(\n                modifier = Modifier.layoutId(BUTTONS_ID),\n                negativeButtonEnabled = !state.isLoading,\n                positiveButtonEnabled = !state.isLoading,\n                negativeButtonText = \"Cancel\",\n                positiveButtonText = \"Submit\",\n                onClickNegativeButton = {},\n                onClickPositiveButton = {}\n            )\n\n\n        }\n\n    }\n}\n\n\n@Preview(device = \"id:Galaxy Nexus\")\n@Composable\nfun PreviewForgotPasswordContentDark() {\n    CompositionLocalProvider(IsDarkTheme provides true) {\n        CyclistanceTheme(darkTheme = true) {\n            ForgotPasswordContent(state = ForgotPasswordState())\n        }\n    }\n}\n\n\n@Preview(device = \"id:Galaxy Nexus\")\n@Composable\nfun PreviewForgotPasswordContentLight() {\n    CompositionLocalProvider(IsDarkTheme provides false) {\n        CyclistanceTheme(darkTheme = false) {\n            ForgotPasswordContent(state = ForgotPasswordState())\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_forgot_password/components/ForgotPasswordContent.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_forgot_password/components/ForgotPasswordContent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_forgot_password/components/ForgotPasswordContent.kt	(revision d100c21e87b311fe49a802d918dce64790822898)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_forgot_password/components/ForgotPasswordContent.kt	(date 1691641184989)
@@ -13,7 +13,6 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.CompositionLocalProvider
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.layout.layoutId
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontWeight
@@ -92,7 +91,6 @@
                     .layoutId(TEXT_FIELDS_ID)
                     .padding(horizontal = 15.dp),
                 enabled = !state.isLoading,
-                focusRequester = FocusRequester(),
                 email = TextFieldValue(""),
                 emailErrorMessage = "",
                 clearIconOnClick = { /*TODO*/ },
