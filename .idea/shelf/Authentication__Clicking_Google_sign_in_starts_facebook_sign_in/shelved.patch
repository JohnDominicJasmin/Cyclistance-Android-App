Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_in/components/SignInScreenContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.auth_sign_in.components\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.text.ClickableText\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.CircularProgressIndicator\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.Surface\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.SpanStyle\r\nimport androidx.compose.ui.text.buildAnnotatedString\r\nimport androidx.compose.ui.text.input.TextFieldValue\r\nimport androidx.compose.ui.text.withStyle\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog\r\nimport com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog\r\nimport com.example.cyclistance.core.presentation.dialogs.privacy_policy_dialog.PrivacyPolicyDialog\r\nimport com.example.cyclistance.core.presentation.dialogs.webview_dialog.DialogWebView\r\nimport com.example.cyclistance.feature_authentication.domain.model.SignInCredential\r\nimport com.example.cyclistance.feature_authentication.presentation.auth_email.state.EmailAuthState\r\nimport com.example.cyclistance.feature_authentication.presentation.auth_sign_in.event.SignInUiEvent\r\nimport com.example.cyclistance.feature_authentication.presentation.auth_sign_in.state.SignInState\r\nimport com.example.cyclistance.feature_authentication.presentation.auth_sign_in.state.SignInUiState\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.BOTTOM_WAVE_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.DIALOG_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.ICON_DISPLAY_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.PROGRESS_BAR_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TEXT_FIELDS_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TOP_SPACER_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.AuthenticationConstrains.TOP_WAVE_ID\r\nimport com.example.cyclistance.feature_authentication.presentation.common.Waves\r\nimport com.example.cyclistance.feature_authentication.presentation.common.visible\r\nimport com.example.cyclistance.theme.CyclistanceTheme\r\n\r\n\r\n@Composable\r\nfun SignInScreenContent(\r\n    modifier: Modifier = Modifier,\r\n    signInState: SignInState = SignInState(),\r\n    emailAuthState: EmailAuthState = EmailAuthState(),\r\n    uiState: SignInUiState = SignInUiState(),\r\n    email: TextFieldValue,\r\n    password: TextFieldValue,\r\n    event: (SignInUiEvent) -> Unit = {}) {\r\n\r\n    var lastClicked by remember {\r\n        mutableStateOf(\"\")\r\n    }\r\n\r\n    Surface(modifier = modifier.fillMaxSize(), color = MaterialTheme.colors.background) {\r\n\r\n        ConstraintLayout(\r\n            constraintSet = signInConstraints,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .verticalScroll(rememberScrollState())) {\r\n\r\n            Spacer(modifier = Modifier.layoutId(TOP_SPACER_ID))\r\n\r\n            Image(\r\n                contentDescription = \"App Icon\",\r\n                painter = painterResource(R.drawable.ic_app_icon_cyclistance),\r\n                modifier = Modifier\r\n                    .layoutId(ICON_DISPLAY_ID)\r\n            )\r\n\r\n\r\n            SignUpTextArea()\r\n\r\n            if (uiState.alertDialogState.visible()) {\r\n                AlertDialog(\r\n                    alertDialog = uiState.alertDialogState,\r\n                    onDismissRequest = {\r\n                        event(SignInUiEvent.DismissAlertDialog)\r\n                    })\r\n            }\r\n\r\n            Waves(\r\n                topWaveLayoutId = TOP_WAVE_ID,\r\n                bottomWaveLayoutId = BOTTOM_WAVE_ID,\r\n            )\r\n\r\n            Column(\r\n                modifier = Modifier.layoutId(TEXT_FIELDS_ID)\r\n            ) {\r\n                SignInTextFieldsArea(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth(fraction = 0.9f),\r\n                    state = signInState,\r\n                    keyboardActionOnDone = {\r\n                        event(SignInUiEvent.KeyboardActionDone)\r\n                    },\r\n                    onValueChangeEmail = { event(SignInUiEvent.OnChangeEmail(it)) },\r\n                    onValueChangePassword = { event(SignInUiEvent.OnChangePassword(it)) },\r\n                    onClickPasswordVisibility = { event(SignInUiEvent.TogglePasswordVisibility) },\r\n                    email = email,\r\n                    emailErrorMessage = uiState.emailErrorMessage,\r\n                    password = password,\r\n                    passwordErrorMessage = uiState.passwordErrorMessage,\r\n                    passwordVisible = uiState.isPasswordVisible\r\n                )\r\n                ClickableText(modifier = Modifier.padding(top = 8.dp), text = buildAnnotatedString {\r\n                    withStyle(style = SpanStyle(color = MaterialTheme.colors.onBackground)) {\r\n                        append(\"Forgot your password?\")\r\n                    }\r\n                }, onClick = {\r\n                    event(SignInUiEvent.NavigateToForgotPassword)\r\n                })\r\n            }\r\n\r\n            val isLoading = remember(signInState.isLoading, emailAuthState.isLoading) {\r\n                (signInState.isLoading || emailAuthState.isLoading)\r\n            }\r\n\r\n            val shouldShowPrivacyPolicyDialog = remember(\r\n                key1 = signInState.userAgreedToPrivacyPolicy,\r\n                key2 = uiState.isPrivacyPolicyDialogVisible) {\r\n                (!signInState.userAgreedToPrivacyPolicy && uiState.isPrivacyPolicyDialogVisible)\r\n            }\r\n\r\n            SignInCredentialsSection(\r\n                onClickFacebookButton = {\r\n\r\n                    if (signInState.userAgreedToPrivacyPolicy) {\r\n                        event(SignInUiEvent.SignInWithFacebook)\r\n                    }\r\n                    else{\r\n                        event(SignInUiEvent.SetPrivacyPolicyVisibility(true))\r\n                        lastClicked=\"\"\r\n                        lastClicked = SignInCredential.Facebook::javaClass.name\r\n                    }\r\n\r\n                },\r\n                onClickGoogleButton = {\r\n                    if (signInState.userAgreedToPrivacyPolicy){\r\n                        event(SignInUiEvent.SignInWithGoogle)\r\n                    }\r\n                    else {\r\n                        event(SignInUiEvent.SetPrivacyPolicyVisibility(true))\r\n                        lastClicked=\"\"\r\n                        lastClicked = SignInCredential.Google::javaClass.name\r\n                    }\r\n                },\r\n                enabled = !isLoading\r\n            )\r\n\r\n            SignInButton(\r\n                onClickSignInButton = { event(SignInUiEvent.SignInWithEmailAndPassword) },\r\n                enabled = !isLoading)\r\n\r\n            SignInClickableText(\r\n                onClickSignInText = { event(SignInUiEvent.NavigateToSignUp) },\r\n                enabled = !isLoading)\r\n\r\n            if (isLoading) {\r\n                CircularProgressIndicator(\r\n                    modifier = Modifier.layoutId(PROGRESS_BAR_ID)\r\n                )\r\n            }\r\n\r\n            if (uiState.isNoInternetVisible) {\r\n                NoInternetDialog(\r\n                    onDismiss = {\r\n                        event(SignInUiEvent.DismissNoInternetDialog)\r\n                    },\r\n                    modifier = Modifier.layoutId(DIALOG_ID))\r\n\r\n            }\r\n\r\n            if (shouldShowPrivacyPolicyDialog) {\r\n                PrivacyPolicyDialog(\r\n                    modifier = Modifier.layoutId(DIALOG_ID),\r\n                    onDismiss = { event(SignInUiEvent.SetPrivacyPolicyVisibility(false)) },\r\n                    onClickAgree = {\r\n                        event(SignInUiEvent.AgreedToPrivacyPolicy)\r\n                        if (lastClicked == SignInCredential.Facebook::javaClass.name) {\r\n                            event(SignInUiEvent.SignInWithFacebook)\r\n                            return@PrivacyPolicyDialog\r\n                        }\r\n                        event(SignInUiEvent.SignInWithGoogle)\r\n                    },\r\n                    onClickLink = {\r\n                        event(SignInUiEvent.OpenWebView(it))\r\n                    })\r\n            }\r\n\r\n            if (uiState.urlToOpen != null) {\r\n                DialogWebView(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .layoutId(DIALOG_ID),\r\n                    mUrl = uiState.urlToOpen,\r\n                    onDismiss = { event(SignInUiEvent.DismissWebView) })\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Preview(device = \"id:Galaxy Nexus\")\r\n@Composable\r\nfun PreviewSignInScreenDark() {\r\n\r\n    var uiState by rememberSaveable {\r\n        mutableStateOf(SignInUiState())\r\n    }\r\n    var email by rememberSaveable(stateSaver = TextFieldValue.Saver) {\r\n        mutableStateOf(TextFieldValue())\r\n    }\r\n    var password by rememberSaveable(stateSaver = TextFieldValue.Saver) {\r\n        mutableStateOf(TextFieldValue())\r\n    }\r\n\r\n    val onValueChangeEmail = remember<(TextFieldValue) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                emailErrorMessage = \"\"\r\n            )\r\n            email = it\r\n        }\r\n    }\r\n\r\n    val onValueChangePassword = remember<(TextFieldValue) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                passwordErrorMessage = \"\"\r\n            )\r\n            password = it\r\n        }\r\n    }\r\n\r\n    CyclistanceTheme(true) {\r\n        SignInScreenContent(uiState = uiState, email = email, password = password, event = {\r\n            when (it) {\r\n                is SignInUiEvent.OnChangeEmail -> onValueChangeEmail(it.email)\r\n                is SignInUiEvent.OnChangePassword -> onValueChangePassword(it.password)\r\n                else -> {}\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n@Preview(device = \"id:Galaxy Nexus\")\r\n@Composable\r\nfun PreviewSignInScreenLight() {\r\n\r\n    var uiState by rememberSaveable {\r\n        mutableStateOf(SignInUiState())\r\n    }\r\n    var email by rememberSaveable(stateSaver = TextFieldValue.Saver) {\r\n        mutableStateOf(TextFieldValue())\r\n    }\r\n    var password by rememberSaveable(stateSaver = TextFieldValue.Saver) {\r\n        mutableStateOf(TextFieldValue())\r\n    }\r\n\r\n    val onValueChangeEmail = remember<(TextFieldValue) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                emailErrorMessage = \"\"\r\n            )\r\n            email = it\r\n        }\r\n    }\r\n\r\n    val onValueChangePassword = remember<(TextFieldValue) -> Unit> {\r\n        {\r\n            uiState = uiState.copy(\r\n                passwordErrorMessage = \"\"\r\n            )\r\n            password = it\r\n        }\r\n    }\r\n\r\n\r\n    CyclistanceTheme(false) {\r\n        SignInScreenContent(uiState = uiState, email = email, password = password, event = {\r\n            when (it) {\r\n                is SignInUiEvent.OnChangeEmail -> onValueChangeEmail(it.email)\r\n                is SignInUiEvent.OnChangePassword -> onValueChangePassword(it.password)\r\n                else -> {}\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_in/components/SignInScreenContent.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_in/components/SignInScreenContent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_in/components/SignInScreenContent.kt	(revision 1516416b130ecc2acf603845b3b027dd52446e80)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_in/components/SignInScreenContent.kt	(date 1696660048104)
@@ -33,7 +33,6 @@
 import com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog
 import com.example.cyclistance.core.presentation.dialogs.privacy_policy_dialog.PrivacyPolicyDialog
 import com.example.cyclistance.core.presentation.dialogs.webview_dialog.DialogWebView
-import com.example.cyclistance.feature_authentication.domain.model.SignInCredential
 import com.example.cyclistance.feature_authentication.presentation.auth_email.state.EmailAuthState
 import com.example.cyclistance.feature_authentication.presentation.auth_sign_in.event.SignInUiEvent
 import com.example.cyclistance.feature_authentication.presentation.auth_sign_in.state.SignInState
@@ -60,8 +59,8 @@
     password: TextFieldValue,
     event: (SignInUiEvent) -> Unit = {}) {
 
-    var lastClicked by remember {
-        mutableStateOf("")
+    var lastClicked by rememberSaveable {
+        mutableStateOf<SignInUiEvent?>(null)
     }
 
     Surface(modifier = modifier.fillMaxSize(), color = MaterialTheme.colors.background) {
@@ -143,8 +142,7 @@
                     }
                     else{
                         event(SignInUiEvent.SetPrivacyPolicyVisibility(true))
-                        lastClicked=""
-                        lastClicked = SignInCredential.Facebook::javaClass.name
+                        lastClicked = SignInUiEvent.SignInWithFacebook
                     }
 
                 },
@@ -154,8 +152,7 @@
                     }
                     else {
                         event(SignInUiEvent.SetPrivacyPolicyVisibility(true))
-                        lastClicked=""
-                        lastClicked = SignInCredential.Google::javaClass.name
+                        lastClicked = SignInUiEvent.SignInWithGoogle
                     }
                 },
                 enabled = !isLoading
@@ -190,11 +187,9 @@
                     onDismiss = { event(SignInUiEvent.SetPrivacyPolicyVisibility(false)) },
                     onClickAgree = {
                         event(SignInUiEvent.AgreedToPrivacyPolicy)
-                        if (lastClicked == SignInCredential.Facebook::javaClass.name) {
-                            event(SignInUiEvent.SignInWithFacebook)
-                            return@PrivacyPolicyDialog
+                        lastClicked?.let {
+                            event(it)
                         }
-                        event(SignInUiEvent.SignInWithGoogle)
                     },
                     onClickLink = {
                         event(SignInUiEvent.OpenWebView(it))
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity.RESULT_OK\r\nimport android.os.Build\r\nimport android.widget.Toast\r\nimport androidx.activity.compose.BackHandler\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.animation.*\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.input.TextFieldValue\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\r\nimport androidx.navigation.NavController\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.core.domain.model.AlertDialogState\r\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\r\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ACTION_START_FOREGROUND\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ACTION_STOP_FOREGROUND\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\r\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\r\nimport com.example.cyclistance.core.utils.contexts.shareLocation\r\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\r\nimport com.example.cyclistance.core.utils.permissions.requestPermission\r\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\r\nimport com.example.cyclistance.feature_mapping.domain.model.Role\r\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\r\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\r\nimport com.example.cyclistance.navigation.Screens\r\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\r\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\r\nimport com.google.accompanist.permissions.isGranted\r\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\r\nimport com.google.accompanist.permissions.rememberPermissionState\r\nimport com.mapbox.core.constants.Constants.PRECISION_6\r\nimport com.mapbox.geojson.Feature\r\nimport com.mapbox.geojson.FeatureCollection\r\nimport com.mapbox.geojson.LineString\r\nimport com.mapbox.geojson.Point\r\nimport com.mapbox.mapboxsdk.geometry.LatLng\r\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\r\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\r\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\r\nimport com.mapbox.mapboxsdk.maps.MapboxMap\r\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport timber.log.Timber\r\n\r\n\r\n@SuppressLint(\"MissingPermission\")\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@ExperimentalPermissionsApi\r\n@Composable\r\nfun MappingScreen(\r\n    hasInternetConnection: Boolean,\r\n    mappingViewModel: MappingViewModel = hiltViewModel(),\r\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\r\n    paddingValues: PaddingValues,\r\n    isNavigating: Boolean,\r\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\r\n    navController: NavController) {\r\n\r\n\r\n    val context = LocalContext.current\r\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\r\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\r\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\r\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\r\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\r\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\r\n        mutableStateOf(null)\r\n    }\r\n\r\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\r\n        mutableStateOf(TextFieldValue())\r\n    }\r\n\r\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\r\n        bottomSheetState = rememberBottomSheetState(\r\n            initialValue = BottomSheetValue.Collapsed,\r\n            confirmStateChange = { false })\r\n    )\r\n\r\n    val collapseBottomSheet = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\r\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    val expandBottomSheet = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\r\n                    bottomSheetScaffoldState.bottomSheetState.expand()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    val settingResultRequest = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.StartIntentSenderForResult()\r\n    ) { activityResult ->\r\n        if (activityResult.resultCode == RESULT_OK) {\r\n            context.startLocationServiceIntentAction()\r\n            Timber.d(\"GPS Setting Request Accepted\")\r\n            return@rememberLauncherForActivityResult\r\n        }\r\n        Timber.d(\"GPS Setting Request Denied\")\r\n    }\r\n\r\n    fun requestHelp() {\r\n        if (!context.hasGPSConnection()) {\r\n            context.checkLocationSetting(\r\n                onDisabled = settingResultRequest::launch,\r\n                onEnabled = {\r\n                    mappingViewModel.onEvent(\r\n                        event = MappingVmEvent.RequestHelp)\r\n\r\n                })\r\n        } else {\r\n            mappingViewModel.onEvent(\r\n                event = MappingVmEvent.RequestHelp)\r\n\r\n        }\r\n    }\r\n\r\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\r\n        permissions = listOf(\r\n            Manifest.permission.ACCESS_FINE_LOCATION,\r\n            Manifest.permission.ACCESS_COARSE_LOCATION))\r\n\r\n\r\n    val userLocationAvailable by remember(\r\n        foregroundLocationPermissionsState.allPermissionsGranted,\r\n        state.userLocation) {\r\n        derivedStateOf {\r\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\r\n        }\r\n    }\r\n\r\n\r\n    val pulsingEnabled by remember(\r\n        uiState.searchingAssistance,\r\n        foregroundLocationPermissionsState.allPermissionsGranted\r\n    ) {\r\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\r\n    }\r\n\r\n\r\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\r\n        {\r\n            mapboxMap?.style?.let { style ->\r\n                if (isNavigating) {\r\n\r\n                    val buildLocationComponentActivationOptions =\r\n                        LocationComponentActivationOptions.builder(context, style)\r\n                            .locationComponentOptions(locationComponentOptions.build())\r\n                            .build()\r\n                    mapboxMap?.locationComponent?.apply {\r\n                        activateLocationComponent(buildLocationComponentActivationOptions)\r\n                        isLocationComponentEnabled = userLocationAvailable\r\n                        cameraMode = CameraMode.NONE\r\n                        renderMode = RenderMode.GPS\r\n\r\n                    }\r\n\r\n                } else {\r\n                    val buildLocationComponentActivationOptions =\r\n                        LocationComponentActivationOptions.builder(context, style)\r\n                            .locationComponentOptions(\r\n                                locationComponentOptions\r\n                                    .changeToNormalPuckIcon(context)\r\n                                    .pulseEnabled(pulsingEnabled)\r\n                                    .build())\r\n                            .build()\r\n                    mapboxMap?.locationComponent?.apply {\r\n                        activateLocationComponent(buildLocationComponentActivationOptions)\r\n                        isLocationComponentEnabled = userLocationAvailable\r\n                        cameraMode = CameraMode.NONE\r\n                        renderMode = RenderMode.NORMAL\r\n                    }\r\n                }\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n\r\n    val locateUser =\r\n        remember(userLocationAvailable, mapboxMap) {\r\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\r\n\r\n                val mapboxLoaded =\r\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded ?: false)\r\n                if (userLocationAvailable && mapboxLoaded) {\r\n                    showUserLocation()\r\n                    mapboxMap?.animateCameraPosition(\r\n                        latLng = latLng,\r\n                        zoomLevel = zoomLevel,\r\n                        cameraAnimationDuration = cameraAnimationDuration)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    val onInitializeMapboxMap = remember {\r\n        { mbm: MapboxMap ->\r\n            if (mapboxMap == null) {\r\n                mapboxMap = mbm\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    val onRequestHelp = remember {\r\n        {\r\n            foregroundLocationPermissionsState.requestPermission(\r\n                onGranted = {\r\n                    context.startLocationServiceIntentAction()\r\n                    requestHelp()\r\n                }, onExplain = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                }, onDenied = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->\r\n        uiState = uiState.copy(notificationPermissionVisible = visible)\r\n    }}\r\n\r\n    val respondToHelp = remember {\r\n        {\r\n            uiState.mapSelectedRescuee?.let {\r\n                mappingViewModel.onEvent(\r\n                    event = MappingVmEvent.RespondToHelp(\r\n                        selectedRescuee = it\r\n                    ))\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n    val notificationLauncher = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.RequestPermission(),\r\n        onResult = {\r\n            if (uiState.mapSelectedRescuee == null) {\r\n                onRequestHelp()\r\n            } else {\r\n                respondToHelp()\r\n            }\r\n        }\r\n    )\r\n    val notificationPermissionState = rememberPermissionState(\r\n        permission = Manifest.permission.POST_NOTIFICATIONS\r\n    ) { permissionGranted ->\r\n        if (permissionGranted) {\r\n            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\r\n        }\r\n\r\n    }\r\n\r\n    val startRequestingHelp = remember{{\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n            notificationPermissionState.requestPermission(onGranted = {\r\n                notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\r\n            }, onExplain = {\r\n                notificationPermissionDialogVisibility(true)\r\n            }, onDenied = {\r\n                onRequestHelp()\r\n            })\r\n        } else {\r\n            onRequestHelp()\r\n        }\r\n    }}\r\n\r\n    val openRescueResult = remember(state.rescuer){{\r\n        val rescuer = state.rescuer\r\n\r\n        navController.navigateScreen(route = Screens.RescueRecordNavigation.RescueResults.screenRoute)\r\n        mappingViewModel.onEvent(event = MappingVmEvent.RescuerArrived)\r\n        /*navController.navigateScreen(route = Screens.MappingNavigation.RescueResults.passArgument(\r\n            rescuerId = rescuer?.id ?: \"\",\r\n            rescuerName = rescuer?.name ?: \"\",\r\n            rescuerPhoto = rescuer?.profilePictureUrl?: \"\",\r\n        ))*/\r\n    }}\r\n\r\n\r\n\r\n    val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {\r\n        {\r\n\r\n            uiState.routeDirection?.geometry?.let { geometry ->\r\n\r\n                mapboxMap?.getStyle { style ->\r\n                    if (style.isFullyLoaded.not()) {\r\n                        return@getStyle\r\n                    }\r\n                    if(geometry.isEmpty()){\r\n                        return@getStyle\r\n                    }\r\n\r\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\r\n                    routeLineSource!!.setGeoJson(\r\n                        FeatureCollection.fromFeature(\r\n                            Feature.fromGeometry(\r\n                                LineString.fromPolyline(geometry, PRECISION_6))))\r\n                }\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val removeRouteDirection = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.getStyle { style ->\r\n\r\n                if (style.isFullyLoaded.not()) {\r\n                    return@getStyle\r\n                }\r\n\r\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\r\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n\r\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\r\n        {\r\n\r\n            foregroundLocationPermissionsState.requestPermission(\r\n                onGranted = {\r\n                    if (!context.hasGPSConnection()) {\r\n                        context.checkLocationSetting(\r\n                            onDisabled = settingResultRequest::launch)\r\n                    }\r\n\r\n\r\n                    state.userLocation?.let {\r\n                        it.latitude ?: return@let\r\n                        it.longitude ?: return@let\r\n                        val point = LatLng(it.latitude, it.longitude)\r\n                        locateUser(\r\n                            LOCATE_USER_ZOOM_LEVEL,\r\n                            point,\r\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\r\n\r\n                    }\r\n\r\n                }, onExplain = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                }, onDenied = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                })\r\n        }\r\n    }\r\n\r\n    val changeCameraMode = remember{{ mode: Int ->\r\n        mapboxMap?.locationComponent?.apply {\r\n            if (isLocationComponentActivated) {\r\n                cameraMode = mode\r\n            }\r\n        }\r\n    }}\r\n\r\n    val routeOverView = remember{{\r\n        changeCameraMode(CameraMode.TRACKING)\r\n\r\n    }}\r\n\r\n    val onLocateUserButton = remember(uiState.routeDirection){{\r\n        if(uiState.routeDirection != null) {\r\n            routeOverView()\r\n        }\r\n        onLocateUser()\r\n    }}\r\n\r\n    val recenterRoute = remember{{\r\n        changeCameraMode(CameraMode.TRACKING_GPS)\r\n    }}\r\n\r\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\r\n        {\r\n            val rescueTransaction = state.rescueTransaction\r\n            rescueTransaction?.let {\r\n                val latitude = it.getDestinationLatitude() ?: return@let\r\n                val longitude = it.getDestinationLongitude() ?: return@let\r\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    val onClickOpenNavigationButton = remember {\r\n        {\r\n            openNavigationApp()\r\n        }\r\n    }\r\n\r\n    val cancelSearchingAssistance = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                collapseBottomSheet()\r\n            }.invokeOnCompletion {\r\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\r\n                uiState = uiState.copy(searchingAssistance = false)\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n    val onChangeCameraPosition = remember {\r\n        { _cameraState: CameraState ->\r\n            cameraState = _cameraState\r\n        }\r\n    }\r\n\r\n\r\n    DisposableEffect(key1 = true){\r\n        onDispose {\r\n            val camera = mapboxMap?.cameraPosition\r\n            val cameraCenter = camera?.target ?: LatLng(\r\n                 DEFAULT_LATITUDE,\r\n                 DEFAULT_LONGITUDE,\r\n            )\r\n            val cameraZoom = camera?.zoom\r\n            onChangeCameraPosition(CameraState(\r\n                position = cameraCenter,\r\n                zoom = cameraZoom ?: 0.0\r\n            ))\r\n        }\r\n    }\r\n\r\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\r\n        {\r\n            val role = state.user.transaction?.role\r\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\r\n            val transactionId = state.rescueTransaction?.id\r\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\r\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\r\n\r\n            navController.navigateScreen(route = Screens.MappingNavigation.Cancellation.passArgument(\r\n                cancellationType = selectionType,\r\n                transactionId = transactionId!!,\r\n                clientId = clientId!!))\r\n\r\n        }\r\n    }\r\n\r\n    val noInternetDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(\r\n            isNoInternetVisible = visibility\r\n        )\r\n    }}\r\n\r\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\r\n        state.getTransactionId().isNotEmpty()\r\n    }\r\n\r\n    val isRescueCancelled =\r\n        remember(state.rescueTransaction) {\r\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\r\n        }\r\n\r\n    fun getConversationSelectedId():String{\r\n        val transaction = state.rescueTransaction\r\n        val rescueeId = transaction?.rescueeId\r\n        val rescuerId = transaction?.rescuerId\r\n        val userId = state.userId\r\n        val isUserRescuee = userId == rescueeId\r\n        val id = if(isUserRescuee) rescuerId else rescueeId\r\n        id ?: Toast.makeText(context, \"No user id\", Toast.LENGTH_SHORT).show()\r\n\r\n        return id!!\r\n    }\r\n\r\n    val onClickChatButton = remember(state.rescueTransaction, state.user.getRole()) {\r\n        {\r\n            navController.navigateScreen(\r\n                route = Screens.MessagingNavigation.Conversation.passArgument(\r\n                    receiverMessageId = getConversationSelectedId())\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\r\n        {\r\n            val locationComponent = mapboxMap?.locationComponent\r\n            locationComponent?.cameraMode = CameraMode.TRACKING\r\n        }\r\n    }\r\n\r\n    val onClickOkCancelledRescue = remember {\r\n        {\r\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\r\n        }\r\n    }\r\n\r\n    val onDismissRescueeBanner = remember {\r\n        {\r\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\r\n            if (isRescueeBannerVisible) {\r\n                uiState = uiState.copy(\r\n                    mapSelectedRescuee = null,\r\n                    requestHelpButtonVisible = true\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val expandableFab = remember{{ expanded: Boolean ->\r\n        uiState = uiState.copy(\r\n            isFabExpanded = expanded\r\n        )\r\n    }}\r\n\r\n\r\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit){\r\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\r\n        if(isCurrentlyEditing){\r\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\r\n            return\r\n        }\r\n        noMarkerCurrentlyEditing()\r\n    }\r\n\r\n\r\n    val onMapMarkerClick = remember {\r\n        { snippet: String, id: String ->\r\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\r\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\r\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\r\n                })\r\n            } else {\r\n                collapseBottomSheet()\r\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\r\n            }\r\n        }\r\n    }\r\n\r\n    val hazardousLaneMarkerDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(\r\n            deleteHazardousMarkerDialogVisible = visibility\r\n        )\r\n    }}\r\n\r\n\r\n    val onMapClick = remember {\r\n        {\r\n\r\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\r\n                collapseBottomSheet()\r\n            }\r\n\r\n            if(uiState.bottomSheetType == BottomSheetType.IncidentDescription.type){\r\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\r\n                    collapseBottomSheet()\r\n                })\r\n            }\r\n            onDismissRescueeBanner()\r\n            expandableFab(false)\r\n\r\n\r\n        }\r\n    }\r\n\r\n    val onMapLongClick = remember {\r\n        { latLng: LatLng ->\r\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\r\n                onDismissRescueeBanner()\r\n                expandableFab(false)\r\n                uiState = uiState.copy(\r\n                    lastLongPressedLocation = latLng,\r\n                    bottomSheetType = BottomSheetType.ReportIncident.type).also {\r\n                    expandBottomSheet()\r\n                }\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    val startRespondingToHelp = remember{{\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n            notificationPermissionState.requestPermission(onGranted = {\r\n                notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\r\n            }, onExplain = {\r\n                notificationPermissionDialogVisibility(true)\r\n            }, onDenied = {\r\n                respondToHelp()\r\n            })\r\n        } else {\r\n            respondToHelp()\r\n        }\r\n    }}\r\n\r\n\r\n    val onClickOkAcceptedRescue = remember {\r\n        {\r\n            onChangeNavigatingState(true)\r\n            uiState = uiState.copy(\r\n                rescueRequestAccepted = false,\r\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\r\n            ).also {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n    val locationPermissionDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(locationPermissionDialogVisible = visibility)\r\n    }}\r\n\r\n    val onClickCancelButton = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\r\n        }\r\n    }\r\n\r\n    val onClickConfirmButton = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\r\n        }\r\n    }\r\n\r\n    val onClickReportIncident = remember {\r\n        { incidentLabel: String ->\r\n            uiState.lastLongPressedLocation?.let { locationLatLng ->\r\n                mappingViewModel.onEvent(\r\n                    event = MappingVmEvent.ReportIncident(\r\n                        label = incidentLabel,\r\n                        latLng = locationLatLng,\r\n                        description = incidentDescription.text\r\n                    ))\r\n                uiState = uiState.copy(selectedIncidentLabel = \"\")\r\n                incidentDescription = TextFieldValue()\r\n            }\r\n        }\r\n    }\r\n\r\n    val emergencyCallDialogVisibility = remember{{ visible: Boolean ->\r\n        uiState = uiState.copy(\r\n            isEmergencyCallDialogVisible = visible\r\n        )\r\n    }}\r\n\r\n    val changeAlertDialogState = remember{{ alertDialogState: AlertDialogState ->\r\n        uiState = uiState.copy(\r\n            alertDialogState = alertDialogState\r\n        )\r\n    }}\r\n\r\n    val rescueRequestDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(\r\n            isRescueRequestDialogVisible = visibility\r\n        )\r\n    }}\r\n\r\n    val openSinoTrack = remember{{\r\n        navController.navigateScreen(Screens.MappingNavigation.SinoTrack.screenRoute)\r\n    }}\r\n\r\n    val openRescueResults = remember{{\r\n//        navController.navigateScreen(Screens.RescueRecordNavigation.RescueResults.screenRoute)\r\n    }}\r\n\r\n\r\n\r\n    val callPhoneNumber = remember {\r\n        { phoneNumber: String ->\r\n            context.callPhoneNumber(phoneNumber)\r\n        }\r\n    }\r\n\r\n    val openPhoneCallPermissionState =\r\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\r\n            if (permissionGranted) {\r\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\r\n                    ?.let { callPhoneNumber(it) }\r\n            }\r\n        }\r\n\r\n    val onEmergencyCall = remember {\r\n        { phoneNumber: String ->\r\n            if (!openPhoneCallPermissionState.status.isGranted) {\r\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\r\n                openPhoneCallPermissionState.launchPermissionRequest()\r\n            } else {\r\n                callPhoneNumber(phoneNumber)\r\n            }\r\n        }\r\n    }\r\n\r\n    val onAddEmergencyContact = remember {\r\n        {\r\n            navController.navigateScreen(Screens.EmergencyCallNavigation.AddEditEmergencyContact.screenRoute)\r\n        }\r\n    }\r\n\r\n    val shareLocation = remember(state.userLocation, state.user.location){{\r\n\r\n        val location = state.getCurrentLocation()\r\n\r\n        if(location == null){\r\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\r\n        }else{\r\n            context.shareLocation(\r\n                latitude = location.latitude!!,\r\n                longitude = location.longitude!!\r\n            )\r\n        }\r\n    }}\r\n\r\n\r\n    val openMapTypeBottomSheet = remember{{\r\n        uiState = uiState.copy(\r\n            bottomSheetType = BottomSheetType.MapType.type\r\n        ).also {\r\n            expandBottomSheet()\r\n        }\r\n    }}\r\n\r\n    val closeMapTypeBottomSheet = remember{{\r\n        uiState = uiState.copy(\r\n            bottomSheetType = null\r\n        ).also {\r\n            collapseBottomSheet()\r\n        }\r\n    }}\r\n\r\n\r\n    val mapTypeBottomSheetVisibility = remember{{ visibility: Boolean ->\r\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\r\n            if(visibility){\r\n                openMapTypeBottomSheet()\r\n            }else{\r\n                closeMapTypeBottomSheet()\r\n            }\r\n        })\r\n    }}\r\n\r\n    val onSelectMapType = remember(key1 = state.userLocation){{ mapType: String ->\r\n        if(state.userLocation == null){\r\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\r\n        }else{\r\n            mappingViewModel.onEvent(event = MappingVmEvent.SetMapType(mapType))\r\n        }\r\n    }}\r\n\r\n\r\n    val onChangeIncidentLabel = remember {\r\n        { incidentLabel: String ->\r\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\r\n        }\r\n    }\r\n\r\n    val onChangeIncidentDescription = remember {\r\n        { input: TextFieldValue ->\r\n            incidentDescription = input\r\n        }\r\n    }\r\n\r\n\r\n    val onClickDeleteIncident = remember{{\r\n\r\n        uiState = uiState.copy(\r\n            deleteHazardousMarkerDialogVisible = true\r\n        )\r\n\r\n    }}\r\n\r\n    val onClickEditIncidentDescription = remember{{ marker: HazardousLaneMarker ->\r\n        uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\r\n    }}\r\n\r\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker){{\r\n        mappingViewModel.onEvent(event = MappingVmEvent.DeleteHazardousLaneMarker(\r\n            id = uiState.selectedHazardousMarker!!.id\r\n        ))\r\n    }}\r\n\r\n    val discardChangesMarkerDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(\r\n            discardHazardousMarkerDialogVisible = visibility\r\n        )\r\n    }}\r\n\r\n\r\n\r\n    val onDiscardMarkerChanges = remember{{\r\n        uiState = uiState.copy(currentlyEditingHazardousMarker = null)\r\n    }}\r\n\r\n    val onDismissIncidentDescriptionBottomSheet = remember{{\r\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\r\n            collapseBottomSheet()\r\n        })\r\n    }}\r\n\r\n    val onCancelEditIncidentDescription = remember{{\r\n        checkIfHasEditingMarker(onDiscardMarkerChanges)\r\n    }}\r\n\r\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker){{ description: String, label: String ->\r\n        mappingViewModel.onEvent(\r\n            event = MappingVmEvent.UpdateReportedIncident(\r\n                marker = uiState.currentlyEditingHazardousMarker!!.copy(description = description, label = label)\r\n            ))\r\n    }}\r\n\r\n    val onClickHazardousInfoGotIt = remember {\r\n        {\r\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\r\n        }\r\n    }\r\n\r\n    fun getRouteDirections(){\r\n        val rescueTransaction = state.rescueTransaction ?: return\r\n\r\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\r\n        val startingLatitude = rescueTransaction.getStartingLatitude()?: return\r\n        val destinationLongitude = rescueTransaction.getDestinationLongitude()?: return\r\n        val destinationLatitude = rescueTransaction.getDestinationLatitude()?: return\r\n\r\n        mappingViewModel.onEvent(\r\n            event = MappingVmEvent.GetRouteDirections(\r\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\r\n                destination = Point.fromLngLat(\r\n                    destinationLongitude,\r\n                    destinationLatitude)))\r\n    }\r\n\r\n\r\n\r\n    val cancelSearchDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(cancelSearchDialogVisible = visibility)\r\n    }}\r\n\r\n    val cancelOnGoingRescueDialogVisibility = remember{{ visibility: Boolean ->\r\n        uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\r\n    }}\r\n\r\n    fun notifyUser(title: String, message: String){\r\n        if(notificationPermissionState.status.isGranted){\r\n            mappingViewModel.onEvent(event = MappingVmEvent.NotifyUser(\r\n                title = title,\r\n                message = message\r\n            ))\r\n        }\r\n    }\r\n\r\n    val viewProfile = remember{{ id: String ->\r\n        navController.navigateScreen(Screens.UserProfileNavigation.UserProfile.passArgument(userId = id))\r\n    }}\r\n\r\n    val cancelRespondToHelp = remember(uiState.mapSelectedRescuee){{\r\n        uiState.mapSelectedRescuee?.userId?.let{ id ->\r\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRespondHelp(id = id))\r\n        }\r\n    }}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\r\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\r\n\r\n            if(hasTransaction){\r\n               cancelOnGoingRescueDialogVisibility(true)\r\n               return@checkIfHasEditingMarker\r\n            }\r\n\r\n            if(uiState.searchingAssistance){\r\n               cancelSearchDialogVisibility(true)\r\n               return@checkIfHasEditingMarker\r\n            }\r\n\r\n            collapseBottomSheet()\r\n        })\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap){\r\n        if (userLocationAvailable) {\r\n            val camera = cameraState\r\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\r\n        }\r\n    }\r\n    LaunchedEffect(key1 = true){\r\n        mappingViewModel.eventFlow.collectLatest {\r\n            when(it){\r\n                is MappingEvent.NoInternetConnection -> {\r\n                   noInternetDialogVisibility(true)\r\n                }\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    }\r\n    LaunchedEffect(key1 = hasTransaction){\r\n        uiState = uiState.copy(\r\n            hasTransaction = hasTransaction\r\n        )\r\n    }\r\n    LaunchedEffect(key1 = isRescueCancelled){\r\n        uiState = uiState.copy(\r\n            isRescueCancelled = isRescueCancelled\r\n        )\r\n    }\r\n    LaunchedEffect(key1 = isNavigating){\r\n        uiState = uiState.copy(\r\n            isNavigating = isNavigating\r\n        )\r\n    }\r\n    LaunchedEffect(key1 = true) {\r\n\r\n        mappingViewModel.eventFlow.collect { event ->\r\n            when (event) {\r\n\r\n                is MappingEvent.RequestHelpSuccess -> {\r\n                    val location = state.userLocation!!\r\n                    navController.navigateScreen(\r\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\r\n                            latitude = location.latitude!!.toFloat(),\r\n                            longitude = location.longitude!!.toFloat()\r\n                        ))\r\n                }\r\n\r\n                is MappingEvent.InsufficientUserCredential -> {\r\n                    navController.navigateScreen(\r\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\r\n                }\r\n\r\n                is MappingEvent.LocationNotAvailable -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RescuerLocationNotAvailable -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.UnexpectedError -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.UserFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RespondToHelpSuccess -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.AddressFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n\r\n\r\n                is MappingEvent.NewSelectedRescuee -> {\r\n                    uiState = uiState.copy(\r\n                        mapSelectedRescuee = event.selectedRescuee,\r\n                        requestHelpButtonVisible = false\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        routeDirection = event.routeDirection,\r\n                        generateRouteFailed = false\r\n                    )\r\n                    context.startLocationServiceIntentAction(intentAction = ACTION_START_FOREGROUND)\r\n\r\n                }\r\n\r\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        rescueRequestAccepted = false,\r\n                        requestHelpButtonVisible = true,\r\n                        searchingAssistance = false,\r\n                        routeDirection = null,\r\n                        mapSelectedRescuee = null,\r\n                    ).also {\r\n                        collapseBottomSheet()\r\n                    }\r\n                    onChangeNavigatingState(false)\r\n\r\n                }\r\n\r\n                is MappingEvent.RescueRequestAccepted -> {\r\n                    uiState = uiState.copy(\r\n                        rescueRequestAccepted = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.CancelHelpRequestSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        requestHelpButtonVisible = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.AcceptRescueRequestSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        requestHelpButtonVisible = false,\r\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\r\n                        isRescueRequestDialogVisible = false\r\n                    ).also {\r\n                        expandBottomSheet()\r\n                        rescueRequestDialogVisibility(false)\r\n\r\n                    }\r\n                }\r\n\r\n                is MappingEvent.FailedToCalculateDistance -> {\r\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n\r\n                is MappingEvent.DestinationReached -> {\r\n                    val role = state.user.transaction?.role\r\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\r\n                        BottomSheetType.RescuerArrived.type\r\n                    } else {\r\n                        BottomSheetType.DestinationReached.type\r\n                    }\r\n                    uiState = uiState.copy(bottomSheetType = type).also {\r\n                        expandBottomSheet()\r\n                    }\r\n\r\n                }\r\n\r\n                is MappingEvent.RemoveRespondentFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RescueHasTransaction -> {\r\n                    changeAlertDialogState(AlertDialogState(\r\n                        title = \"Cannot Request\",\r\n                        description = \"Unfortunately the Rescuer is currently in a Rescue.\",\r\n                        icon = R.raw.error\r\n                    ))\r\n                }\r\n\r\n                is MappingEvent.UserHasCurrentTransaction -> {\r\n                    changeAlertDialogState(\r\n                        AlertDialogState(\r\n                            title = \"Cannot Request\",\r\n                            description = \"You can only have one transaction at a time\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.NewBottomSheetType -> {\r\n                    uiState = uiState.copy(\r\n                        bottomSheetType = event.bottomSheetType,\r\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\r\n                        .also {\r\n                            expandBottomSheet()\r\n                        }\r\n                }\r\n\r\n                is MappingEvent.ReportIncidentFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                MappingEvent.ReportIncidentSuccess -> {\r\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.IncidentDistanceTooFar -> {\r\n                    changeAlertDialogState(\r\n                        AlertDialogState(\r\n                            title = \"Exceeds Reachable Distance\",\r\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.SelectHazardousLaneMarker -> {\r\n                    uiState = uiState.copy(\r\n                        selectedHazardousMarker = event.marker,\r\n                        bottomSheetType = BottomSheetType.IncidentDescription.type).also {\r\n                        expandBottomSheet()\r\n                    }\r\n                }\r\n\r\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\r\n                    collapseBottomSheet()\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\r\n                }\r\n\r\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\r\n                    collapseBottomSheet()\r\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\r\n                }\r\n\r\n                is MappingEvent.UpdateIncidentFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\r\n                }\r\n                MappingEvent.UpdateIncidentSuccess -> {\r\n                    changeAlertDialogState(\r\n                        AlertDialogState(\r\n                            title = \"Incident Updated\",\r\n                            description = \"The incident has been updated successfully\",\r\n                            icon = R.raw.success\r\n                        )\r\n                    )\r\n                    onDiscardMarkerChanges()\r\n                    collapseBottomSheet()\r\n                }\r\n\r\n                is MappingEvent.GenerateRouteNavigationFailed -> {\r\n                    changeAlertDialogState(AlertDialogState(\r\n                        title = \"Failed to Generate Route\",\r\n                        description = \"Failed to generate route to the destination due to a connection error.\",\r\n                    ))\r\n                    uiState = uiState.copy(\r\n                        generateRouteFailed = true\r\n                    )\r\n                }\r\n\r\n                MappingEvent.CancelRespondSuccess -> {\r\n                    Toast.makeText(context, \"Respond Cancelled\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                else -> {}\r\n            }\r\n        }\r\n    }\r\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\r\n\r\n        val route = uiState.routeDirection ?: return@LaunchedEffect\r\n\r\n        if (route.geometry.isEmpty()) {\r\n            removeRouteDirection()\r\n            context.startLocationServiceIntentAction(intentAction = ACTION_STOP_FOREGROUND)\r\n            return@LaunchedEffect\r\n        }\r\n        showRouteDirection()\r\n    }\r\n\r\n    LaunchedEffect(\r\n        key1 = state.rescueTransaction?.route,\r\n        key2 = hasTransaction,\r\n        key3 = isRescueCancelled) {\r\n\r\n\r\n        if (hasTransaction.not() || isRescueCancelled) {\r\n            uiState = uiState.copy(routeDirection = null)\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        getRouteDirections()\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = hasInternetConnection) {\r\n        val nearbyCyclistLoaded = state.nearbyCyclist?.users?.isNotEmpty() ?: false\r\n        val userLoaded = state.user.id != null\r\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\r\n\r\n        if (hasInternetConnection.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (dataHaveBeenLoaded.not()) {\r\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\r\n        }\r\n\r\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\r\n    }\r\n\r\n\r\n    LaunchedEffect(\r\n        key1 = hasInternetConnection,\r\n        key2 = uiState.generateRouteFailed,\r\n        key3 = state.rescueTransaction?.route) {\r\n\r\n        if (hasInternetConnection.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n        if(!uiState.generateRouteFailed){\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        getRouteDirections()\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\r\n        showUserLocation()\r\n    }\r\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\r\n        coroutineScope.launch {\r\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\r\n\r\n        if (hasTransaction.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (isRescueCancelled) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        onChangeNavigatingState(false)\r\n\r\n    }\r\n\r\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\r\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (!context.hasGPSConnection()) {\r\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\r\n        }\r\n\r\n        context.startLocationServiceIntentAction()\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    MappingScreenContent(\r\n        modifier = Modifier.padding(paddingValues),\r\n        state = state,\r\n        locationPermissionState = foregroundLocationPermissionsState,\r\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\r\n        hazardousLaneMarkers = hazardousMarkers,\r\n        mapboxMap = mapboxMap,\r\n        uiState = uiState,\r\n        emergencyState = emergencyState,\r\n        incidentDescription = incidentDescription,\r\n        event = { event ->\r\n            when (event) {\r\n                is MappingUiEvent.RequestHelp -> startRequestingHelp()\r\n                is MappingUiEvent.RespondToHelp -> startRespondingToHelp()\r\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\r\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\r\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(true)\r\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\r\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\r\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\r\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\r\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\r\n                is MappingUiEvent.OnMapClick -> onMapClick()\r\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\r\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\r\n                is MappingUiEvent.RouteOverview -> routeOverView()\r\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\r\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\r\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\r\n                is MappingUiEvent.RescueArrivedConfirmed -> {/*Todo*/}\r\n                is MappingUiEvent.DestinationReachedConfirmed -> {/*Todo*/}\r\n                is MappingUiEvent.LocationPermission ->  locationPermissionDialogVisibility(event.visibility)\r\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\r\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\r\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\r\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\r\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\r\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\r\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\r\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\r\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\r\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\r\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\r\n                is MappingUiEvent.MapTypeBottomSheet -> mapTypeBottomSheetVisibility(event.visibility)\r\n                is MappingUiEvent.OnSelectMapType -> onSelectMapType(event.mapType)\r\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\r\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\r\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\r\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(event.marker)\r\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(event.markerSnippet, event.markerId)\r\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(event.visibility)\r\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\r\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(event.visibility)\r\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\r\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\r\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\r\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(event.description, event.label)\r\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\r\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\r\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\r\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\r\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(event.visibility)\r\n                is MappingUiEvent.NotificationPermissionDialog ->  notificationPermissionDialogVisibility(event.visibility)\r\n                is MappingUiEvent.NotifyUser -> notifyUser(title = event.title, message = event.message)\r\n                MappingUiEvent.OpenSinoTrack -> openSinoTrack()\r\n                MappingUiEvent.OpenRescueResults -> openRescueResults()\r\n                is MappingUiEvent.ViewProfile -> viewProfile(event.id)\r\n                MappingUiEvent.CancelRespondHelp -> cancelRespondToHelp()\r\n            }\r\n        }\r\n    )\r\n\r\n}\r\n\r\n//on click cancel\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 1516416b130ecc2acf603845b3b027dd52446e80)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1696661553289)
@@ -922,13 +922,14 @@
     BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {
         checkIfHasEditingMarker(noMarkerCurrentlyEditing = {
 
+            cancelOnGoingRescueDialogVisibility(hasTransaction)
+            cancelSearchDialogVisibility(hasTransaction)
+
             if(hasTransaction){
-               cancelOnGoingRescueDialogVisibility(true)
                return@checkIfHasEditingMarker
             }
 
             if(uiState.searchingAssistance){
-               cancelSearchDialogVisibility(true)
                return@checkIfHasEditingMarker
             }
 
