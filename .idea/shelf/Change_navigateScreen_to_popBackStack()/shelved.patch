Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason\n\nimport android.widget.Toast\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.core.utils.constants.MappingConstants\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.components.CancellationReasonScreenContent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.event.CancellationReasonEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.event.CancellationReasonUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.event.CancellationReasonVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_cancellation_reason.state.CancellationReasonUiState\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport kotlinx.coroutines.flow.collectLatest\n\n\n@Composable\nfun CancellationReasonScreen(\n    navController: NavController,\n    viewModel: CancellationReasonViewModel = hiltViewModel(),\n    cancellationType: String = MappingConstants.SELECTION_RESCUEE_TYPE,\n    paddingValues: PaddingValues) {\n\n    var message by rememberSaveable(stateSaver = TextFieldValue.Saver){\n        mutableStateOf(TextFieldValue())\n    }\n    val state by viewModel.state.collectAsStateWithLifecycle()\n    val context = LocalContext.current\n    var uiState by rememberSaveable{ mutableStateOf(CancellationReasonUiState()) }\n\n    LaunchedEffect(key1 = true) {\n        viewModel.eventFlow.collectLatest { event ->\n            when (event) {\n                is CancellationReasonEvent.ConfirmCancellationReasonSuccess -> {\n                    navController.navigateScreen(Screens.MappingNavigation.Mapping.screenRoute)\n                }\n\n                is CancellationReasonEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is CancellationReasonEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is CancellationReasonEvent.RescueTransactionFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is CancellationReasonEvent.NoInternetConnection -> {\n                    uiState = uiState.copy(isNoInternetVisible = true)\n                }\n\n                is CancellationReasonEvent.InvalidCancellationReason -> {\n                    uiState = uiState.copy(selectedReasonErrorMessage = event.reason)\n                }\n            }\n        }\n    }\n\n\n    val onDismissNoInternetDialog = remember {\n        {\n            uiState = uiState.copy(isNoInternetVisible = false)\n        }\n    }\n\n    val onChangeValueMessage = remember {\n        { messageInput: TextFieldValue ->\n            message = messageInput\n        }\n    }\n    val onClickConfirmButton = remember {\n        {\n            viewModel.onEvent(\n                event = CancellationReasonVmEvent.ConfirmCancellationReason(\n                    reason = uiState.selectedReason,\n                    message = message.text,\n                ))\n        }\n    }\n    val onClickCancelButton = remember {\n        {\n            navController.navigateScreen(Screens.MappingNavigation.Mapping.screenRoute)\n        }\n    }\n    val onSelectReason = remember {\n        { reason: String ->\n            uiState = uiState.copy(selectedReason = reason, selectedReasonErrorMessage = \"\")\n        }\n    }\n\n    CancellationReasonScreenContent(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(paddingValues),\n        cancellationType = cancellationType,\n        message = message,\n        state = state,\n        uiState = uiState,\n        event = { event ->\n            when(event){\n                is CancellationReasonUiEvent.OnChangeMessage -> onChangeValueMessage(event.message)\n                is CancellationReasonUiEvent.ConfirmCancellationReason -> onClickConfirmButton()\n                is CancellationReasonUiEvent.NavigateToMapping ->  onClickCancelButton()\n                is CancellationReasonUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\n                is CancellationReasonUiEvent.SelectReason -> onSelectReason(event.reason)\n            }\n        }\n    )\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonScreen.kt	(revision ec320690b4cd387cc10c863e6f69ee0116eedb37)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_cancellation_reason/CancellationReasonScreen.kt	(date 1697357471243)
@@ -46,7 +46,7 @@
         viewModel.eventFlow.collectLatest { event ->
             when (event) {
                 is CancellationReasonEvent.ConfirmCancellationReasonSuccess -> {
-                    navController.navigateScreen(Screens.MappingNavigation.Mapping.screenRoute)
+                    navController.popBackStack()
                 }
 
                 is CancellationReasonEvent.UnexpectedError -> {
