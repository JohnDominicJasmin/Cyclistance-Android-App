Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.widget.Toast\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.EmergencyCallConstants.SHOULD_OPEN_CONTACT_DIALOG\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.example.cyclistance.core.utils.contexts.shareLocation\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    val nearbyCyclist = mappingViewModel.nearbyCyclistState.distinct()\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(initialValue = BottomSheetValue.Collapsed)\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n                if (isNavigating) {\n\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(locationComponentOptions.build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.GPS\n\n                    }\n\n                } else {\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(\n                                locationComponentOptions\n                                    .changeToNormalPuckIcon(context)\n                                    .pulseEnabled(pulsingEnabled)\n                                    .build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.NORMAL\n                    }\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\n                                                               ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember(userLocationAvailable) {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n\n            if (userLocationAvailable) {\n                val camera = cameraState\n                locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n\n            }\n        }\n    }\n\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    val requestHelp = remember {\n        {\n            if (!context.hasGPSConnection()) {\n                context.checkLocationSetting(\n                    onDisabled = settingResultRequest::launch,\n                    onEnabled = {\n                        mappingViewModel.onEvent(\n                            event = MappingVmEvent.RequestHelp)\n\n                    })\n            } else {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RequestHelp)\n\n            }\n        }\n    }\n\n    val onClickRequestHelpButton = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n\n        }\n    }\n\n\n    val showRouteDirection = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not() || geometry.isEmpty()) {\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource?.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n    val onClickLocateUserButton = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(LOCATE_USER_ZOOM_LEVEL, point, DEFAULT_CAMERA_ANIMATION_DURATION)\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let{\n                val latitude =  it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n    val onClickRouteOverViewButton = remember(mapboxMap) {\n        {\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickRecenterButton = remember(mapboxMap) {\n        {\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING_GPS\n        }\n    }\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val onClickCancelSearchButton = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelRequestHelp)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    DisposableEffect(key1 = true){\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(CameraState(\n                position = cameraCenter!!,\n                zoom = cameraZoom ?: 0.0\n            ))\n        }\n    }\n\n    val onClickCancelRescueButton = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(route = \"${Screens.MappingNavigation.Cancellation.screenRoute}/$selectionType/$transactionId/$clientId\")\n\n        }\n    }\n\n    val onDismissNoInternetDialog = remember {\n        {\n            uiState = uiState.copy(\n                isNoInternetVisible = false\n            )\n        }\n    }\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        val transaction = state.rescueTransaction\n        val rescueTransactionId = state.rescueTransaction?.id ?: \"\"\n        val userTransactionId = state.user.transaction?.transactionId ?: \"\"\n        transaction != null && rescueTransactionId.isNotEmpty() && userTransactionId.isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    val clientPhoneNumber = remember(state.rescuee, state.rescuer) {\n        val client = state.rescuee ?: state.rescuer\n        client?.contactNumber\n    }\n\n    val callClient = remember(clientPhoneNumber) {\n        {\n            clientPhoneNumber?.let(context::callPhoneNumber)\n        }\n    }\n    val phonePermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                callClient()\n            }\n        }\n    val onClickChatButton = remember(clientPhoneNumber) {\n        {\n\n\n        }\n    }\n\n    val onClickCallButton = remember(clientPhoneNumber) {\n        {\n            phonePermissionState.requestPermission(\n                onGranted = {\n                    callClient()\n                },\n                onExplain = {\n                    uiState = uiState.copy(phonePermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onClickRescueeMapIcon = remember {\n        { id: String ->\n            mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val onCollapseExpandableFAB = remember {\n        {\n            uiState = uiState.copy(\n                isFabExpanded = false\n            )\n        }\n    }\n\n\n    val onToggleExpandedFAB = remember {\n        {\n            uiState = uiState.copy(\n                isFabExpanded = !uiState.isFabExpanded\n            )\n        }\n    }\n\n    val onMapClick = remember {\n        {\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\n                collapseBottomSheet()\n            }\n            onDismissRescueeBanner()\n            onCollapseExpandableFAB()\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        {\n            onDismissRescueeBanner()\n            onCollapseExpandableFAB()\n            uiState = uiState.copy(bottomSheetType = BottomSheetType.ReportIncident.type).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val onClickRespondToHelpButton = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val onDismissLocationPermissionDialog = remember {\n        {\n            uiState = uiState.copy(locationPermissionDialogVisible = false)\n        }\n    }\n\n    val onDismissPhonePermissionDialog = remember {\n        {\n            uiState = uiState.copy(phonePermissionDialogVisible = false)\n        }\n    }\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        {\n\n        }\n    }\n\n    val showEmergencyCallDialog = remember {\n        {\n            uiState = uiState.copy(\n                isEmergencyCallDialogVisible = true\n            )\n        }\n    }\n\n    val dismissEmergencyCallDialog = remember {\n        {\n            uiState = uiState.copy(\n                isEmergencyCallDialogVisible = false\n            )\n        }\n    }\n\n    val onDismissAlertDialog = remember {\n        {\n            uiState = uiState.copy(\n                alertDialogState = AlertDialogState()\n            )\n        }\n    }\n\n    val onShowRescueRequestDialog = remember {\n        {\n            uiState = uiState.copy(\n                isRescueRequestDialogVisible = true\n            )\n        }\n    }\n\n    val onDismissRescueRequestDialog = remember {\n        {\n            uiState = uiState.copy(\n                isRescueRequestDialogVisible = false\n            )\n        }\n    }\n\n    val onDismissSinoTrackWebView = remember {\n        {\n            uiState = uiState.copy(\n                isSinoTrackWebViewVisible = false\n            )\n        }\n    }\n\n    val onShowSinoTrackWebView = remember {\n        {\n            uiState = uiState.copy(\n                isSinoTrackWebViewVisible = true\n            )\n        }\n    }\n\n    val onDismissRescueResultsDialog = remember {\n        {\n            uiState = uiState.copy(\n                isRescueResultsDialogVisible = false\n            )\n        }\n    }\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.EmergencyCall.screenRoute + \"?$SHOULD_OPEN_CONTACT_DIALOG=${true}\")\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location){{\n\n        val location = state.userLocation ?: state.user.location\n\n        if(location == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            context.shareLocation(\n                latitude = location.latitude!!,\n                longitude = location.longitude!!\n            )\n        }\n\n\n    }}\n\n\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.distinctUntilChanged().collect { event ->\n            when (event) {\n\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.screenRoute + \"?$LATITUDE=${state.userLocation?.latitude}&$LONGITUDE=${state.userLocation?.longitude}\")\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.SettingsNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.NoInternetConnection -> {\n                    uiState = uiState.copy(\n                        isNoInternetVisible = true\n                    )\n                }\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.NewRouteDirection -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection\n                    )\n                }\n\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = false,\n                        requestHelpButtonVisible = true,\n                        searchingAssistance = false,\n                        routeDirection = null,\n                        mapSelectedRescuee = null,\n                    ).also {\n                        collapseBottomSheet()\n                    }\n                    onChangeNavigatingState(false)\n\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type\n                    ).also {\n                        expandBottomSheet()\n                        onDismissRescueRequestDialog()\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type).also {\n                        expandBottomSheet()\n                    }\n\n                }\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    uiState = uiState.copy(\n                        alertDialogState = AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    uiState = uiState.copy(\n                        alertDialogState = AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(bottomSheetType = event.bottomSheetType).also {\n                        expandBottomSheet()\n                    }\n                }\n\n\n            }\n        }\n    }\n\n\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection ?: return@LaunchedEffect\n\n        if (route.geometry.isEmpty()) {\n            removeRouteDirection()\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n        val rescueTransaction = state.rescueTransaction\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n\n        val startingLongitude = rescueTransaction?.getStartingLongitude() ?: return@LaunchedEffect\n        val startingLatitude = rescueTransaction.getStartingLatitude() ?: return@LaunchedEffect\n        val destinationLongitude = rescueTransaction.getDestinationLongitude() ?: return@LaunchedEffect\n        val destinationLatitude = rescueTransaction.getDestinationLatitude() ?: return@LaunchedEffect\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n\n\n    }\n\n\n\n    LaunchedEffect(key1 = hasInternetConnection) {\n        val nearbyCyclistLoaded = nearbyCyclist.isNotEmpty()\n        val userLoaded = state.user.id != null\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n\n        if (dataHaveBeenLoaded.not()) {\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\n        }\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\n    }\n\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n\n\n\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n    LaunchedEffect(true){\n        Timber.v(\"Successfully recomposed in MappingScreen\")\n    }\n\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        nearbyCyclist = nearbyCyclist,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        hasTransaction = hasTransaction,\n        isRescueCancelled = isRescueCancelled,\n        isNavigating = isNavigating,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\n                is MappingUiEvent.CancelSearchConfirmed -> onClickCancelSearchButton()\n                is MappingUiEvent.CallRescueTransaction -> onClickCallButton()\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> onClickCancelRescueButton()\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\n                is MappingUiEvent.RescueeMapIconSelected -> onClickRescueeMapIcon(event.id)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onClickLocateUserButton()\n                is MappingUiEvent.RouteOverview -> onClickRouteOverViewButton()\n                is MappingUiEvent.RecenterRoute -> onClickRecenterButton()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\n                is MappingUiEvent.DismissLocationPermission -> onDismissLocationPermissionDialog()\n                is MappingUiEvent.DismissPhonePermission -> onDismissPhonePermissionDialog()\n                is MappingUiEvent.OnToggleExpandableFAB -> onToggleExpandedFAB()\n                is MappingUiEvent.ShowEmergencyCallDialog -> showEmergencyCallDialog()\n                is MappingUiEvent.DismissEmergencyCallDialog -> dismissEmergencyCallDialog()\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.ShowRescueRequestDialog -> onShowRescueRequestDialog()\n                is MappingUiEvent.DismissRescueRequestDialog -> onDismissRescueRequestDialog()\n                is MappingUiEvent.CancelRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.DismissAlertDialog -> onDismissAlertDialog()\n                is MappingUiEvent.OnCollapseExpandableFAB -> onCollapseExpandableFAB()\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick()\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident()\n                is MappingUiEvent.DismissSinoTrackWebView -> onDismissSinoTrackWebView()\n                is MappingUiEvent.ShowSinoTrackWebView -> onShowSinoTrackWebView()\n                is MappingUiEvent.DismissRescueResultsDialog -> onDismissRescueResultsDialog()\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n\n\n            }\n        }\n\n\n    )\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision fc7d9e142393d016dd386e2113c1dbcce7f0ef5e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1692276545991)
@@ -95,8 +95,12 @@
         mutableStateOf(null)
     }
 
+
+
     val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(
-        bottomSheetState = rememberBottomSheetState(initialValue = BottomSheetValue.Collapsed)
+        bottomSheetState = rememberBottomSheetState(
+            initialValue = BottomSheetValue.Collapsed,
+            confirmStateChange = {false})
     )
 
     val collapseBottomSheet = remember {
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun MappingBottomSheet(\n    modifier: Modifier = Modifier,\n    state: MappingState = MappingState(),\n    bottomSheetType: String?,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    onClickRescueArrivedButton: () -> Unit = {},\n    onClickReachedDestinationButton: () -> Unit = {},\n    onClickCancelSearchButton: () -> Unit = {},\n    onClickCallRescueTransactionButton: () -> Unit = {},\n    onClickChatRescueTransactionButton: () -> Unit = {},\n    onClickCancelRescueTransactionButton: () -> Unit = {},\n    onClickReportIncident: (label: String) -> Unit = {},\n    content: @Composable (PaddingValues) -> Unit = {},\n) {\n\n\n    val scope = rememberCoroutineScope()\n    MappingBottomSheet(\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        sheetGesturesEnabled = bottomSheetType != BottomSheetType.SearchAssistance.type,\n        sheetContent = {\n            when (bottomSheetType) {\n\n                BottomSheetType.RescuerArrived.type -> {\n\n                    BottomSheetRescueArrived(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = onClickRescueArrivedButton)\n\n                }\n\n                BottomSheetType.DestinationReached.type -> {\n\n                    BottomSheetReachedDestination(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = onClickReachedDestinationButton)\n\n                }\n\n                BottomSheetType.ReportIncident.type -> {\n\n                    BottomSheetReportIncident(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClick = {\n                            onClickReportIncident(it)\n                            scope.launch {\n                                bottomSheetScaffoldState.bottomSheetState.collapse()\n                            }\n                        })\n\n                }\n\n                BottomSheetType.SearchAssistance.type -> {\n\n                    BottomSheetSearchingAssistance(\n                        modifier = modifier,\n                        onClickCancelSearchButton = onClickCancelSearchButton,\n                        bottomSheetScaffoldState = bottomSheetScaffoldState)\n                }\n\n                BottomSheetType.OnGoingRescue.type -> {\n\n                    BottomSheetOnGoingRescue(\n                        modifier = modifier,\n                        onClickCallButton = onClickCallRescueTransactionButton,\n                        onClickChatButton = onClickChatRescueTransactionButton,\n                        onClickCancelButton = onClickCancelRescueTransactionButton,\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        role = state.user.transaction?.role ?: \"\",\n                        onGoingRescueModel = OnGoingRescueModel(\n                            estimatedTime = state.rescuerETA,\n                            estimatedDistance = state.rescuerDistance,\n                            currentSpeed = state.speedometerState.currentSpeedKph.toString(),\n                            ridingDistance = state.speedometerState.travelledDistance,\n                            maxSpeed = state.speedometerState.topSpeed.toString()))\n                }\n\n            }\n        }, content = content)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(revision fc7d9e142393d016dd386e2113c1dbcce7f0ef5e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(date 1692278610666)
@@ -31,7 +31,7 @@
     val scope = rememberCoroutineScope()
     MappingBottomSheet(
         bottomSheetScaffoldState = bottomSheetScaffoldState,
-        sheetGesturesEnabled = bottomSheetType != BottomSheetType.SearchAssistance.type,
+        sheetGesturesEnabled = bottomSheetType != BottomSheetType.SearchAssistance.type && bottomSheetType != BottomSheetType.OnGoingRescue.type,
         sheetContent = {
             when (bottomSheetType) {
 
@@ -87,9 +87,11 @@
                         onGoingRescueModel = OnGoingRescueModel(
                             estimatedTime = state.rescuerETA,
                             estimatedDistance = state.rescuerDistance,
-                            currentSpeed = state.speedometerState.currentSpeedKph.toString(),
+                            currentSpeed = String.format("%.2f", state.speedometerState.currentSpeedKph),
                             ridingDistance = state.speedometerState.travelledDistance,
-                            maxSpeed = state.speedometerState.topSpeed.toString()))
+                            maxSpeed = String.format("%.2f", state.speedometerState.topSpeed)))
+
+
                 }
 
             }
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport com.example.cyclistance.R\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.theme.Black440\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport com.example.cyclistance.theme.Red900\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun BottomSheetOnGoingRescue(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit,\n    role: String,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    onGoingRescueModel: OnGoingRescueModel,\n) {\n\n    val isRescuer by remember(role) {\n        derivedStateOf {\n            role == Role.RESCUER.name\n        }\n    }\n\n    Card(\n        modifier = modifier\n            .fillMaxWidth(0.92f)\n            .shadow(\n                elevation = 12.dp,\n                shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),\n        shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp),\n        backgroundColor = MaterialTheme.colors.surface) {\n\n\n        ConstraintLayout(\n            modifier = Modifier\n                .fillMaxWidth()) {\n\n            val (time, roundedButtonSection, lineGrip, distance, etaIcon, speedometer) = createRefs()\n\n            val etaAvailable by remember(onGoingRescueModel.estimatedTime) {\n                derivedStateOf {\n                    onGoingRescueModel.estimatedTime.isNotEmpty()\n                }\n            }\n\n\n            Divider(modifier = Modifier\n                .fillMaxWidth(0.1f)\n                .constrainAs(lineGrip) {\n                    top.linkTo(parent.top, margin = 10.dp)\n                    end.linkTo(parent.end, margin = 0.dp)\n                    start.linkTo(parent.start, margin = 0.dp)\n                }, color = MaterialTheme.colors.primary, thickness = 1.5.dp)\n\n\n            if (!etaAvailable) {\n\n                Text(\n                    text = \"Calculating estimated time of arrival...\",\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier.constrainAs(time) {\n                        top.linkTo(lineGrip.bottom, margin = 10.dp)\n                        start.linkTo(parent.start)\n                        end.linkTo(parent.end)\n                    }\n                )\n\n            }\n\n            if (etaAvailable) {\n\n                if (isRescuer) {\n                    SpeedometerSection(\n                        modifier = Modifier.constrainAs(speedometer) {\n                            top.linkTo(lineGrip.bottom, margin = 4.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                        },\n                        currentSpeed = onGoingRescueModel.currentSpeed,\n                        distance = onGoingRescueModel.ridingDistance,\n                        maxSpeed = onGoingRescueModel.maxSpeed,\n                    )\n                }\n\n                Text(\n                    text = onGoingRescueModel.estimatedTime,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(time) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else lineGrip.bottom,\n                                margin = 5.dp)\n                            end.linkTo(etaIcon.start)\n                        }\n                )\n\n\n                Image(\n                    painter = painterResource(id = R.drawable.ic_eta),\n                    contentDescription = \"ETA\",\n                    modifier = Modifier\n                        .size(20.dp)\n                        .constrainAs(etaIcon) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else lineGrip.bottom,\n                                margin = 7.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n\n                        }\n                )\n\n\n                Text(\n                    text = onGoingRescueModel.estimatedDistance,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(distance) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else lineGrip.bottom,\n                                margin = 5.dp,\n                            )\n                            start.linkTo(etaIcon.end)\n                        }\n                )\n            }\n\n\n            RoundButtonSection(\n                modifier = Modifier.constrainAs(roundedButtonSection) {\n                    val anchor = if (etaAvailable) etaIcon else time\n                    top.linkTo(anchor.bottom, margin = 10.dp)\n                    end.linkTo(parent.end)\n                    start.linkTo(parent.start)\n                    bottom.linkTo(parent.bottom, margin = 10.dp)\n                },\n                onClickCallButton = onClickCallButton,\n                onClickChatButton = onClickChatButton,\n                onClickCancelButton = onClickCancelButton)\n\n\n        }\n    }\n}\n\n\n@Composable\nfun SpeedometerSection(\n    modifier: Modifier = Modifier,\n    currentSpeed: String,\n    distance: String,\n    maxSpeed: String) {\n\n    Column(\n        modifier = modifier.padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n\n        Text(\n            text = \"Current Speed\",\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize),\n            color = MaterialTheme.colors.onSurface,\n            modifier = Modifier.padding(vertical = 1.dp))\n\n        Text(color = MaterialTheme.colors.onSurface, text = buildAnnotatedString {\n            withStyle(\n                style = SpanStyle(\n                    fontSize = MaterialTheme.typography.subtitle1.fontSize,\n                    fontWeight = FontWeight.Medium)) {\n                append(currentSpeed)\n            }\n            withStyle(style = SpanStyle(fontSize = MaterialTheme.typography.overline.fontSize)) {\n                append(\" km/h\")\n            }\n        }, style = MaterialTheme.typography.subtitle1, modifier = Modifier.padding(vertical = 1.dp))\n\n\n        Column(\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally,\n            modifier = Modifier\n                .padding(vertical = 4.dp)\n                .fillMaxWidth()) {\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n\n            Row(\n                modifier = Modifier\n                    .height(IntrinsicSize.Max)\n                    .fillMaxWidth(),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.SpaceEvenly) {\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Distance\",\n                    content = distance)\n\n                Divider(\n                    color = Black440, modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp))\n\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Max Speed\",\n                    content = maxSpeed)\n            }\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n        }\n    }\n}\n\n@Composable\nfun RowScope.ItemSpeed(modifier: Modifier, title: String, content: String) {\n    Column(\n        modifier = modifier\n            .padding(vertical = 4.dp)\n            .weight(0.3f),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center) {\n        Text(\n            text = title,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize))\n\n        Text(\n            text = content,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle1.copy(\n                fontWeight = FontWeight.Medium,\n                fontSize = MaterialTheme.typography.button.fontSize))\n    }\n}\n\n@Composable\nprivate fun RoundButtonSection(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit) {\n\n\n    Row(\n        modifier = modifier\n            .background(Color.Transparent)\n            .fillMaxWidth(),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.SpaceEvenly) {\n\n        RoundedButtonItem(\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_call,\n            buttonSubtitle = \"Call\", onClick = onClickCallButton)\n\n\n        RoundedButtonItem(\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_chat,\n            buttonSubtitle = \"Chat\", onClick = onClickChatButton)\n\n\n        RoundedButtonItem(\n            backgroundColor = Red900,\n            contentColor = Color.White,\n            imageId = R.drawable.ic_cancel_1,\n            buttonSubtitle = \"Cancel\", onClick = onClickCancelButton)\n    }\n}\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueDark() {\n\n    CyclistanceTheme(true) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                bottomSheetScaffoldState = rememberBottomSheetScaffoldState(),\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.RESCUER.name)\n        }\n    }\n}\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueLight() {\n\n    CyclistanceTheme(false) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n\n\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                bottomSheetScaffoldState = rememberBottomSheetScaffoldState(),\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.RESCUEE.name)\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(revision fc7d9e142393d016dd386e2113c1dbcce7f0ef5e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(date 1692278950731)
@@ -60,7 +60,7 @@
             modifier = Modifier
                 .fillMaxWidth()) {
 
-            val (time, roundedButtonSection, lineGrip, distance, etaIcon, speedometer) = createRefs()
+            val (time, roundedButtonSection, distance, etaIcon, speedometer) = createRefs()
 
             val etaAvailable by remember(onGoingRescueModel.estimatedTime) {
                 derivedStateOf {
@@ -69,14 +69,6 @@
             }
 
 
-            Divider(modifier = Modifier
-                .fillMaxWidth(0.1f)
-                .constrainAs(lineGrip) {
-                    top.linkTo(parent.top, margin = 10.dp)
-                    end.linkTo(parent.end, margin = 0.dp)
-                    start.linkTo(parent.start, margin = 0.dp)
-                }, color = MaterialTheme.colors.primary, thickness = 1.5.dp)
-
 
             if (!etaAvailable) {
 
@@ -85,7 +77,7 @@
                     color = MaterialTheme.colors.onSurface,
                     style = MaterialTheme.typography.subtitle2,
                     modifier = Modifier.constrainAs(time) {
-                        top.linkTo(lineGrip.bottom, margin = 10.dp)
+                        top.linkTo(parent.top, margin = 12.dp)
                         start.linkTo(parent.start)
                         end.linkTo(parent.end)
                     }
@@ -98,7 +90,7 @@
                 if (isRescuer) {
                     SpeedometerSection(
                         modifier = Modifier.constrainAs(speedometer) {
-                            top.linkTo(lineGrip.bottom, margin = 4.dp)
+                            top.linkTo(parent.top, margin = 4.dp)
                             start.linkTo(parent.start)
                             end.linkTo(parent.end)
                         },
@@ -116,7 +108,7 @@
                         .padding(horizontal = 12.dp)
                         .constrainAs(time) {
                             top.linkTo(
-                                if (isRescuer) speedometer.bottom else lineGrip.bottom,
+                                if (isRescuer) speedometer.bottom else parent.top,
                                 margin = 5.dp)
                             end.linkTo(etaIcon.start)
                         }
@@ -130,7 +122,7 @@
                         .size(20.dp)
                         .constrainAs(etaIcon) {
                             top.linkTo(
-                                if (isRescuer) speedometer.bottom else lineGrip.bottom,
+                                if (isRescuer) speedometer.bottom else parent.top,
                                 margin = 7.dp)
                             start.linkTo(parent.start)
                             end.linkTo(parent.end)
@@ -147,7 +139,7 @@
                         .padding(horizontal = 12.dp)
                         .constrainAs(distance) {
                             top.linkTo(
-                                if (isRescuer) speedometer.bottom else lineGrip.bottom,
+                                if (isRescuer) speedometer.bottom else parent.top,
                                 margin = 5.dp,
                             )
                             start.linkTo(etaIcon.end)
