Index: app/src/main/java/com/myapp/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.graphics.Bitmap\nimport android.graphics.ImageDecoder\nimport android.net.Uri\nimport android.os.Build\nimport android.provider.MediaStore\nimport android.view.WindowManager\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.activity.result.launch\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport com.myapp.cyclistance.MainViewModel\nimport com.myapp.cyclistance.R\nimport com.myapp.cyclistance.core.domain.model.AlertDialogState\nimport com.myapp.cyclistance.core.utils.app.AppUtils\nimport com.myapp.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.myapp.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.myapp.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.ACTION_START_FOREGROUND\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.ACTION_STOP_FOREGROUND\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.DEFAULT_ACTION\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.myapp.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.myapp.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.myapp.cyclistance.core.utils.contexts.shareLocation\nimport com.myapp.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.myapp.cyclistance.core.utils.json.JsonConverter.toJson\nimport com.myapp.cyclistance.core.utils.permissions.requestPermission\nimport com.myapp.cyclistance.core.utils.save_images.ImageUtils\nimport com.myapp.cyclistance.core.utils.save_images.ImageUtils.toImageUri\nimport com.myapp.cyclistance.feature_authentication.domain.util.findActivity\nimport com.myapp.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.myapp.cyclistance.feature_emergency_call.presentation.emergency_call_screen.event.EmergencyCallVmEvent\nimport com.myapp.cyclistance.feature_mapping.domain.model.Role\nimport com.myapp.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarkerDetails\nimport com.myapp.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.showRoute\nimport com.myapp.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\nimport com.myapp.cyclistance.navigation.Screens\nimport com.myapp.cyclistance.navigation.nav_graph.navigateScreen\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    mainViewModel: MainViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val mainState by mainViewModel.state.collectAsStateWithLifecycle()\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(\n            initialValue = BottomSheetValue.Collapsed,\n            confirmStateChange = { false })\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    uiState = uiState.copy(bottomSheetType = null, incidentImageErrorMessage = \"\").also {\n                        bottomSheetScaffoldState.bottomSheetState.collapse()\n                    }\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    val requestHelp = remember {\n        {\n            if (!context.hasGPSConnection()) {\n                context.checkLocationSetting(\n                    onDisabled = settingResultRequest::launch,\n                    onEnabled = {\n                        mappingViewModel.onEvent(\n                            event = MappingVmEvent.RequestHelp)\n\n                    })\n            } else {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RequestHelp)\n\n            }\n        }\n    }\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n\n                val buildLocationComponentActivationOptions =\n                    LocationComponentActivationOptions.builder(context, style)\n                        .locationComponentOptions(\n                            locationComponentOptions\n                                .changeToNormalPuckIcon(context)\n                                .pulseEnabled(pulsingEnabled)\n                                .build())\n                        .build()\n                mapboxMap?.locationComponent?.apply {\n                    activateLocationComponent(buildLocationComponentActivationOptions)\n                    isLocationComponentEnabled = userLocationAvailable\n                    cameraMode = CameraMode.NONE\n                    renderMode = RenderMode.NORMAL\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\n                                                               ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n        }\n    }\n\n\n    val onRequestHelp = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n\n    val notificationPermissionDialogVisibility = remember {\n        { visible: Boolean ->\n            uiState = uiState.copy(notificationPermissionVisible = visible)\n        }\n    }\n\n    val respondToHelp = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val notificationLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission(),\n        onResult = {\n            if (uiState.mapSelectedRescuee == null) {\n                onRequestHelp()\n            } else {\n                respondToHelp()\n            }\n        }\n    )\n    val notificationPermissionState = rememberPermissionState(\n        permission = Manifest.permission.POST_NOTIFICATIONS\n    ) { permissionGranted ->\n        if (permissionGranted) {\n            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n        }\n\n    }\n\n    val startRequestingHelp = remember {\n        {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                notificationPermissionState.requestPermission(onGranted = {\n                    notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n                }, onExplain = {\n                    notificationPermissionDialogVisibility(true)\n                }, onDenied = {\n                    onRequestHelp()\n                })\n            } else {\n                onRequestHelp()\n            }\n        }\n    }\n\n\n    val showRouteDirection = remember(mapboxMap) {\n        { geometry: String ->\n\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n                if (geometry.isEmpty()) {\n                    return@getStyle\n                }\n\n                style.showRoute(geometry)\n\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap, uiState.routeDirection) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                runCatching {\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n                }.onFailure {\n                    Timber.v(\"Mapbox style not loaded ${it.message}\")\n                }\n\n            }\n            Unit\n        }\n    }\n\n\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n\n\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(\n                            LOCATE_USER_ZOOM_LEVEL,\n                            point,\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\n\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val changeCameraMode = remember(mapboxMap) {\n        { mode: Int ->\n            mapboxMap?.locationComponent?.apply {\n                if (isLocationComponentActivated) {\n                    cameraMode = mode\n                }else{\n                    onLocateUser()\n                }\n            }\n        }\n    }\n\n    val routeOverView = remember {\n        {\n            changeCameraMode(CameraMode.TRACKING)\n\n        }\n    }\n\n    val onLocateUserButton = remember(uiState.routeDirection) {\n        {\n            if (uiState.routeDirection != null) {\n                routeOverView()\n            }\n            onLocateUser()\n        }\n    }\n\n    val recenterRoute = remember {\n        {\n            changeCameraMode(CameraMode.TRACKING_GPS)\n        }\n    }\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let {\n                val latitude = it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val cancelSearchingAssistance = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    val resetState = remember{{\n        uiState = MappingUiState()\n        collapseBottomSheet()\n        onChangeNavigatingState(false)\n    }}\n\n\n\n\n    DisposableEffect(key1 = true) {\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target ?: LatLng(\n                DEFAULT_LATITUDE,\n                DEFAULT_LONGITUDE,\n            )\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(\n                CameraState(\n                    position = cameraCenter,\n                    zoom = cameraZoom ?: 0.0\n                ))\n        }\n    }\n\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\n        {\n\n            val isRescuee = state.user.isRescuee()\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            if(transactionId == null || clientId == null){\n                resetState()\n                Toast.makeText(context, \"Rescue not found\", Toast.LENGTH_SHORT).show()\n            }else {\n                navController.navigateScreen(\n                    route = Screens.MappingNavigation.Cancellation.passArgument(\n                        cancellationType = selectionType,\n                        transactionId = transactionId,\n                        clientId = clientId))\n\n            }\n\n        }\n    }\n\n    val noInternetDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                isNoInternetVisible = visibility\n            )\n        }\n    }\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        state.getTransactionId().isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            state.rescueTransaction?.isRescueCancelled() ?: false\n        }\n\n    fun getConversationSelectedId(): String? {\n        val transaction = state.rescueTransaction\n        val rescueeId = transaction?.rescueeId\n        val rescuerId = transaction?.rescuerId\n        val userId = state.userId\n        val isUserRescuee = userId == rescueeId\n        val id = if (isUserRescuee) rescuerId else rescueeId\n        id ?: Toast.makeText(context, \"No current transaction\", Toast.LENGTH_SHORT).show()\n\n        return id\n    }\n\n    val onClickChatButton = remember(state.rescueTransaction, state.user.getRole()) {\n        {\n            getConversationSelectedId()?.let { id ->\n                navController.navigateScreen(\n                    route = Screens.MessagingNavigation.Conversation.passArgument(\n                        receiverMessageId = id)\n                )\n            }\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val confirmedDestinationArrived = remember {\n        {\n\n            mappingViewModel.onEvent(event = MappingVmEvent.DestinationArrived)\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val expandableFab = remember {\n        { expanded: Boolean ->\n            uiState = uiState.copy(\n                isFabExpanded = expanded\n            )\n        }\n    }\n\n\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit) {\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\n        if (isCurrentlyEditing) {\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\n            return\n        }\n        if (uiState.bottomSheetType == BottomSheetType.SearchAssistance.type) {\n            return\n        }\n        noMarkerCurrentlyEditing()\n    }\n\n\n    val onMapMarkerClick = remember {\n        { snippet: String, id: String ->\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\n                })\n            } else {\n                collapseBottomSheet()\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n            }\n        }\n    }\n\n    val hazardousLaneMarkerDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                deleteHazardousMarkerDialogVisible = visibility\n            )\n        }\n    }\n\n\n    val onMapClick = remember {\n        {\n\n            if (uiState.reportIncidentDialogVisible) {\n                 uiState = uiState.copy(reportIncidentDialogVisible = false)\n            }\n\n            if (uiState.incidentDescriptionDialogVisible) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    uiState = uiState.copy(incidentDescriptionDialogVisible = false)\n                })\n            }\n\n            onDismissRescueeBanner()\n            expandableFab(false)\n\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        { latLng: LatLng ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                if(uiState.bottomSheetType == BottomSheetType.OnGoingRescue.type){\n                    return@checkIfHasEditingMarker\n                }\n                onDismissRescueeBanner()\n                expandableFab(false)\n                uiState = uiState.copy(\n                    lastLongPressedLocation = latLng,\n                    reportIncidentDialogVisible = true)\n            })\n\n        }\n    }\n\n\n    val startRespondingToHelp = remember {\n        {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                notificationPermissionState.requestPermission(onGranted = {\n                    notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n                }, onExplain = {\n                    notificationPermissionDialogVisibility(true)\n                }, onDenied = {\n                    respondToHelp()\n                })\n            } else {\n                respondToHelp()\n            }\n        }\n    }\n\n\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                requestAcceptedVisible = false\n            )\n            expandBottomSheet()\n            onDismissRescueeBanner()\n\n\n        }\n    }\n\n    val locationPermissionDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(locationPermissionDialogVisible = visibility)\n        }\n    }\n\n    val banAccountDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(banAccountDialogVisible = visibility)\n    }}\n\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        { incidentLabel: String ->\n            val imageUri = uiState.incidentImageUri\n\n            if(imageUri == null){\n                uiState = uiState.copy(incidentImageErrorMessage = \"Please select an image\")\n            }else{\n                uiState.lastLongPressedLocation?.let { locationLatLng ->\n                    mappingViewModel.onEvent(\n                        event = MappingVmEvent.ReportIncident(\n                            label = incidentLabel,\n                            latLng = locationLatLng,\n                            description = incidentDescription.text,\n                            imageUri = imageUri\n                        ))\n                    uiState = uiState.copy(selectedIncidentLabel = \"\")\n                    incidentDescription = TextFieldValue()\n                    coroutineScope.launch {\n                        bottomSheetScaffoldState.bottomSheetState.collapse()\n                    }\n                }\n\n            }\n        }\n    }\n\n    val emergencyCallDialogVisibility = remember {\n        { visible: Boolean ->\n            uiState = uiState.copy(\n                isEmergencyCallDialogVisible = visible\n            )\n        }\n    }\n\n    val changeAlertDialogState = remember {\n        { alertDialogState: AlertDialogState ->\n            uiState = uiState.copy(\n                alertDialogState = alertDialogState\n            )\n        }\n    }\n\n    val rescueRequestDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                isRescueRequestDialogVisible = visibility\n            )\n        }\n    }\n\n    val openSinoTrack = remember {\n        {\n            navController.navigateScreen(Screens.MappingNavigation.SinoTrack.screenRoute)\n        }\n    }\n\n\n\n\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.AddEditEmergencyContact.screenRoute)\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location) {\n        {\n\n            val location = state.getCurrentLocation()\n\n            if (location == null) {\n                Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n            } else {\n                context.shareLocation(\n                    latitude = location.latitude!!,\n                    longitude = location.longitude!!\n                )\n            }\n        }\n    }\n\n\n    val openMapTypeBottomSheet = remember {\n        {\n            uiState = uiState.copy(\n                bottomSheetType = BottomSheetType.MapType.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val closeMapTypeBottomSheet = remember {\n        {\n\n                collapseBottomSheet()\n\n        }\n    }\n\n\n    val mapTypeBottomSheetVisibility = remember {\n        { visibility: Boolean ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                if (visibility) {\n                    openMapTypeBottomSheet()\n                } else {\n                    closeMapTypeBottomSheet()\n                }\n            })\n        }\n    }\n\n    fun toggleMapType(event: MappingVmEvent){\n        if(!context.hasInternetConnection()){\n            noInternetDialogVisibility(true)\n            return\n        }\n        if(state.userLocation == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n            return\n        }\n\n        mappingViewModel.onEvent(event = event)\n\n    }\n\n    val toggleDefaultMapType = remember(state.userLocation) {\n        {\n            toggleMapType(MappingVmEvent.ToggleDefaultMapType)\n        }\n    }\n\n    val toggleTrafficMapType = remember(state.userLocation) {\n        {\n            toggleMapType(MappingVmEvent.ToggleTrafficMapType)\n        }\n    }\n\n    val toggleHazardousMapType = remember(state.userLocation) {\n        {\n            toggleMapType(MappingVmEvent.ToggleHazardousMapType)\n        }\n\n    }\n\n\n    val onChangeIncidentLabel = remember {\n        { incidentLabel: String ->\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\n        }\n    }\n\n    val onChangeIncidentDescription = remember {\n        { input: TextFieldValue ->\n            incidentDescription = input\n        }\n    }\n\n\n    val onClickDeleteIncident = remember {\n        {\n\n            uiState = uiState.copy(\n                deleteHazardousMarkerDialogVisible = true\n            )\n\n        }\n    }\n\n    val onClickEditIncidentDescription = remember {\n        { marker: HazardousLaneMarkerDetails ->\n            uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\n        }\n    }\n\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker) {\n        {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.DeleteHazardousLaneMarker(\n                    id = uiState.selectedHazardousMarker!!.id\n                ))\n        }\n    }\n\n    val discardChangesMarkerDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                discardHazardousMarkerDialogVisible = visibility\n            )\n        }\n    }\n\n\n    val onDiscardMarkerChanges = remember {\n        {\n            uiState = uiState.copy(currentlyEditingHazardousMarker = null)\n        }\n    }\n\n    val onDismissIncidentDescriptionBottomSheet = remember {\n        {\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                collapseBottomSheet()\n            })\n        }\n    }\n\n    val onCancelEditIncidentDescription = remember {\n        {\n            checkIfHasEditingMarker(onDiscardMarkerChanges)\n        }\n    }\n\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker) {\n        { description: String, label: String ->\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.UpdateReportedIncident(\n                    marker = uiState.currentlyEditingHazardousMarker!!.copy(\n                        description = description,\n                        label = label)\n                ))\n        }\n    }\n\n    val onClickHazardousInfoGotIt = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\n        }\n    }\n\n    fun getRouteDirections() {\n        val rescueTransaction = state.rescueTransaction ?: return\n\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\n        val startingLatitude = rescueTransaction.getStartingLatitude() ?: return\n        val destinationLongitude = rescueTransaction.getDestinationLongitude() ?: return\n        val destinationLatitude = rescueTransaction.getDestinationLatitude() ?: return\n\n\n        if(uiState.routeDirection != null){\n            return\n        }\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n    }\n\n\n    val cancelSearchDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(cancelSearchDialogVisible = visibility)\n        }\n    }\n\n    val cancelOnGoingRescueDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\n        }\n    }\n\n    fun notifyNewRescueRequest(message: String) {\n        if (notificationPermissionState.status.isGranted && !AppUtils.isAppInForeground(context = context)) {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.NotifyNewRescueRequest(\n                    message = message\n                ))\n        }\n    }\n\n    fun notifyRequestAccepted(message: String) {\n        if (notificationPermissionState.status.isGranted && !AppUtils.isAppInForeground(context = context)) {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.NotifyRequestAccepted(\n                    message = message\n                ))\n        }\n    }\n\n    val viewProfile = remember {\n        { id: String ->\n            navController.navigateScreen(\n                Screens.UserProfileNavigation.UserProfile.passArgument(\n                    userId = id))\n        }\n    }\n\n    val cancelRespondToHelp = remember(uiState.mapSelectedRescuee) {\n        {\n            uiState.mapSelectedRescuee?.userId?.let { id ->\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelRespondHelp(id = id))\n            }\n        }\n    }\n\n\n    val arrivedAtLocation = remember{{\n        mappingViewModel.onEvent(event = MappingVmEvent.ArrivedAtLocation)\n    }}\n\n    val startNavigation = remember(state.user.transaction?.transactionId) {\n        {\n            val role = state.user.getRole()\n            val isRescuer = role == Role.Rescuer.name\n            val userTransaction = state.user.transaction?.transactionId ?: \"\"\n            if (userTransaction.isNotEmpty()) {\n                uiState = uiState.copy(\n                    requestHelpButtonVisible = false,\n                    bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                    isRescueRequestDialogVisible = false,\n                    isNavigating = isRescuer\n                )\n                onChangeNavigatingState(isRescuer)\n                expandBottomSheet()\n                getRouteDirections()\n                showUserLocation()\n            }\n\n        }\n    }\n\n    val stopNavigation = remember() {\n        {\n            resetState()\n            onDismissRescueeBanner()\n\n        }\n    }\n    val accessPhotoDialog = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            accessPhotoDialogVisible = visibility\n        )\n    }}\n\n    var imageBitmap by remember { mutableStateOf<Bitmap?>(null) }\n\n    val openGalleryResultLauncher =\n        rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n            uri?.let { selectedUri ->\n                imageBitmap =\n                    when {\n                        Build.VERSION.SDK_INT < Build.VERSION_CODES.P -> {\n                            MediaStore.Images.Media.getBitmap(\n                                context.contentResolver,\n                                selectedUri)\n                        }\n\n                        else -> {\n                            val source =\n                                ImageDecoder.createSource(\n                                    context.contentResolver,\n                                    selectedUri)\n                            ImageDecoder.decodeBitmap(source)\n                        }\n                    }\n            val imageUri = if (imageBitmap == null) uri.toString() else ImageUtils.encodeImage(\n                imageBitmap!!)\n\n            uiState = uiState.copy(incidentImageUri = imageUri)\n            }\n\n        }\n\n    val openCameraResultLauncher =\n        rememberLauncherForActivityResult(ActivityResultContracts.TakePicturePreview()) { bitmap: Bitmap? ->\n            val uri = bitmap?.toImageUri().toString()\n            imageBitmap = bitmap\n            val imageUri = if (imageBitmap == null) uri else ImageUtils.encodeImage(\n                imageBitmap!!)\n\n            imageUri.takeIf { it != \"null\" && it.isNotEmpty() }?.let{\n                uiState = uiState.copy(incidentImageUri = imageUri)\n            }\n\n        }\n\n    val filesAndMediaPermissionState =\n        rememberMultiplePermissionsState(\n            permissions = listOf(\n                Manifest.permission.READ_EXTERNAL_STORAGE,\n                Manifest.permission.WRITE_EXTERNAL_STORAGE)) { permissionGranted ->\n            if (permissionGranted.values.all { it }) {\n                openGalleryResultLauncher.launch(\"image/*\")\n            }\n        }\n\n\n    val openCameraPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CAMERA) { permissionGranted ->\n\n            if (permissionGranted) {\n                openCameraResultLauncher.launch()\n            }\n        }\n\n    val openGallery = remember {\n        {\n            filesAndMediaPermissionState.requestPermission(\n                onGranted = {\n                    openGalleryResultLauncher.launch(\"image/*\")\n                    accessPhotoDialog(false)\n                }, onExplain = {\n                    uiState = uiState.copy(filesAndMediaPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(filesAndMediaPermissionDialogVisible = true)\n                })\n\n        }\n    }\n\n    val openCamera = remember {\n        {\n            openCameraPermissionState.requestPermission(\n                onGranted = {\n                    openCameraResultLauncher.launch()\n                    accessPhotoDialog(false)\n                }, onExplain = {\n                    uiState = uiState.copy(cameraPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(cameraPermissionDialogVisible = true)\n                })\n        }\n    }\n\n\n    val cameraPermissionDialogVisibility = remember {{ visibility: Boolean ->\n        uiState = uiState.copy(cameraPermissionDialogVisible = visibility)\n    }}\n\n    val filesAndMediaPermissionDialogVisibility = remember{{ visibility : Boolean ->\n        uiState = uiState.copy(filesAndMediaPermissionDialogVisible = visibility)\n    }}\n\n\n    val viewIncidentDetails = remember{{\n        val selectedHazardousMarker = uiState.selectedHazardousMarker\n        val markerDetails = selectedHazardousMarker?.copy(incidentImageUri = Uri.encode(selectedHazardousMarker.incidentImageUri))\n        navController.navigateScreen(route = Screens.MappingNavigation.MarkerIncidentDetails.passArgument(markerDetails = markerDetails.toJson()!!))\n    }}\n\n    val viewIncidentImage = remember{{\n        val uri = Uri.encode(uiState.incidentImageUri)\n        navController.navigateScreen(route = Screens.MappingNavigation.IncidentImage.passArgument(imageUri = uri))\n    }}\n\n    val reportIncidentDialog = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            reportIncidentDialogVisible = visibility,\n        )\n    }}\n\n    val incidentDescriptionDialog = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            incidentDescriptionDialogVisible = visibility,\n\n        )\n    }}\n\n    val removeIncidentImage = remember{{\n        uiState = uiState.copy(\n            incidentImageUri = null\n        )\n    }}\n\n\n    DisposableEffect(key1 = Unit) {\n        val window = context.findActivity()?.window\n        window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n        onDispose {\n            window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n        }\n    }\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction,\n        key2 = uiState.isRescueCancelled,\n        key3 = uiState.rescueRequestAccepted) {\n\n        if (uiState.isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        if (state.rescueTransaction?.isRescueFinished() == true) {\n            return@LaunchedEffect\n        }\n\n        if (!uiState.rescueRequestAccepted) {\n            return@LaunchedEffect\n        }\n\n\n        uiState = uiState.copy(\n            requestAcceptedVisible = true\n        )\n    }\n\n\n    LaunchedEffect(\n        key1 = uiState.isRescueCancelled,\n        key2 = uiState.rescueRequestAccepted,\n        key3 = state.rescueTransaction) {\n\n        if(!uiState.isRescueCancelled){\n            return@LaunchedEffect\n        }\n        if(uiState.rescueRequestAccepted){\n            return@LaunchedEffect\n        }\n\n        uiState = uiState.copy(\n            requestCancelledVisible = true\n        )\n    }\n\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n\n            cancelOnGoingRescueDialogVisibility(hasTransaction)\n            cancelSearchDialogVisibility(hasTransaction)\n\n            if (hasTransaction) {\n                return@checkIfHasEditingMarker\n            }\n\n            if (uiState.searchingAssistance) {\n                return@checkIfHasEditingMarker\n            }\n\n            collapseBottomSheet()\n        })\n    }\n\n\n    LaunchedEffect(state.user.userAssistance) {\n\n        if (state.user.isUserNeedHelp() == true) {\n\n            uiState = uiState.copy(\n                bottomSheetType = BottomSheetType.SearchAssistance.type,\n                searchingAssistance = true)\n                .also {\n                    expandBottomSheet()\n                }\n\n        }\n    }\n\n    LaunchedEffect(key1 = true) {\n        emergencyViewModel.onEvent(event = EmergencyCallVmEvent.LoadDefaultContact)\n    }\n\n    LaunchedEffect(key1 = mainState.mappingIntentAction) {\n\n        when (mainState.mappingIntentAction) {\n            MappingConstants.ACTION_OPEN_CONVERSATION -> {\n                onClickChatButton()\n                mainViewModel.setIntentAction(DEFAULT_ACTION)\n            }\n\n            MappingConstants.ACTION_OPEN_RESCUE_REQUEST -> {\n                rescueRequestDialogVisibility(true)\n                mainViewModel.setIntentAction(DEFAULT_ACTION)\n            }\n        }\n    }\n\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap) {\n        if (userLocationAvailable) {\n            val camera = cameraState\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n        }\n    }\n\n\n    LaunchedEffect(key1 = state.rescueTransaction?.status, key2 = hasTransaction) {\n        val rescueTransaction = state.rescueTransaction\n        val isRescueFinished = rescueTransaction?.isRescueFinished() ?: false\n        val isRescueOnGoing = rescueTransaction?.isRescueOnGoing() ?: false\n\n        if (rescueTransaction == null) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueOnGoing) {\n            return@LaunchedEffect\n        }\n\n        if (!isRescueFinished) {\n            return@LaunchedEffect\n        }\n\n        if(!hasTransaction){\n            return@LaunchedEffect\n        }\n\n        val role = state.user.transaction?.role\n        val type = if (role == Role.Rescuee.name) {\n            BottomSheetType.RescuerArrived.type\n        } else {\n            BottomSheetType.DestinationReached.type\n        }\n        uiState = uiState.copy(bottomSheetType = type)\n\n    }\n\n    LaunchedEffect(key1 = hasTransaction) {\n        uiState = uiState.copy(\n            hasTransaction = hasTransaction\n        )\n    }\n    LaunchedEffect(key1 = isRescueCancelled) {\n        uiState = uiState.copy(\n            isRescueCancelled = isRescueCancelled\n        )\n    }\n    LaunchedEffect(key1 = isNavigating) {\n        uiState = uiState.copy(\n            isNavigating = isNavigating\n        )\n    }\n\n    LaunchedEffect(key1 = true) {\n        mappingViewModel.eventFlow.distinctUntilChanged().collectLatest{ event ->\n            when (event) {\n\n                is MappingEvent.NoInternetConnection -> {\n                    noInternetDialogVisibility(true)\n                }\n                else -> {}\n            }\n\n        }\n    }\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.collectLatest { event ->\n            when (event) {\n\n                is MappingEvent.AccountBanned -> {\n                    banAccountDialogVisibility(true)\n                }\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    val location = state.userLocation!!\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\n                            latitude = location.latitude!!.toFloat(),\n                            longitude = location.longitude!!.toFloat()\n                        ))\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection,\n                        generateRouteFailed = false\n                    )\n                    context.startLocationServiceIntentAction(intentAction = ACTION_START_FOREGROUND)\n\n                }\n\n                is MappingEvent.CancelRescueTransactionSuccess -> {\n\n                    stopNavigation()\n                }\n\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                    onDismissRescueeBanner()\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                        isRescueRequestDialogVisible = false\n                    ).also {\n                        expandBottomSheet()\n                        rescueRequestDialogVisibility(false)\n\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                            icon = R.raw.error\n                        ))\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(\n                        bottomSheetType = event.bottomSheetType,\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\n                        .also {\n                            expandBottomSheet()\n                        }\n                }\n\n                is MappingEvent.ReportIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.ReportIncidentSuccess -> {\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\n                    reportIncidentDialog(false)\n                }\n\n                is MappingEvent.IncidentDistanceTooFar -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Exceeds Reachable Distance\",\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.SelectHazardousLaneMarker -> {\n                    uiState = uiState.copy(\n                        selectedHazardousMarker = event.marker,\n                        incidentDescriptionDialogVisible = true)\n                }\n\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\n                }\n\n                is MappingEvent.UpdateIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.UpdateIncidentSuccess -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Incident Updated\",\n                            description = \"The incident has been updated successfully\",\n                            icon = R.raw.success\n                        )\n                    )\n                    onDiscardMarkerChanges()\n                    collapseBottomSheet()\n                }\n\n                is MappingEvent.GenerateRouteNavigationFailed -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Failed to Generate Route\",\n                            description = \"Failed to generate route to the destination due to a connection error.\",\n                        ))\n                    uiState = uiState.copy(\n                        generateRouteFailed = true\n                    )\n                }\n\n                MappingEvent.CancelRespondSuccess -> {\n                    Toast.makeText(context, \"Respond Cancelled\", Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.RescueArrivedSuccess -> {\n                    val role = state.user.getRole()\n\n                    val route = if(role == Role.Rescuee.name){\n                        Screens.RescueRecordNavigation.RescueResults.screenRoute\n                    }else{\n                        Screens.RescueRecordNavigation.RescueDetails.screenRoute\n                    }\n\n                    resetState()\n                    navController.navigateScreen(route)\n                }\n\n                is MappingEvent.RescueArrivedFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = uiState.routeDirection?.geometry, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection\n\n        if (route == null) {\n            removeRouteDirection()\n            context.startLocationServiceIntentAction(intentAction = ACTION_STOP_FOREGROUND)\n            return@LaunchedEffect\n        }\n        showRouteDirection(route.geometry)\n    }\n\n\n\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n\n        if(state.user.getTransactionId()?.isEmpty() == true){\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n\n        startNavigation()\n    }\n\n/*    LaunchedEffect(\n        key1 = hasInternetConnection,\n        key2 = uiState.generateRouteFailed,\n        *//*key3 = state.rescueTransaction?.route*//*) {\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n        if (!uiState.generateRouteFailed) {\n            return@LaunchedEffect\n        }\n\n        startNavigation()\n    }*/\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        hazardousLaneMarkers = hazardousMarkers,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        incidentDescription = incidentDescription,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> startRequestingHelp()\n                is MappingUiEvent.RespondToHelp -> startRespondingToHelp()\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(\n                    true)\n\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\n                is MappingUiEvent.RouteOverview -> routeOverView()\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.ConfirmedDestinationArrived -> confirmedDestinationArrived()\n                is MappingUiEvent.LocationPermissionDialog -> locationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n                is MappingUiEvent.MapTypeBottomSheet -> mapTypeBottomSheetVisibility(event.visibility)\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(\n                    event.marker)\n\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(\n                    event.markerSnippet,\n                    event.markerId)\n\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(\n                    event.visibility)\n\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(\n                    event.visibility)\n\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(\n                    event.description,\n                    event.label)\n\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(\n                    event.visibility)\n\n                is MappingUiEvent.NotificationPermissionDialog -> notificationPermissionDialogVisibility(\n                    event.visibility)\n\n                is MappingUiEvent.NotifyRequestAccepted -> notifyRequestAccepted(message = event.message)\n                is MappingUiEvent.NotifyNewRescueRequest -> notifyNewRescueRequest(message = event.message)\n                MappingUiEvent.OpenSinoTrack -> openSinoTrack()\n\n                is MappingUiEvent.ViewProfile -> viewProfile(event.id)\n                MappingUiEvent.CancelRespondHelp -> cancelRespondToHelp()\n                MappingUiEvent.ArrivedAtLocation -> arrivedAtLocation()\n                is MappingUiEvent.BannedAccountDialog -> banAccountDialogVisibility(event.visibility)\n                MappingUiEvent.ToggleDefaultMapType -> toggleDefaultMapType()\n                MappingUiEvent.ToggleHazardousMapType -> toggleHazardousMapType()\n                MappingUiEvent.ToggleTrafficMapType -> toggleTrafficMapType()\n                is MappingUiEvent.AccessPhotoDialog -> accessPhotoDialog(event.visibility)\n                is MappingUiEvent.CameraPermissionDialog -> cameraPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.FilesAndMediaPermissionDialog -> filesAndMediaPermissionDialogVisibility(event.visibility)\n                MappingUiEvent.OpenCamera -> openCamera()\n                MappingUiEvent.SelectImageFromGallery -> openGallery()\n                MappingUiEvent.ViewImage -> viewIncidentImage()\n                MappingUiEvent.ViewImageIncidentDetails -> viewIncidentDetails()\n                is MappingUiEvent.IncidentDescriptionDialog -> incidentDescriptionDialog(event.visibility)\n                is MappingUiEvent.ReportIncidentDialog -> reportIncidentDialog(event.visibility)\n                MappingUiEvent.RemoveIncidentImage -> removeIncidentImage()\n            }\n        }\n    )\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/myapp/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/myapp/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/myapp/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 179055b4d9291377e27d708a2b1634c8cca9648e)
+++ b/app/src/main/java/com/myapp/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1702200531514)
@@ -1617,7 +1617,7 @@
 
 
     LaunchedEffect(
-        key1 = state.rescueTransaction?.route,
+        key1 = state.rescueTransaction,
         key2 = hasTransaction,
         key3 = isRescueCancelled) {
 
@@ -1631,6 +1631,17 @@
             uiState = uiState.copy(routeDirection = null)
             return@LaunchedEffect
         }
+
+        if(state.rescueTransaction?.isRescueFinished() == true){
+            uiState = uiState.copy(routeDirection = null)
+            return@LaunchedEffect
+        }
+
+
+        if(state.rescueTransaction?.isRescueOnGoing() == false){
+            uiState = uiState.copy(routeDirection = null)
+            return@LaunchedEffect
+        }
 
 
         startNavigation()
