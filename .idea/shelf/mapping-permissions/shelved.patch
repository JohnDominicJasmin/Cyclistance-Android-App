Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.example.cyclistance.core.utils.contexts.shareLocation\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(\n            initialValue = BottomSheetValue.Collapsed,\n            confirmStateChange = { false })\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n                if (isNavigating) {\n\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(locationComponentOptions.build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.GPS\n\n                    }\n\n                } else {\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(\n                                locationComponentOptions\n                                    .changeToNormalPuckIcon(context)\n                                    .pulseEnabled(pulsingEnabled)\n                                    .build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.NORMAL\n                    }\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n        }\n    }\n\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    val requestHelp = remember {\n        {\n            if (!context.hasGPSConnection()) {\n                context.checkLocationSetting(\n                    onDisabled = settingResultRequest::launch,\n                    onEnabled = {\n                        mappingViewModel.onEvent(\n                            event = MappingVmEvent.RequestHelp)\n\n                    })\n            } else {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RequestHelp)\n\n            }\n        }\n    }\n\n    val onClickRequestHelpButton = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n\n        }\n    }\n\n\n    val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not()) {\n                        return@getStyle\n                    }\n                    if(geometry.isEmpty()){\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource!!.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n\n\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(\n                            LOCATE_USER_ZOOM_LEVEL,\n                            point,\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\n\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val changeCameraMode = remember{{ mode: Int ->\n        mapboxMap?.locationComponent?.apply {\n            if (isLocationComponentActivated) {\n                cameraMode = mode\n            }\n        }\n    }}\n\n    val routeOverView = remember{{\n        changeCameraMode(CameraMode.TRACKING)\n\n    }}\n\n    val onLocateUserButton = remember(uiState.routeDirection){{\n        if(uiState.routeDirection != null) {\n            routeOverView()\n        }\n        onLocateUser()\n    }}\n\n    val recenterRoute = remember{{\n        changeCameraMode(CameraMode.TRACKING_GPS)\n    }}\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let {\n                val latitude = it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val cancelSearchingAssistance = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    DisposableEffect(key1 = true){\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target ?: LatLng(\n                 DEFAULT_LATITUDE,\n                 DEFAULT_LONGITUDE,\n            )\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(CameraState(\n                position = cameraCenter,\n                zoom = cameraZoom ?: 0.0\n            ))\n        }\n    }\n\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(route = Screens.MappingNavigation.Cancellation.passArgument(\n                cancellationType = selectionType,\n                transactionId = transactionId!!,\n                clientId = clientId!!))\n\n        }\n    }\n\n    val noInternetDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isNoInternetVisible = visibility\n        )\n    }}\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        state.getTransactionId().isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    val onClickChatButton = remember() {\n        {\n\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val expandableFab = remember{{ expanded: Boolean ->\n        uiState = uiState.copy(\n            isFabExpanded = expanded\n        )\n    }}\n\n\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit){\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\n        if(isCurrentlyEditing){\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\n            return\n        }\n        noMarkerCurrentlyEditing()\n    }\n\n\n    val onMapMarkerClick = remember {\n        { snippet: String, id: String ->\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\n                })\n            } else {\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n            }\n        }\n    }\n\n    val hazardousLaneMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n    val onMapClick = remember {\n        {\n\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\n                collapseBottomSheet()\n            }\n\n            if(uiState.bottomSheetType == BottomSheetType.IncidentDescription.type){\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    collapseBottomSheet()\n                })\n            }\n            onDismissRescueeBanner()\n            expandableFab(false)\n\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        { latLng: LatLng ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                onDismissRescueeBanner()\n                expandableFab(false)\n                uiState = uiState.copy(\n                    lastLongPressedLocation = latLng,\n                    bottomSheetType = BottomSheetType.ReportIncident.type).also {\n                    expandBottomSheet()\n                }\n            })\n\n        }\n    }\n\n    val onClickRespondToHelpButton = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val locationPermissionDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(locationPermissionDialogVisible = visibility)\n    }}\n\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        { incidentLabel: String ->\n            uiState.lastLongPressedLocation?.let { locationLatLng ->\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.ReportIncident(\n                        label = incidentLabel,\n                        latLng = locationLatLng,\n                        description = incidentDescription.text\n                    ))\n                uiState = uiState.copy(selectedIncidentLabel = \"\")\n                incidentDescription = TextFieldValue()\n            }\n        }\n    }\n\n    val emergencyCallDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(\n            isEmergencyCallDialogVisible = visible\n        )\n    }}\n\n    val changeAlertDialogState = remember{{ alertDialogState: AlertDialogState ->\n        uiState = uiState.copy(\n            alertDialogState = alertDialogState\n        )\n    }}\n\n    val rescueRequestDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueRequestDialogVisible = visibility\n        )\n    }}\n\n    val sinoTrackWebViewVisibility = remember{{visible: Boolean ->\n        uiState = uiState.copy(\n            isSinoTrackWebViewVisible = visible\n        )\n    }}\n\n    val rescueResultsDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueResultsDialogVisible = visibility\n        )\n    }}\n\n\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.EmergencyCall.passArgument(shouldOpenContactDialog = true))\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location){{\n\n        val location = state.getCurrentLocation()\n\n        if(location == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            context.shareLocation(\n                latitude = location.latitude!!,\n                longitude = location.longitude!!\n            )\n        }\n    }}\n\n    val onOpenHazardousLaneBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            uiState = if (uiState.bottomSheetType == BottomSheetType.HazardousLane.type) {\n                collapseBottomSheet()\n                uiState.copy(bottomSheetType = null)\n            } else {\n                uiState.copy(\n                    bottomSheetType = BottomSheetType.HazardousLane.type\n                ).also {\n                    expandBottomSheet()\n                }\n            }\n        })\n    }}\n\n    val onSelectMapType = remember(key1 = state.userLocation){{ mapType: String ->\n        if(state.userLocation == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            mappingViewModel.onEvent(event = MappingVmEvent.SetMapType(mapType))\n        }\n    }}\n\n\n    val onChangeIncidentLabel = remember {\n        { incidentLabel: String ->\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\n        }\n    }\n\n    val onChangeIncidentDescription = remember {\n        { input: TextFieldValue ->\n            incidentDescription = input\n        }\n    }\n\n\n    val onClickDeleteIncident = remember{{\n\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = true\n        )\n\n    }}\n\n    val onClickEditIncidentDescription = remember{{ marker: HazardousLaneMarker ->\n        uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\n    }}\n\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker){{\n        mappingViewModel.onEvent(event = MappingVmEvent.DeleteHazardousLaneMarker(\n            id = uiState.selectedHazardousMarker!!.id\n        ))\n    }}\n\n    val discardChangesMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            discardHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n\n    val onDiscardMarkerChanges = remember{{\n        uiState = uiState.copy(currentlyEditingHazardousMarker = null)\n    }}\n\n    val onDismissIncidentDescriptionBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            collapseBottomSheet()\n        })\n    }}\n\n    val onCancelEditIncidentDescription = remember{{\n        checkIfHasEditingMarker(onDiscardMarkerChanges)\n    }}\n\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker){{ description: String, label: String ->\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.UpdateReportedIncident(\n                marker = uiState.currentlyEditingHazardousMarker!!.copy(description = description, label = label)\n            ))\n    }}\n\n    val onClickHazardousInfoGotIt = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\n        }\n    }\n\n    fun getRouteDirections(){\n        val rescueTransaction = state.rescueTransaction ?: return\n\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\n        val startingLatitude = rescueTransaction.getStartingLatitude()?: return\n        val destinationLongitude = rescueTransaction.getDestinationLongitude()?: return\n        val destinationLatitude = rescueTransaction.getDestinationLatitude()?: return\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n    }\n\n\n\n    val cancelSearchDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelSearchDialogVisible = visibility)\n    }}\n\n    val cancelOnGoingRescueDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\n    }}\n\n    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(notificationPermissionVisible = visible)\n    }}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n\n            if(hasTransaction){\n               cancelOnGoingRescueDialogVisibility(true)\n               return@checkIfHasEditingMarker\n            }\n\n            if(uiState.searchingAssistance){\n               cancelSearchDialogVisibility(true)\n               return@checkIfHasEditingMarker\n            }\n\n            collapseBottomSheet()\n        })\n    }\n\n\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap){\n        if (userLocationAvailable) {\n            val camera = cameraState\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n        }\n    }\n    LaunchedEffect(key1 = true){\n        mappingViewModel.eventFlow.distinctUntilChanged().collectLatest {\n            when(it){\n                is MappingEvent.NoInternetConnection -> {\n                   noInternetDialogVisibility(true)\n                }\n\n                else -> {}\n            }\n        }\n    }\n\n\n    LaunchedEffect(key1 = hasTransaction){\n        uiState = uiState.copy(\n            hasTransaction = hasTransaction\n        )\n    }\n\n    LaunchedEffect(key1 = isRescueCancelled){\n        uiState = uiState.copy(\n            isRescueCancelled = isRescueCancelled\n        )\n    }\n\n    LaunchedEffect(key1 = isNavigating){\n        uiState = uiState.copy(\n            isNavigating = isNavigating\n        )\n    }\n\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.collect { event ->\n            when (event) {\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    val location = state.userLocation!!\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\n                            latitude = location.latitude!!.toFloat(),\n                            longitude = location.longitude!!.toFloat()\n                        ))\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection,\n                        generateRouteFailed = false\n                    )\n                }\n\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = false,\n                        requestHelpButtonVisible = true,\n                        searchingAssistance = false,\n                        routeDirection = null,\n                        mapSelectedRescuee = null,\n                    ).also {\n                        collapseBottomSheet()\n                    }\n                    onChangeNavigatingState(false)\n\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                        isRescueRequestDialogVisible = false\n                    ).also {\n                        expandBottomSheet()\n                        rescueRequestDialogVisibility(false)\n                        rescueResultsDialogVisibility(false)\n\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type).also {\n                        expandBottomSheet()\n                    }\n\n                }\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Cannot Request\",\n                        description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                        icon = R.raw.error\n                    ))\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(\n                        bottomSheetType = event.bottomSheetType,\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\n                        .also {\n                            expandBottomSheet()\n                        }\n                }\n\n                is MappingEvent.ReportIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.ReportIncidentSuccess -> {\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.IncidentDistanceTooFar -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Exceeds Reachable Distance\",\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.SelectHazardousLaneMarker -> {\n                    uiState = uiState.copy(\n                        selectedHazardousMarker = event.marker,\n                        bottomSheetType = BottomSheetType.IncidentDescription.type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\n                }\n\n                is MappingEvent.UpdateIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n                MappingEvent.UpdateIncidentSuccess -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Incident Updated\",\n                            description = \"The incident has been updated successfully\",\n                            icon = R.raw.success\n                        )\n                    )\n                    onDiscardMarkerChanges()\n                    collapseBottomSheet()\n                }\n\n                is MappingEvent.GenerateRouteNavigationFailed -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Failed to Generate Route\",\n                        description = \"Failed to generate route to the destination due to a connection error.\",\n                    ))\n                    uiState = uiState.copy(\n                        generateRouteFailed = true\n                    )\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection ?: return@LaunchedEffect\n\n        if (route.geometry.isEmpty()) {\n            removeRouteDirection()\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = hasInternetConnection) {\n        val nearbyCyclistLoaded = state.nearbyCyclist?.users?.isNotEmpty() ?: false\n        val userLoaded = state.user.id != null\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n\n        if (dataHaveBeenLoaded.not()) {\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\n        }\n\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\n    }\n\n\n    LaunchedEffect(\n        key1 = hasInternetConnection,\n        key2 = uiState.generateRouteFailed,\n        key3 = state.rescueTransaction?.route) {\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n        if(!uiState.generateRouteFailed){\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n\n\n\n        hazardousLaneMarkers = hazardousMarkers,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        incidentDescription = incidentDescription,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(true)\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\n                is MappingUiEvent.RouteOverview -> routeOverView()\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\n                is MappingUiEvent.LocationPermission ->  locationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\n\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\n                is MappingUiEvent.SinoTrackWebViewVisibility -> sinoTrackWebViewVisibility(event.visibility)\n                is MappingUiEvent.RescueResultsDialog -> rescueResultsDialogVisibility(event.visibility)\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n                is MappingUiEvent.OpenHazardousLaneBottomSheet -> onOpenHazardousLaneBottomSheet()\n                is MappingUiEvent.OnSelectMapType -> onSelectMapType(event.mapType)\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(event.marker)\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(event.markerSnippet, event.markerId)\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(event.description, event.label)\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(event.visibility)\n                is MappingUiEvent.NotificationPermissionDialog ->  notificationPermissionDialogVisibility(event.visibility)\n            }\n        }\n    )\n\n}\n\n//on click cancel\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1694449752238)
@@ -247,7 +247,7 @@
         }
     }
 
-    val onClickRequestHelpButton = remember {
+    val onRequestHelp = remember {
         {
             foregroundLocationPermissionsState.requestPermission(
                 onGranted = {
@@ -263,6 +263,25 @@
     }
 
 
+
+    val notificationLauncher = rememberLauncherForActivityResult(
+        contract = ActivityResultContracts.RequestPermission(),
+        onResult = { isGranted ->
+            if (isGranted) {
+                onRequestHelp()
+            }
+        }
+    )
+    val notificationPermissionState = rememberPermissionState(
+        permission = Manifest.permission.POST_NOTIFICATIONS
+    ) { permissionGranted ->
+        if (permissionGranted) {
+            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
+        }
+
+    }
+
+
     val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {
         {
 
@@ -1193,7 +1212,7 @@
         incidentDescription = incidentDescription,
         event = { event ->
             when (event) {
-                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()
+                is MappingUiEvent.RequestHelp -> onRequestHelp()
                 is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()
                 is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)
                 is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport kotlinx.parcelize.Parcelize\n\n\n@Parcelize\n@StableState\ndata class MappingUiState(\n    val rescueRequestAccepted: Boolean = false,\n    val requestHelpButtonVisible: Boolean = true,\n    val searchingAssistance: Boolean = false,\n    val isNoInternetVisible: Boolean = false,\n    val mapSelectedRescuee: MapSelectedRescuee? = null,\n    val routeDirection: RouteDirection? = null,\n    val bottomSheetType: String? = null,\n    val locationPermissionDialogVisible: Boolean = false,\n    val isFabExpanded: Boolean = false,\n    val alertDialogState: AlertDialogState = AlertDialogState(),\n    val isRescueRequestDialogVisible: Boolean = false,\n    val isSinoTrackWebViewVisible: Boolean = false,\n    val isEmergencyCallDialogVisible: Boolean = false,\n    val isRescueResultsDialogVisible: Boolean = false,\n    val selectedPhoneNumber: String = \"\",\n    val lastLongPressedLocation: LatLng? = null,\n    val selectedIncidentLabel: String = \"\",\n    val selectedHazardousMarker: HazardousLaneMarker? = HazardousLaneMarker(),\n    val deleteHazardousMarkerDialogVisible: Boolean = false,\n    val discardHazardousMarkerDialogVisible: Boolean = false,\n    val currentlyEditingHazardousMarker: HazardousLaneMarker? = null,\n    val hasTransaction: Boolean = false,\n    val isRescueCancelled: Boolean = false,\n    val isNavigating: Boolean = false,\n    val generateRouteFailed: Boolean = false,\n    val cancelSearchDialogVisible: Boolean = false,\n    val cancelOnGoingRescueDialogVisible: Boolean = false,\n\n\n\n\n    ) : Parcelable\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(date 1694449807525)
@@ -40,6 +40,7 @@
     val generateRouteFailed: Boolean = false,
     val cancelSearchDialogVisible: Boolean = false,
     val cancelOnGoingRescueDialogVisible: Boolean = false,
+    val notificationPermissionVisible: Boolean = false
 
 
 
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MapType\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@StableState\ndata class MappingState(\n    val isLoading: Boolean = false,\n    val userLocation: LocationModel? = null,\n    val rescueTransaction: RescueTransactionItem? = null,\n    val user: UserItem = UserItem(),\n    val rescueRequestAcceptedUser: UserItem? = null,\n    val rescuer: UserItem? = null,\n    val rescuee: UserItem? = null,\n    val profileUploaded: Boolean = false,\n    val respondedToHelp: Boolean = false,\n    val transactionLocation: LocationModel? = null,\n    val rescuerETA: String = \"\",\n    val rescuerDistance: String = \"\",\n    val newRescueRequest: NewRescueRequestsModel? = null,\n    val speedometerState: SpeedometerState = SpeedometerState(),\n    val nearbyCyclist: NearbyCyclist? = null,\n    val mapType: String = MapType.Default.type,\n    val userId: String = \"\",\n    val shouldShowHazardousStartingInfo: Boolean = false,\n) : Parcelable{\n\n\n    fun getTransactionId() = user.getTransactionId() ?: rescueTransaction?.id ?: \"\"\n    fun getTopSpeed() = speedometerState.topSpeed\n\n    fun getCurrentLocation() = user.location ?: userLocation\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(date 1694449982454)
@@ -31,6 +31,7 @@
     val mapType: String = MapType.Default.type,
     val userId: String = "",
     val shouldShowHazardousStartingInfo: Boolean = false,
+    val lastRequestNotifiedId: String = "",
 ) : Parcelable{
 
 
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.BottomSheetScaffoldState\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport androidx.constraintlayout.compose.Dimension\nimport com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog\nimport com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog\nimport com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission\nimport com.example.cyclistance.feature_authentication.presentation.common.visible\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.CancelledRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.banner.MappingExpandableBanner\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet.MappingBottomSheet\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RequestHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RespondToHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelOnGoingRescueDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelSearchDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DeleteHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DiscardHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.ExpandableFABSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.FloatingButtonSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestAccepted\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestCancelled\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_request.RescueRequestDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_results.RescueResultsDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.sino_track.SinoTrackWebView\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.MultiplePermissionsState\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.mapbox.mapboxsdk.maps.MapboxMap\n\n\n@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterialApi::class)\n@Composable\nfun MappingScreenContent(\n    modifier: Modifier,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    state: MappingState,\n    emergencyState: EmergencyCallState,\n    mapboxMap: MapboxMap?,\n\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    hazardousLaneMarkers: List<HazardousLaneMarker>,\n    locationPermissionState: MultiplePermissionsState = rememberMultiplePermissionsState(permissions = emptyList()),\n    event: (MappingUiEvent) -> Unit = {},\n) {\n\n    val respondentCount by remember(state.newRescueRequest?.request?.size) {\n        derivedStateOf { (state.newRescueRequest?.request)?.size ?: 0 }\n    }\n\n\n    val configuration = LocalConfiguration.current\n    val markerPostedCount by remember(hazardousLaneMarkers.size){\n        derivedStateOf {\n            hazardousLaneMarkers.count { it.idCreator == state.userId }\n        }\n    }\n\n\n    Surface(\n        modifier = modifier\n            .fillMaxSize(),\n        color = MaterialTheme.colors.background) {\n\n\n        Box {\n\n            if (uiState.isRescueRequestDialogVisible) {\n                RescueRequestDialog(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n            }\n\n\n            if(uiState.isRescueResultsDialogVisible){\n\n                RescueResultsDialog(\n                    modifier = Modifier.fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n\n            }\n\n\n            MappingBottomSheet(\n                state = state,\n                event = event,\n                bottomSheetScaffoldState = bottomSheetScaffoldState,\n                uiState = uiState,\n                incidentDescription = incidentDescription,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(horizontal = 12.dp)\n                    .align(Alignment.BottomCenter),\n                markerPostedCount = markerPostedCount) {\n\n\n                ConstraintLayout(modifier = Modifier.fillMaxSize()) {\n\n                    val (mapScreen, requestHelpButton, circularProgressbar, dialog, respondToHelpButton, fabSection, expandableFabSection) = createRefs()\n\n\n                    MappingMapsScreen(\n                        state = state,\n                        modifier = Modifier.constrainAs(mapScreen) {\n                            top.linkTo(parent.top)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                        },\n                        mapboxMap = mapboxMap,\n                        routeDirection = uiState.routeDirection,\n                        event = event,\n                        uiState = uiState,\n                        hazardousLaneMarkers = hazardousLaneMarkers\n                    )\n\n\n\n\n                    AnimatedVisibility(\n                        visible = uiState.mapSelectedRescuee != null && bottomSheetScaffoldState.bottomSheetState.isCollapsed,\n                        enter = expandVertically(expandFrom = Alignment.Top) { 20 },\n                        exit = shrinkVertically(animationSpec = tween()) { fullHeight ->\n                            fullHeight / 2\n                        },\n                    ) {\n                        if (uiState.mapSelectedRescuee != null) {\n                            MappingExpandableBanner(\n                                modifier = Modifier\n                                    .padding(all = 6.dp)\n                                    .fillMaxWidth(), banner = uiState.mapSelectedRescuee,\n                                onClickDismissButton = { event(MappingUiEvent.DismissBanner) })\n                        }\n                    }\n\n                    FloatingButtonSection(\n                        modifier = Modifier\n                            .constrainAs(fabSection) {\n                                end.linkTo(parent.end, margin = 8.dp)\n                                bottom.linkTo(\n                                    parent.bottom,\n                                    margin = (configuration.screenHeightDp / 2.5).dp)\n                                top.linkTo(parent.top, margin = 15.dp)\n                                height = Dimension.fillToConstraints\n\n                            },\n                        locationPermissionGranted = locationPermissionState.allPermissionsGranted,\n                        onClickLocateUserButton = { event(MappingUiEvent.LocateUser) },\n                        onClickRouteOverviewButton = { event(MappingUiEvent.RouteOverview) },\n                        onClickRecenterButton = { event(MappingUiEvent.RecenterRoute) },\n                        onClickOpenNavigationButton = { event(MappingUiEvent.OpenNavigation) },\n                        onClickLayerButton = { event(MappingUiEvent.OpenHazardousLaneBottomSheet) },\n                        uiState = uiState\n                    )\n\n                    ExpandableFABSection(\n                        onClickEmergencyCall = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickFamilyTracker = { event(MappingUiEvent.OpenFamilyTracker) },\n                        onClickRescueRequest = { event(MappingUiEvent.RescueRequestDialog(visibility = true)) },\n                        onClickFab = { event(MappingUiEvent.ExpandableFab(expanded = !uiState.isFabExpanded)) },\n                        onClickBikeTracker = {\n                            event(\n                                MappingUiEvent.SinoTrackWebViewVisibility(\n                                    visibility = true))\n                        },\n                        isFabExpanded = uiState.isFabExpanded,\n                        badgeCount = respondentCount,\n                        modifier = Modifier.constrainAs(expandableFabSection) {\n                            end.linkTo(parent.end, margin = 8.dp)\n                            if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) bottom.linkTo(\n                                parent.bottom,\n                                margin = 15.dp) else top.linkTo(fabSection.bottom, margin = 8.dp)\n                        }\n                    )\n\n\n                    val buttonVisible =\n                        uiState.isNavigating.not() && uiState.isFabExpanded.not() && bottomSheetScaffoldState.bottomSheetState.isCollapsed\n                    val requestHelpVisible = uiState.requestHelpButtonVisible && buttonVisible\n                    val respondToHelpVisible =\n                        uiState.requestHelpButtonVisible.not() && buttonVisible\n\n                    RequestHelpButton(\n                        modifier = Modifier.constrainAs(requestHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        }, onClickRequestHelpButton = { event(MappingUiEvent.RequestHelp) },\n                        state = state,\n                        visible = requestHelpVisible\n\n                    )\n\n                    RespondToHelpButton(\n                        modifier = Modifier.constrainAs(respondToHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        },\n                        onClickRespondButton = { event(MappingUiEvent.RespondToHelp) },\n                        state = state,\n                        visible = respondToHelpVisible\n                    )\n\n                    if (state.isLoading) {\n                        CircularProgressIndicator(\n                            modifier = Modifier.constrainAs(\n                                circularProgressbar) {\n                                top.linkTo(parent.top)\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n                    if (uiState.cancelSearchDialogVisible) {\n                        CancelSearchDialog(onDismissRequest = {\n                            event(MappingUiEvent.CancelSearchDialog(visibility = false))\n                        }, onClickOkay = {\n                            event(MappingUiEvent.SearchCancelled)\n                        }, modifier = Modifier.constrainAs(dialog) {\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                            width = Dimension.matchParent\n                            height = Dimension.wrapContent\n                            this.centerTo(parent)\n                        })\n                    }\n\n                    if (uiState.cancelOnGoingRescueDialogVisible) {\n                        CancelOnGoingRescueDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.CancelOnGoingRescueDialog(visibility = false))\n                            },\n                            onClickOkay = { event(MappingUiEvent.CancelOnGoingRescue) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n\n                    if (uiState.isEmergencyCallDialogVisible) {\n                        EmergencyCallDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.EmergencyCallDialog(visibility = false)) },\n                            emergencyCallModel = emergencyState.emergencyCallModel,\n                            onClick = {\n                                event(\n                                    MappingUiEvent.OnEmergencyCall(\n                                        it.phoneNumber\n                                    )\n                                )\n                            }, onAddContact = {\n                                event(MappingUiEvent.OnAddEmergencyContact)\n                                event(MappingUiEvent.EmergencyCallDialog(visibility = false))\n                            }\n\n                        )\n                    }\n\n                    if (uiState.deleteHazardousMarkerDialogVisible) {\n                        DeleteHazardousLaneMarkerDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(\n                                    visibility = false))\n                            },\n                            modifier = Modifier,\n                            onClickConfirmButton = {\n                                event(MappingUiEvent.OnConfirmDeleteIncident)\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(visibility = false))\n                            })\n                    }\n\n                    if (uiState.isNoInternetVisible) {\n                        NoInternetDialog(\n                            onDismiss = { event(MappingUiEvent.NoInternetDialog(visibility = false)) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n                    if (uiState.locationPermissionDialogVisible) {\n                        DialogForegroundLocationPermission(\n                            modifier = Modifier.constrainAs(\n                                dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.LocationPermission(visibility = false)) }\n                        )\n                    }\n\n\n                    \n                    if(uiState.alertDialogState.visible()){\n                        AlertDialog(\n                            alertDialog = uiState.alertDialogState,\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = { event(MappingUiEvent.AlertDialog(alertDialogState = AlertDialogState())) })\n                    }\n\n                    if (uiState.discardHazardousMarkerDialogVisible) {\n                        DiscardHazardousLaneMarkerDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                            },\n                            onClickDiscard = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                                event(MappingUiEvent.DiscardMarkerChanges)\n                            }\n                        )\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.isRescueCancelled && uiState.rescueRequestAccepted.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n\n                        val rescueTransaction = state.rescueTransaction ?: return@AnimatedVisibility\n\n                        MappingRequestCancelled(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.CancelledRescueConfirmed) },\n                            cancelledRescueModel = CancelledRescueModel(\n                                transactionID = rescueTransaction.id,\n                                rescueCancelledBy = rescueTransaction.getCancellationName(),\n                                reason = rescueTransaction.getCancellationReason(),\n                                message = rescueTransaction.getCancellationMessage()\n                            ))\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.rescueRequestAccepted && uiState.isRescueCancelled.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n                        MappingRequestAccepted(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.RescueRequestAccepted) },\n                            acceptedName = state.rescuee?.name ?: \"Name placeholder\",\n                        )\n                    }\n                }\n            }\n\n\n            if (uiState.isSinoTrackWebViewVisible) {\n                SinoTrackWebView(onDismiss = {\n                    event(\n                        MappingUiEvent.SinoTrackWebViewVisibility(\n                            visibility = false))\n                })\n            }\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(date 1694450331362)
@@ -26,9 +26,11 @@
 import androidx.compose.ui.unit.dp
 import androidx.constraintlayout.compose.ConstraintLayout
 import androidx.constraintlayout.compose.Dimension
+import com.example.cyclistance.core.domain.model.AlertDialogState
 import com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog
 import com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog
 import com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission
+import com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogNotificationPermission
 import com.example.cyclistance.feature_authentication.presentation.common.visible
 import com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog
 import com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState
@@ -352,6 +354,25 @@
                     }
 
 
+                    if (uiState.notificationPermissionVisible) {
+                        DialogNotificationPermission(
+                            modifier = Modifier.constrainAs(
+                                dialog) {
+                                end.linkTo(parent.end)
+                                start.linkTo(parent.start)
+                                bottom.linkTo(parent.bottom)
+                                height = Dimension.wrapContent
+                                centerTo(parent)
+                            },
+                            onDismiss = {
+                                event(
+                                    MappingUiEvent.NotificationPermissionDialog(
+                                        visibility = false))
+                            }
+                        )
+                    }
+
+
                     
                     if(uiState.alertDialogState.visible()){
                         AlertDialog(
