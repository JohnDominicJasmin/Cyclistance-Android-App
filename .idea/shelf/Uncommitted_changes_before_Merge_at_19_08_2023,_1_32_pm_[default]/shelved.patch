Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <targetSelectedWithDropDown>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2023-08-18T14:57:14.411557640Z\" />\n    <multipleDevicesSelectedInDropDown value=\"true\" />\n    <runningDeviceTargetsSelectedWithDialog>\n      <Target>\n        <type value=\"RUNNING_DEVICE_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"SERIAL_NUMBER\" />\n            <value value=\"194a89050404\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </runningDeviceTargetsSelectedWithDialog>\n    <targetsSelectedWithDialog>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetsSelectedWithDialog>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 3b04db7aa54ed389594bdc2b63ea46bc3ac8bcc3)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1692422916169)
@@ -19,6 +19,15 @@
         <type value="RUNNING_DEVICE_TARGET" />
         <deviceKey>
           <Key>
+            <type value="VIRTUAL_DEVICE_PATH" />
+            <value value="$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd" />
+          </Key>
+        </deviceKey>
+      </Target>
+      <Target>
+        <type value="RUNNING_DEVICE_TARGET" />
+        <deviceKey>
+          <Key>
             <type value="SERIAL_NUMBER" />
             <value value="194a89050404" />
           </Key>
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingMapsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components\n\nimport android.annotation.SuppressLint\nimport android.graphics.Color\nimport android.os.Bundle\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.core.content.ContextCompat\nimport androidx.core.graphics.drawable.toBitmap\nimport androidx.lifecycle.*\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ICON_LAYER_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ICON_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_LAYER_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.TRANSACTION_ICON_ID\nimport com.example.cyclistance.core.utils.validation.FormatterUtils.getMapIconImageDescription\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.setDefaultSettings\nimport com.example.cyclistance.navigation.IsDarkTheme\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.annotations.IconFactory\nimport com.mapbox.mapboxsdk.annotations.MarkerOptions\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.maps.MapView\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.maps.Style\nimport com.mapbox.mapboxsdk.style.expressions.Expression.*\nimport com.mapbox.mapboxsdk.style.layers.LineLayer\nimport com.mapbox.mapboxsdk.style.layers.Property\nimport com.mapbox.mapboxsdk.style.layers.PropertyFactory.*\nimport com.mapbox.mapboxsdk.style.layers.SymbolLayer\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@Suppress(\"Deprecation\")\n@Composable\nfun MappingMapsScreen(\n    modifier: Modifier,\n    state: MappingState,\n    uiState: MappingUiState,\n    mapboxMap: MapboxMap?,\n    hasTransaction: Boolean,\n    isNavigating: Boolean,\n    routeDirection: RouteDirection?,\n    isRescueCancelled: Boolean,\n    nearbyCyclist: List<UserItem>,\n    event: (MappingUiEvent) -> Unit\n//    requestNavigationCameraToOverview: () -> Unit, //todo use this one\n) {\n\n\n    val context = LocalContext.current\n\n\n\n    val dismissNearbyCyclistsIcon = remember(mapboxMap) {\n        {\n            mapboxMap?.removeAnnotations()\n        }\n    }\n\n    val showNearbyCyclistsIcon = remember(nearbyCyclist.size, mapboxMap) {\n        {\n            Timber.v(\"Nearby Cyclist: ${nearbyCyclist}\")\n            dismissNearbyCyclistsIcon()\n\n            nearbyCyclist.distinctBy {\n                it.id\n            }.filter{\n                it.id != state.user.id\n            }.filter {\n                it.isUserNeedHelp() == true\n            }.forEach { cyclist ->\n                Timber.v(\"Cyclist Name: ${cyclist.name}\")\n                val location = cyclist.location\n                val latitude = location?.latitude ?: return@forEach\n                val longitude = location.longitude ?: return@forEach\n                val description = cyclist.getDescription()\n                val iconImage = description?.getMapIconImageDescription(context)\n                    ?.toBitmap(width = 120, height = 120)\n                iconImage?.let { bitmap ->\n                    mapboxMap ?: return@let\n                    val icon = IconFactory.getInstance(context).fromBitmap(bitmap)\n                    MarkerOptions().apply {\n                        setIcon(icon)\n                        position(LatLng(latitude, longitude))\n                        title = cyclist.id\n                    }.also(mapboxMap::addMarker)\n                }\n            }\n        }\n    }\n\n\n    val hasActiveTransaction = remember(hasTransaction, isRescueCancelled) {\n        hasTransaction || isRescueCancelled\n    }\n\n    val isUserNavigating = remember(key1 = isNavigating, key2 = routeDirection?.geometry) {\n        val geometry = routeDirection?.geometry\n        isNavigating || geometry?.isNotEmpty() == true\n    }\n\n    val shouldDismissNearbyIcons = remember(nearbyCyclist, isUserNavigating, hasActiveTransaction) {\n        isUserNavigating || hasActiveTransaction\n    }\n    LaunchedEffect(key1 = shouldDismissNearbyIcons, key2 = mapboxMap, key3= nearbyCyclist.size) {\n\n        if (shouldDismissNearbyIcons) {\n            dismissNearbyCyclistsIcon()\n            return@LaunchedEffect\n        }\n\n        showNearbyCyclistsIcon()\n    }\n\n\n    LaunchedEffect(key1 = mapboxMap, uiState.isFabExpanded) {\n\n        mapboxMap?.setOnMarkerClickListener {\n            event(MappingUiEvent.RescueeMapIconSelected(it.title))\n            true\n        }\n\n        mapboxMap?.addOnMapClickListener {\n            event(MappingUiEvent.OnMapClick)\n            true\n        }\n\n        mapboxMap?.addOnCameraMoveListener {\n            if (uiState.isFabExpanded) {\n                event(MappingUiEvent.OnCollapseExpandableFAB)\n            }\n        }\n\n        mapboxMap?.addOnMapLongClickListener {\n            event(MappingUiEvent.OnMapLongClick(it))\n            true\n        }\n\n    }\n\n\n    val clientLocation =\n        remember(state.transactionLocation, state.rescuer?.location, state.rescuee?.location) {\n            with(state) {\n                transactionLocation ?: rescuer?.location ?: rescuee?.location\n            }\n        }\n\n    val hasTransactionLocationChanges = remember(clientLocation) {\n        clientLocation != null\n    }\n\n    val dismissTransactionLocationIcon = remember(mapboxMap) {\n        {\n            mapboxMap?.getStyle { style ->\n                if (style.isFullyLoaded) {\n                    style.removeImage(TRANSACTION_ICON_ID)\n                    val geoJsonSource = style.getSourceAs<GeoJsonSource>(ICON_SOURCE_ID)\n                    geoJsonSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n                }\n            }\n        }\n    }\n\n    val showTransactionLocationIcon = remember(mapboxMap, state.user) {\n        { location: LocationModel ->\n            dismissTransactionLocationIcon()\n            val role = state.user.transaction?.role\n            val mapIcon = if (role == Role.RESCUEE.name.lowercase()) {\n                R.drawable.ic_map_rescuer\n            } else {\n                R.drawable.ic_map_rescuee\n            }\n            mapboxMap?.getStyle { style ->\n                if (style.isFullyLoaded) {\n                    val longitude = location.longitude ?: return@getStyle\n                    val latitude = location.latitude ?: return@getStyle\n                    style.removeImage(TRANSACTION_ICON_ID)\n                    ContextCompat.getDrawable(context, mapIcon)?.toBitmap(width = 100, height = 100)\n                        ?.let { iconBitmap ->\n                            style.addImage(TRANSACTION_ICON_ID, iconBitmap)\n                            val geoJsonSource = style.getSourceAs<GeoJsonSource>(ICON_SOURCE_ID)\n                            val feature =\n                                Feature.fromGeometry(Point.fromLngLat(longitude, latitude))\n                            geoJsonSource?.setGeoJson(feature)\n                        }\n                }\n            }\n        }\n    }\n\n    LaunchedEffect(\n        key1 = hasActiveTransaction,\n        key2 = hasTransactionLocationChanges,\n        key3 = clientLocation) {\n\n        if (hasTransactionLocationChanges.not() || hasActiveTransaction.not()) {\n            dismissTransactionLocationIcon()\n            return@LaunchedEffect\n        }\n\n        clientLocation?.latitude ?: return@LaunchedEffect\n        showTransactionLocationIcon(clientLocation)\n    }\n\n    Map(\n        modifier = modifier,\n        event = event)\n\n}\n\n\n@Composable\nprivate fun Map(\n    modifier: Modifier,\n    event: (MappingUiEvent) -> Unit) {\n\n\n    val isDarkTheme = IsDarkTheme.current\n    val mapView = rememberMapViewWithLifecycle()\n    var isInitialized by remember {\n        mutableStateOf(false)\n    }\n\n\n    Column(\n        modifier = modifier\n            .fillMaxHeight()\n            .fillMaxWidth()\n\n    ) {\n\n\n        AndroidView(factory = {mapView}){\n            if(isInitialized){\n                return@AndroidView\n            }\n            CoroutineScope(Dispatchers.Main).launch {\n                Timber.v(\"Successfully recomposed in Map\")\n\n\n\n                val initSource = { loadedMapStyle: Style ->\n                    loadedMapStyle.addSource(GeoJsonSource(ICON_SOURCE_ID))\n                    loadedMapStyle.addSource(GeoJsonSource(ROUTE_SOURCE_ID))\n                }\n\n                val initLayers = { loadedMapStyle: Style ->\n\n\n                    val drawableIcon =\n                        ContextCompat.getDrawable(it.context, R.drawable.ic_map_rescuer)\n                    val bitmapIcon = drawableIcon?.toBitmap(width = 100, height = 100)\n                    bitmapIcon?.let { loadedMapStyle.addImage(TRANSACTION_ICON_ID, it) }\n\n                    loadedMapStyle.addLayer(\n                        SymbolLayer(ICON_LAYER_ID, ICON_SOURCE_ID).apply {\n                            setProperties(\n                                iconImage(TRANSACTION_ICON_ID),\n                                iconAllowOverlap(true),\n                                iconIgnorePlacement(true)\n                            )\n                        }\n                    )\n\n\n                    loadedMapStyle.addLayerBelow(\n                        LineLayer(ROUTE_LAYER_ID, ROUTE_SOURCE_ID).apply {\n                            setProperties(\n                                lineCap(Property.LINE_CAP_ROUND),\n                                lineJoin(Property.LINE_JOIN_ROUND),\n                                lineWidth(5f),\n                                lineColor(Color.parseColor(\"#006eff\"))\n                            )\n                        }, ICON_LAYER_ID)\n\n\n                }\n                mapView.getMapAsync{\n                    it.setStyle(if (isDarkTheme) Style.DARK else Style.LIGHT) { loadedStyle ->\n\n                        if (loadedStyle.isFullyLoaded) {\n                            event(MappingUiEvent.OnInitializeMap(it))\n                            initSource(loadedStyle)\n                            initLayers(loadedStyle)\n                        }\n                    }\n                    it.setDefaultSettings()\n                }\n                isInitialized = true\n\n            }\n        }\n\n    }\n}\n\n@Composable\nfun rememberMapViewWithLifecycle(): MapView {\n    val context = LocalContext.current\n    val mapView = remember {\n        MapView(context).apply {\n            id = R.id.mapView\n        }\n    }\n\n    // Makes MapView follow the lifecycle of this composable\n    val lifecycleObserver = rememberMapLifecycleObserver(mapView)\n    val lifecycle = LocalLifecycleOwner.current.lifecycle\n    DisposableEffect(lifecycle) {\n        lifecycle.addObserver(lifecycleObserver)\n        onDispose {\n            lifecycle.removeObserver(lifecycleObserver)\n        }\n    }\n\n    return mapView\n}\n\n@Composable\nfun rememberMapLifecycleObserver(mapView: MapView): LifecycleEventObserver =\n    remember(mapView) {\n        LifecycleEventObserver { _, event ->\n            when (event) {\n                Lifecycle.Event.ON_CREATE -> mapView.onCreate(Bundle())\n                Lifecycle.Event.ON_START -> mapView.onStart()\n                Lifecycle.Event.ON_RESUME -> mapView.onResume()\n                Lifecycle.Event.ON_PAUSE -> mapView.onPause()\n                Lifecycle.Event.ON_STOP -> mapView.onStop()\n                Lifecycle.Event.ON_DESTROY -> mapView.onDestroy()\n                else -> throw IllegalStateException()\n            }\n        }\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingMapsScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingMapsScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingMapsScreen.kt	(revision 3b04db7aa54ed389594bdc2b63ea46bc3ac8bcc3)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingMapsScreen.kt	(date 1692422915719)
@@ -82,8 +82,7 @@
 
     val showNearbyCyclistsIcon = remember(nearbyCyclist.size, mapboxMap) {
         {
-            Timber.v("Nearby Cyclist: ${nearbyCyclist}")
-            dismissNearbyCyclistsIcon()
+//            dismissNearbyCyclistsIcon()
 
             nearbyCyclist.distinctBy {
                 it.id
