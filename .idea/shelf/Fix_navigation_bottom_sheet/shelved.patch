Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.input.TextFieldValue\nimport com.example.cyclistance.core.utils.formatter.IconFormatter.toHazardousLaneIconMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun MappingBottomSheet(\n    modifier: Modifier = Modifier,\n    state: MappingState,\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    markerPostedCount: Int,\n    event: (MappingUiEvent) -> Unit = {},\n    content: @Composable (PaddingValues) -> Unit,\n) {\n\n\n    val scope = rememberCoroutineScope()\n\n    val sheetGesturesEnabled = remember(uiState.bottomSheetType) {\n        uiState.bottomSheetType != BottomSheetType.SearchAssistance.type &&\n        uiState.bottomSheetType != BottomSheetType.OnGoingRescue.type &&\n        uiState.bottomSheetType != BottomSheetType.IncidentDescription.type\n    }\n    MappingBottomSheet(\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        sheetGesturesEnabled = sheetGesturesEnabled,\n        sheetContent = {\n            when (uiState.bottomSheetType) {\n\n                BottomSheetType.RescuerArrived.type -> {\n\n                    BottomSheetRescueArrived(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = {\n                            event(MappingUiEvent.RescueFinished)\n                        })\n\n                }\n\n                BottomSheetType.DestinationReached.type -> {\n\n                    BottomSheetReachedDestination(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = {\n                            event(MappingUiEvent.RescueFinished)\n                        })\n\n                }\n\n                BottomSheetType.ReportIncident.type -> {\n\n                    BottomSheetReportIncident(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        selectedLabel = uiState.selectedIncidentLabel,\n                        onClick = {\n                            event(MappingUiEvent.OnChangeIncidentLabel(it))\n                        }, onChangeDescription = {\n                            event(MappingUiEvent.OnChangeIncidentDescription(it))\n                        }, onClickConfirm = {\n                            event(MappingUiEvent.OnReportIncident(uiState.selectedIncidentLabel))\n                            scope.launch {\n                                bottomSheetScaffoldState.bottomSheetState.collapse()\n                            }\n                        }, incidentDescription = incidentDescription,\n                        markerPostedCount = markerPostedCount)\n\n                }\n\n                BottomSheetType.SearchAssistance.type -> {\n\n                    BottomSheetSearchingAssistance(\n                        modifier = modifier,\n                        onClickCancelSearchButton = {\n                            event(MappingUiEvent.CancelSearching)\n                        },\n                    )\n                }\n\n                BottomSheetType.OnGoingRescue.type -> {\n\n                    BottomSheetOnGoingRescue(\n                        modifier = modifier,\n                        onClickCallButton = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickChatButton = { event(MappingUiEvent.ChatRescueTransaction) },\n                        onClickCancelButton = { event(MappingUiEvent.CancelRescueTransaction) },\n                        role = state.user.transaction?.role ?: \"\",\n                        onGoingRescueModel = OnGoingRescueModel(\n                            estimatedTime = state.rescueETA,\n                            estimatedDistance = state.rescueDistance,\n                            currentSpeed = String.format(\n                                \"%.2f\",\n                                state.speedometerState.currentSpeedKph),\n                            ridingDistance = state.speedometerState.travelledDistance,\n                            maxSpeed = String.format(\"%.2f\", state.speedometerState.topSpeed)))\n\n                }\n\n                BottomSheetType.MapType.type -> {\n\n                    MapTypeBottomSheet(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        selectedMapType = state.mapType,\n                        onClickMapType = { event(MappingUiEvent.OnSelectMapType(it)) })\n\n                }\n\n                BottomSheetType.IncidentDescription.type -> {\n                    BottomSheetIncidentDescription(\n                        modifier = modifier,\n                        onDismissBottomSheet = { event(MappingUiEvent.DismissIncidentDescriptionBottomSheet) },\n                        uiState = uiState,\n                        state = state,\n                        icon = uiState.selectedHazardousMarker!!.label.toHazardousLaneIconMarker(),\n                        onClickEdit = { event(MappingUiEvent.OnClickEditIncidentDescription(uiState.selectedHazardousMarker)) },\n                        onClickDelete = { event(MappingUiEvent.OnClickDeleteIncident) },\n                        onClickCancelButton = { event(MappingUiEvent.CancelEditIncidentDescription) },\n                        onClickConfirmButton = { description, label ->\n                            event(\n                                MappingUiEvent.UpdateIncidentDescription(\n                                    label = label,\n                                    description = description))\n                        },\n                        onClickGotItButton = { event(MappingUiEvent.OnClickHazardousInfoGotIt) },\n                    )\n\n                }\n\n\n            }\n        }, content = content)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(revision 448d4f8f23001b3fda831b744e727cd292726c6e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(date 1697633779480)
@@ -7,6 +7,7 @@
 import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.text.input.TextFieldValue
+import androidx.compose.ui.unit.dp
 import com.example.cyclistance.core.utils.formatter.IconFormatter.toHazardousLaneIconMarker
 import com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel
 import com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent
@@ -33,13 +34,15 @@
 
     val sheetGesturesEnabled = remember(uiState.bottomSheetType) {
         uiState.bottomSheetType != BottomSheetType.SearchAssistance.type &&
-        uiState.bottomSheetType != BottomSheetType.OnGoingRescue.type &&
         uiState.bottomSheetType != BottomSheetType.IncidentDescription.type
     }
+
     MappingBottomSheet(
         bottomSheetScaffoldState = bottomSheetScaffoldState,
         sheetGesturesEnabled = sheetGesturesEnabled,
+        sheetPeekHeight = if(uiState.bottomSheetType == BottomSheetType.OnGoingRescue.type) 60.dp else 0.dp,
         sheetContent = {
+
             when (uiState.bottomSheetType) {
 
                 BottomSheetType.RescuerArrived.type -> {
Index: app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.core.utils.constants\n\nimport androidx.datastore.preferences.core.booleanPreferencesKey\nimport androidx.datastore.preferences.core.stringPreferencesKey\n\nobject MappingConstants {\n    const val ROAD_LABEL_NAVIGATION = \"road-label-navigation\"\n    const val MAX_ZOOM_LEVEL_MAPS = 20.00\n    const val MIN_ZOOM_LEVEL_MAPS = 3.00\n\n    const val MAP_ZOOM = 6.00\n    const val DEFAULT_MAP_ZOOM_LEVEL = 4.50\n    const val DEFAULT_LATITUDE = 12.879700000000023\n    const val DEFAULT_LONGITUDE = 121.774\n    const val TRACKING_MAP_ZOOM_LEVEL = 16.0\n    const val LOCATE_USER_ZOOM_LEVEL = 15.20\n\n    const val CAMERA_TILT_DEGREES = 30.00\n\n\n    const val DEFAULT_CAMERA_ANIMATION_DURATION: Int = 1500\n    const val FAST_CAMERA_ANIMATION_DURATION:Int = 1\n\n    const val CHARACTER_LIMIT = 110\n    const val IMAGE_PLACEHOLDER_URL = \"https://raw.githubusercontent.com/JohnDominicJasmin/JohnDominicJasmin/main/ic_empty_profile_placeholder.jpg\"\n\n    const val LOCATION_UPDATES_INTERVAL: Long = 30000L\n    const val FASTEST_LOCATION_UPDATES_INTERVAL: Long = 20000L\n\n    val BIKE_TYPE_KEY = stringPreferencesKey(\"bike_type\")\n    val ADDRESS_KEY = stringPreferencesKey(\"address\")\n    val MAP_TYPE_KEY = stringPreferencesKey(\"map_type\")\n    val SHOW_HAZARDOUS_STARTING_INFO_KEY = booleanPreferencesKey(\"show_hazardous_starting_info\")\n\n    const val LOCATION_NAME = \"Cyclistance Location\"\n    const val LOCATION_SERVICE_CHANNEL_ID = \"cyclistance-location-channel-id\"\n    const val ACTION_START = \"start\"\n    const val ACTION_STOP = \"stop\"\n    const val ACTION_START_FOREGROUND = \"startForeground\"\n    const val ACTION_STOP_FOREGROUND = \"stopForeground\"\n\n    const val CONFIRM_DETAILS_VM_STATE_KEY = \"confirm_details_vm_state_key\"\n    const val MAPPING_VM_STATE_KEY = \"mapping_vm_state_key\"\n    const val CANCELLATION_VM_STATE_KEY = \"cancellation_vm_state_key\"\n    const val BROADCAST_USERS = \"broadcast_users\"\n    const val BROADCAST_RESCUE_TRANSACTION = \"broadcast_rescue_transaction\"\n    const val BROADCAST_LOCATION = \"broadcasting_location\"\n    const val JOIN_LIVE_LOCATION_UPDATES = \"joinLiveLocationUpdates\"\n    const val DEFAULT_BIKE_AVERAGE_SPEED_KM = 20.5\n    const val BUTTON_ANIMATION_DURATION = 1500L\n\n\n    const val INJURY_TEXT = \"Injury\"\n    const val BROKEN_FRAME_TEXT  = \"Broken Frame\"\n    const val INCIDENT_TEXT = \"Incident\"\n    const val BROKEN_CHAIN_TEXT = \"Broken Chain\"\n    const val FLAT_TIRES_TEXT = \"Flat tires\"\n    const val FAULTY_BRAKES_TEXT = \"Faulty Brakes\"\n\n\n    const val CONSTRUCTION = \"Construction\"\n    const val LANE_CLOSURE = \"Lane closure\"\n    const val CRASH = \"Crash\"\n    const val NEED_ASSISTANCE = \"Need Assistance\"\n    const val OBJECT_ON_ROAD = \"Object on Road\"\n    const val SLOWDOWN = \"Slowdown\"\n\n\n\n\n\n    const val HEADER_CACHE_CONTROL = \"Cache-Control\"\n    const val HEADER_PRAGMA = \"Pragma\"\n\n    const val SELECTION_RESCUER_TYPE = \"rescuer_type\"\n    const val SELECTION_RESCUEE_TYPE = \"rescuee_type\"\n\n    const val NEAREST_METERS = 70.00\n    const val DEFAULT_RADIUS = 7000.00\n    const val API_CALL_RETRY_COUNT: Long = 7\n\n\n    /*Map*/\n\n    const val DEFAULT_LOCATION_CIRCLE_PULSE_DURATION_MS = 2000f\n    const val DEFAULT_LOCATION_CIRCLE_PULSE_RADIUS = 50f\n\n    const val NUMBER_OF_STARS = 5\n    const val ROUTE_LAYER_ID = \"route-layer-id\"\n    const val ROUTE_SOURCE_ID = \"route-source-id\"\n    const val ICON_SOURCE_ID = \"icon-source-id\"\n    const val TRANSACTION_ICON_ID = \"red-pin-icon-id\"\n    const val ICON_LAYER_ID = \"icon-layer-id\"\n\n\n\n\n\n\n\n\n    const val KEY_HAZARDOUS_LANE_COLLECTION = \"hazardous_lanes\"\n    const val KEY_TIMESTAMP_FIELD = \"timestamp\"\n    const val KEY_MARKER_FIELD = \"marker\"\n\n    const val KEY_ID = \"id\"\n    const val KEY_DATE_POSTED = \"datePosted\"\n    const val KEY_ID_CREATOR = \"idCreator\"\n    const val KEY_ID_LABEL = \"label\"\n    const val KEY_ID_LONGITUDE = \"longitude\"\n    const val KEY_ID_LATITUDE = \"latitude\"\n\n\n\n    //location notification\n\n\n\n\n    //rescue notification\n    const val RESCUE_NOTIFICATION_ID = 102\n    const val RESCUE_NOTIFICATION_CHANNEL_ID = \"rescue_notification_channel_id\"\n    const val RESCUE_NOTIFICATION_CHANNEL_NAME = \"Rescue Confirmation\"\n    const val RESCUE_NOTIFICATION_CHANNEL_DESCRIPTION = \"Rescue Confirmation Notification\"\n\n\n\n    const val MAXIMUM_HAZARDOUS_MARKER = 3\n    const val MAPPING_URI = \"cyclistance://mapping/\"\n    const val ACTION = \"action\"\n    const val ACTION_OPEN_CONVERSATION = \"conversation\"\n    const val ACTION_OPEN_RESCUE_REQUEST = \"rescue_request\"\n    const val DEFAULT_ACTION = \"default_action\"\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt b/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt
--- a/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt	(revision 448d4f8f23001b3fda831b744e727cd292726c6e)
+++ b/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt	(date 1697633175880)
@@ -24,8 +24,8 @@
     const val CHARACTER_LIMIT = 110
     const val IMAGE_PLACEHOLDER_URL = "https://raw.githubusercontent.com/JohnDominicJasmin/JohnDominicJasmin/main/ic_empty_profile_placeholder.jpg"
 
-    const val LOCATION_UPDATES_INTERVAL: Long = 30000L
-    const val FASTEST_LOCATION_UPDATES_INTERVAL: Long = 20000L
+    const val LOCATION_UPDATES_INTERVAL: Long = 5000L
+    const val FASTEST_LOCATION_UPDATES_INTERVAL: Long = 3000L
 
     val BIKE_TYPE_KEY = stringPreferencesKey("bike_type")
     val ADDRESS_KEY = stringPreferencesKey("address")
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.os.Build\nimport android.view.WindowManager\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.MainViewModel\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.app.AppUtils\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ACTION_START_FOREGROUND\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ACTION_STOP_FOREGROUND\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_ACTION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.example.cyclistance.core.utils.contexts.shareLocation\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_authentication.domain.util.findActivity\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.event.EmergencyCallVmEvent\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    mainViewModel: MainViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val mainState by mainViewModel.state.collectAsStateWithLifecycle()\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(\n            initialValue = BottomSheetValue.Collapsed,\n            confirmStateChange = { false })\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    fun requestHelp() {\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(\n                onDisabled = settingResultRequest::launch,\n                onEnabled = {\n                    mappingViewModel.onEvent(\n                        event = MappingVmEvent.RequestHelp)\n\n                })\n        } else {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.RequestHelp)\n\n        }\n    }\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n\n                val buildLocationComponentActivationOptions =\n                    LocationComponentActivationOptions.builder(context, style)\n                        .locationComponentOptions(\n                            locationComponentOptions\n                                .changeToNormalPuckIcon(context)\n                                .pulseEnabled(pulsingEnabled)\n                                .build())\n                        .build()\n                mapboxMap?.locationComponent?.apply {\n                    activateLocationComponent(buildLocationComponentActivationOptions)\n                    isLocationComponentEnabled = userLocationAvailable\n                    cameraMode = CameraMode.NONE\n                    renderMode = RenderMode.NORMAL\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\n                                                               ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n        }\n    }\n\n\n\n\n\n    val onRequestHelp = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n\n    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(notificationPermissionVisible = visible)\n    }}\n\n    val respondToHelp = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val notificationLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission(),\n        onResult = {\n            if (uiState.mapSelectedRescuee == null) {\n                onRequestHelp()\n            } else {\n                respondToHelp()\n            }\n        }\n    )\n    val notificationPermissionState = rememberPermissionState(\n        permission = Manifest.permission.POST_NOTIFICATIONS\n    ) { permissionGranted ->\n        if (permissionGranted) {\n            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n        }\n\n    }\n\n    val startRequestingHelp = remember{{\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            notificationPermissionState.requestPermission(onGranted = {\n                notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n            }, onExplain = {\n                notificationPermissionDialogVisibility(true)\n            }, onDenied = {\n                onRequestHelp()\n            })\n        } else {\n            onRequestHelp()\n        }\n    }}\n\n    val openRescueResult = remember(state.rescuer) {\n        {\n            val rescuer = state.rescuer\n\n            navController.navigateScreen(route = Screens.RescueRecordNavigation.RescueResults.screenRoute)\n            mappingViewModel.onEvent(event = MappingVmEvent.RescuerArrived)\n            /*navController.navigateScreen(route = Screens.MappingNavigation.RescueResults.passArgument(\n                rescuerId = rescuer?.id ?: \"\",\n                rescuerName = rescuer?.name ?: \"\",\n                rescuerPhoto = rescuer?.profilePictureUrl?: \"\",\n            ))*/\n        }\n    }\n\n\n    val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not()) {\n                        return@getStyle\n                    }\n                    if (geometry.isEmpty()) {\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource!!.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap, uiState.routeDirection) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n\n\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(\n                            LOCATE_USER_ZOOM_LEVEL,\n                            point,\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\n\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val changeCameraMode = remember{{ mode: Int ->\n        mapboxMap?.locationComponent?.apply {\n            if (isLocationComponentActivated) {\n                cameraMode = mode\n            }\n        }\n    }}\n\n    val routeOverView = remember{{\n        changeCameraMode(CameraMode.TRACKING)\n\n    }}\n\n    val onLocateUserButton = remember(uiState.routeDirection){{\n        if(uiState.routeDirection != null) {\n            routeOverView()\n        }\n        onLocateUser()\n    }}\n\n    val recenterRoute = remember{{\n        changeCameraMode(CameraMode.TRACKING_GPS)\n    }}\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let {\n                val latitude = it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val cancelSearchingAssistance = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    DisposableEffect(key1 = true){\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target ?: LatLng(\n                 DEFAULT_LATITUDE,\n                 DEFAULT_LONGITUDE,\n            )\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(CameraState(\n                position = cameraCenter,\n                zoom = cameraZoom ?: 0.0\n            ))\n        }\n    }\n\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.Rescuee.name\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(route = Screens.MappingNavigation.Cancellation.passArgument(\n                cancellationType = selectionType,\n                transactionId = transactionId!!,\n                clientId = clientId!!))\n\n        }\n    }\n\n    val noInternetDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isNoInternetVisible = visibility\n        )\n    }}\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        state.getTransactionId().isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    fun getConversationSelectedId():String?{\n        val transaction = state.rescueTransaction\n        val rescueeId = transaction?.rescueeId\n        val rescuerId = transaction?.rescuerId\n        val userId = state.userId\n        val isUserRescuee = userId == rescueeId\n        val id = if(isUserRescuee) rescuerId else rescueeId\n        id ?: Toast.makeText(context, \"No current transaction\", Toast.LENGTH_SHORT).show()\n\n        return id\n    }\n\n    val onClickChatButton = remember(state.rescueTransaction, state.user.getRole()) {\n        {\n            getConversationSelectedId()?.let{id ->\n                navController.navigateScreen(\n                    route = Screens.MessagingNavigation.Conversation.passArgument(\n                        receiverMessageId = id)\n                )\n            }\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onRescueFinished = remember{{\n        mappingViewModel.onEvent(event = MappingVmEvent.RescueFinished)\n    }}\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val expandableFab = remember{{ expanded: Boolean ->\n        uiState = uiState.copy(\n            isFabExpanded = expanded\n        )\n    }}\n\n\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit){\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\n        if(isCurrentlyEditing){\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\n            return\n        }\n        if(uiState.bottomSheetType == BottomSheetType.SearchAssistance.type){\n            return\n        }\n        noMarkerCurrentlyEditing()\n    }\n\n\n    val onMapMarkerClick = remember {\n        { snippet: String, id: String ->\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\n                })\n            } else {\n                collapseBottomSheet()\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n            }\n        }\n    }\n\n    val hazardousLaneMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n    val onMapClick = remember {\n        {\n\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\n                collapseBottomSheet()\n            }\n\n            if(uiState.bottomSheetType == BottomSheetType.IncidentDescription.type){\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    collapseBottomSheet()\n                })\n            }\n            onDismissRescueeBanner()\n            expandableFab(false)\n\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        { latLng: LatLng ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                onDismissRescueeBanner()\n                expandableFab(false)\n                uiState = uiState.copy(\n                    lastLongPressedLocation = latLng,\n                    bottomSheetType = BottomSheetType.ReportIncident.type).also {\n                    expandBottomSheet()\n                }\n            })\n\n        }\n    }\n\n\n\n    val startRespondingToHelp = remember{{\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            notificationPermissionState.requestPermission(onGranted = {\n                notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n            }, onExplain = {\n                notificationPermissionDialogVisibility(true)\n            }, onDenied = {\n                respondToHelp()\n            })\n        } else {\n            respondToHelp()\n        }\n    }}\n\n\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val locationPermissionDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(locationPermissionDialogVisible = visibility)\n    }}\n\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        { incidentLabel: String ->\n            uiState.lastLongPressedLocation?.let { locationLatLng ->\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.ReportIncident(\n                        label = incidentLabel,\n                        latLng = locationLatLng,\n                        description = incidentDescription.text\n                    ))\n                uiState = uiState.copy(selectedIncidentLabel = \"\")\n                incidentDescription = TextFieldValue()\n            }\n        }\n    }\n\n    val emergencyCallDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(\n            isEmergencyCallDialogVisible = visible\n        )\n    }}\n\n    val changeAlertDialogState = remember{{ alertDialogState: AlertDialogState ->\n        uiState = uiState.copy(\n            alertDialogState = alertDialogState\n        )\n    }}\n\n    val rescueRequestDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueRequestDialogVisible = visibility\n        )\n    }}\n\n    val openSinoTrack = remember{{\n        navController.navigateScreen(Screens.MappingNavigation.SinoTrack.screenRoute)\n    }}\n\n    val openRescueResults = remember{{\n//        navController.navigateScreen(Screens.RescueRecordNavigation.RescueResults.screenRoute)\n    }}\n\n\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.AddEditEmergencyContact.screenRoute)\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location){{\n\n        val location = state.getCurrentLocation()\n\n        if(location == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            context.shareLocation(\n                latitude = location.latitude!!,\n                longitude = location.longitude!!\n            )\n        }\n    }}\n\n\n    val openMapTypeBottomSheet = remember{{\n        uiState = uiState.copy(\n            bottomSheetType = BottomSheetType.MapType.type\n        ).also {\n            expandBottomSheet()\n        }\n    }}\n\n    val closeMapTypeBottomSheet = remember{{\n        uiState = uiState.copy(\n            bottomSheetType = null\n        ).also {\n            collapseBottomSheet()\n        }\n    }}\n\n\n    val mapTypeBottomSheetVisibility = remember{{ visibility: Boolean ->\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            if(visibility){\n                openMapTypeBottomSheet()\n            }else{\n                closeMapTypeBottomSheet()\n            }\n        })\n    }}\n\n    val onSelectMapType = remember(key1 = state.userLocation){{ mapType: String ->\n        if(state.userLocation == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            mappingViewModel.onEvent(event = MappingVmEvent.SetMapType(mapType))\n        }\n    }}\n\n\n    val onChangeIncidentLabel = remember {\n        { incidentLabel: String ->\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\n        }\n    }\n\n    val onChangeIncidentDescription = remember {\n        { input: TextFieldValue ->\n            incidentDescription = input\n        }\n    }\n\n\n    val onClickDeleteIncident = remember{{\n\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = true\n        )\n\n    }}\n\n    val onClickEditIncidentDescription = remember{{ marker: HazardousLaneMarker ->\n        uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\n    }}\n\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker){{\n        mappingViewModel.onEvent(event = MappingVmEvent.DeleteHazardousLaneMarker(\n            id = uiState.selectedHazardousMarker!!.id\n        ))\n    }}\n\n    val discardChangesMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            discardHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n\n    val onDiscardMarkerChanges = remember{{\n        uiState = uiState.copy(currentlyEditingHazardousMarker = null)\n    }}\n\n    val onDismissIncidentDescriptionBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            collapseBottomSheet()\n        })\n    }}\n\n    val onCancelEditIncidentDescription = remember{{\n        checkIfHasEditingMarker(onDiscardMarkerChanges)\n    }}\n\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker){{ description: String, label: String ->\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.UpdateReportedIncident(\n                marker = uiState.currentlyEditingHazardousMarker!!.copy(description = description, label = label)\n            ))\n    }}\n\n    val onClickHazardousInfoGotIt = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\n        }\n    }\n\n    fun getRouteDirections(){\n        val rescueTransaction = state.rescueTransaction ?: return\n\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\n        val startingLatitude = rescueTransaction.getStartingLatitude()?: return\n        val destinationLongitude = rescueTransaction.getDestinationLongitude()?: return\n        val destinationLatitude = rescueTransaction.getDestinationLatitude()?: return\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n    }\n\n\n\n    val cancelSearchDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelSearchDialogVisible = visibility)\n    }}\n\n    val cancelOnGoingRescueDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\n    }}\n\n    fun notifyNewRescueRequest(message: String){\n        if(notificationPermissionState.status.isGranted && !AppUtils.isAppInForeground(context = context)){\n            mappingViewModel.onEvent(event = MappingVmEvent.NotifyNewRescueRequest(\n                message = message\n            ))\n        }\n    }\n\n    fun notifyRequestAccepted(message: String){\n        if(notificationPermissionState.status.isGranted && !AppUtils.isAppInForeground(context = context)){\n            mappingViewModel.onEvent(event = MappingVmEvent.NotifyRequestAccepted(\n                message = message\n            ))\n        }\n    }\n\n    val viewProfile = remember{{ id: String ->\n        navController.navigateScreen(Screens.UserProfileNavigation.UserProfile.passArgument(userId = id))\n    }}\n\n    val cancelRespondToHelp = remember(uiState.mapSelectedRescuee){{\n        uiState.mapSelectedRescuee?.userId?.let{ id ->\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRespondHelp(id = id))\n        }\n    }}\n\n\n\n\n\n\n\n\n\n\n\n\n    DisposableEffect(key1 = Unit) {\n        val window = context.findActivity()?.window\n        window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n        onDispose {\n            window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n        }\n    }\n\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n\n            cancelOnGoingRescueDialogVisibility(hasTransaction)\n            cancelSearchDialogVisibility(hasTransaction)\n\n            if(hasTransaction){\n               return@checkIfHasEditingMarker\n            }\n\n            if(uiState.searchingAssistance){\n               return@checkIfHasEditingMarker\n            }\n\n            collapseBottomSheet()\n        })\n    }\n\n    LaunchedEffect(state.user.userAssistance){\n\n        if(state.user.isUserNeedHelp() == true){\n\n            uiState = uiState.copy(\n                bottomSheetType = BottomSheetType.SearchAssistance.type,\n                searchingAssistance = true)\n                .also {\n                    expandBottomSheet()\n                }\n\n        }\n    }\n\n    LaunchedEffect(key1 = true){\n        emergencyViewModel.onEvent(event = EmergencyCallVmEvent.LoadDefaultContact)\n    }\n\n    LaunchedEffect(key1 = mainState.mappingIntentAction){\n\n        when(mainState.mappingIntentAction){\n            MappingConstants.ACTION_OPEN_CONVERSATION -> {\n                onClickChatButton()\n                mainViewModel.setIntentAction(DEFAULT_ACTION)\n            }\n            MappingConstants.ACTION_OPEN_RESCUE_REQUEST -> {\n                rescueRequestDialogVisibility(true)\n                mainViewModel.setIntentAction(DEFAULT_ACTION)\n            }\n        }\n    }\n\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap){\n        if (userLocationAvailable) {\n            val camera = cameraState\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n        }\n    }\n\n    LaunchedEffect(key1 = true){\n        mappingViewModel.eventFlow.distinctUntilChanged().collectLatest {\n            when(it){\n\n                is MappingEvent.NoInternetConnection -> {\n                   noInternetDialogVisibility(true)\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    Timber.v(\"Destination Reached\")\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.Rescuee.name) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction){\n        uiState = uiState.copy(\n            hasTransaction = hasTransaction\n        )\n    }\n    LaunchedEffect(key1 = isRescueCancelled){\n        uiState = uiState.copy(\n            isRescueCancelled = isRescueCancelled\n        )\n    }\n    LaunchedEffect(key1 = isNavigating){\n        uiState = uiState.copy(\n            isNavigating = isNavigating\n        )\n    }\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.collect { event ->\n            when (event) {\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    val location = state.userLocation!!\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\n                            latitude = location.latitude!!.toFloat(),\n                            longitude = location.longitude!!.toFloat()\n                        ))\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection,\n                        generateRouteFailed = false\n                    )\n                    context.startLocationServiceIntentAction(intentAction = ACTION_START_FOREGROUND)\n\n                }\n\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = false,\n                        requestHelpButtonVisible = true,\n                        searchingAssistance = false,\n                        routeDirection = null,\n                        mapSelectedRescuee = null,\n                    ).also {\n                        collapseBottomSheet()\n                    }\n                    onChangeNavigatingState(false)\n\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                        isRescueRequestDialogVisible = false\n                    ).also {\n                        expandBottomSheet()\n                        rescueRequestDialogVisibility(false)\n\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                            icon = R.raw.error\n                        ))\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(\n                        bottomSheetType = event.bottomSheetType,\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\n                        .also {\n                            expandBottomSheet()\n                        }\n                }\n\n                is MappingEvent.ReportIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.ReportIncidentSuccess -> {\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.IncidentDistanceTooFar -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Exceeds Reachable Distance\",\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.SelectHazardousLaneMarker -> {\n                    uiState = uiState.copy(\n                        selectedHazardousMarker = event.marker,\n                        bottomSheetType = BottomSheetType.IncidentDescription.type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\n                }\n\n                is MappingEvent.UpdateIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n                MappingEvent.UpdateIncidentSuccess -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Incident Updated\",\n                            description = \"The incident has been updated successfully\",\n                            icon = R.raw.success\n                        )\n                    )\n                    onDiscardMarkerChanges()\n                    collapseBottomSheet()\n                }\n\n                is MappingEvent.GenerateRouteNavigationFailed -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Failed to Generate Route\",\n                        description = \"Failed to generate route to the destination due to a connection error.\",\n                    ))\n                    uiState = uiState.copy(\n                        generateRouteFailed = true\n                    )\n                }\n\n                MappingEvent.CancelRespondSuccess -> {\n                    Toast.makeText(context, \"Respond Cancelled\", Toast.LENGTH_SHORT).show()\n                }\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = uiState.routeDirection?.geometry, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection\n\n        if (route == null) {\n            removeRouteDirection()\n            context.startLocationServiceIntentAction(intentAction = ACTION_STOP_FOREGROUND)\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n\n\n    LaunchedEffect(key1 = hasInternetConnection) {\n\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\n    }\n\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n    LaunchedEffect(\n        key1 = hasInternetConnection,\n        key2 = uiState.generateRouteFailed,\n        key3 = state.rescueTransaction?.route) {\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n        if(!uiState.generateRouteFailed){\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        hazardousLaneMarkers = hazardousMarkers,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        incidentDescription = incidentDescription,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> startRequestingHelp()\n                is MappingUiEvent.RespondToHelp -> startRespondingToHelp()\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(true)\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\n                is MappingUiEvent.RouteOverview -> routeOverView()\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.RescueFinished -> onRescueFinished()\n                is MappingUiEvent.LocationPermission ->  locationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n                is MappingUiEvent.MapTypeBottomSheet -> mapTypeBottomSheetVisibility(event.visibility)\n                is MappingUiEvent.OnSelectMapType -> onSelectMapType(event.mapType)\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(event.marker)\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(event.markerSnippet, event.markerId)\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(event.description, event.label)\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(event.visibility)\n                is MappingUiEvent.NotificationPermissionDialog ->  notificationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.NotifyRequestAccepted -> notifyRequestAccepted(message = event.message)\n                is MappingUiEvent.NotifyNewRescueRequest -> notifyNewRescueRequest( message = event.message)\n                MappingUiEvent.OpenSinoTrack -> openSinoTrack()\n                MappingUiEvent.OpenRescueResults -> openRescueResults()\n                is MappingUiEvent.ViewProfile -> viewProfile(event.id)\n                MappingUiEvent.CancelRespondHelp -> cancelRespondToHelp()\n            }\n        }\n    )\n\n}\n\n//on click cancel\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 448d4f8f23001b3fda831b744e727cd292726c6e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1697630154747)
@@ -1331,8 +1331,6 @@
     }
 
 
-
-
     MappingScreenContent(
         modifier = Modifier.padding(paddingValues),
         state = state,
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport com.example.cyclistance.R\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.theme.Black440\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport com.example.cyclistance.theme.Red900\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun BottomSheetOnGoingRescue(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit,\n    role: String,\n    onGoingRescueModel: OnGoingRescueModel,\n) {\n\n    val isRescuer = remember(role) {\n        role == Role.Rescuer.name\n    }\n\n    Card(\n        modifier = modifier\n            .fillMaxWidth()\n            .shadow(\n                elevation = 12.dp,\n                shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),\n        shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp),\n        backgroundColor = MaterialTheme.colors.surface) {\n\n\n        ConstraintLayout(\n            modifier = Modifier\n                .fillMaxWidth()) {\n\n            val (time, roundedButtonSection, distance, etaIcon, speedometer) = createRefs()\n\n            val etaAvailable by remember(onGoingRescueModel.estimatedTime) {\n                derivedStateOf {\n                    onGoingRescueModel.estimatedTime.isNotEmpty()\n                }\n            }\n\n\n\n            if (!etaAvailable) {\n\n                Text(\n                    text = \"Calculating estimated time of arrival...\",\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier.constrainAs(time) {\n                        top.linkTo(parent.top, margin = 12.dp)\n                        start.linkTo(parent.start)\n                        end.linkTo(parent.end)\n                    }\n                )\n\n            }\n\n            if (etaAvailable) {\n\n                if (isRescuer) {\n                    SpeedometerSection(\n                        modifier = Modifier.constrainAs(speedometer) {\n                            top.linkTo(parent.top, margin = 4.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                        },\n                        currentSpeed = onGoingRescueModel.currentSpeed,\n                        distance = onGoingRescueModel.ridingDistance,\n                        maxSpeed = onGoingRescueModel.maxSpeed,\n                    )\n                }\n\n                Text(\n                    text = onGoingRescueModel.estimatedTime,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(time) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else parent.top,\n                                margin = 12.dp)\n                            end.linkTo(etaIcon.start)\n                        }\n                )\n\n\n                Image(\n                    painter = painterResource(id = R.drawable.ic_eta),\n                    contentDescription = \"ETA\",\n                    modifier = Modifier\n                        .size(20.dp)\n                        .constrainAs(etaIcon) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else parent.top,\n                                margin = 12.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                            this.centerHorizontallyTo(parent)\n                        }\n                )\n\n\n                Text(\n                    text = onGoingRescueModel.estimatedDistance,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(distance) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else parent.top,\n                                margin = 12.dp,\n                            )\n                            start.linkTo(etaIcon.end)\n                        }\n                )\n            }\n\n\n            RoundButtonSection(\n                modifier = Modifier.constrainAs(roundedButtonSection) {\n                    val anchor = if (etaAvailable) etaIcon else time\n                    top.linkTo(anchor.bottom, margin = 10.dp)\n                    end.linkTo(parent.end)\n                    start.linkTo(parent.start)\n                    bottom.linkTo(parent.bottom, margin = 10.dp)\n                },\n                onClickCallButton = onClickCallButton,\n                onClickChatButton = onClickChatButton,\n                onClickCancelButton = onClickCancelButton)\n\n\n        }\n    }\n}\n\n\n@Composable\nfun SpeedometerSection(\n    modifier: Modifier = Modifier,\n    currentSpeed: String,\n    distance: String,\n    maxSpeed: String) {\n\n    Column(\n        modifier = modifier.padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n\n        Text(\n            text = \"Current Speed\",\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize),\n            color = MaterialTheme.colors.onSurface,\n            modifier = Modifier.padding(vertical = 1.dp))\n\n        Text(color = MaterialTheme.colors.onSurface, text = buildAnnotatedString {\n            withStyle(\n                style = SpanStyle(\n                    fontSize = MaterialTheme.typography.subtitle1.fontSize,\n                    fontWeight = FontWeight.Medium)) {\n                append(currentSpeed)\n            }\n            withStyle(style = SpanStyle(fontSize = MaterialTheme.typography.overline.fontSize)) {\n                append(\" km/h\")\n            }\n        }, style = MaterialTheme.typography.subtitle1, modifier = Modifier.padding(vertical = 1.dp))\n\n\n        Column(\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally,\n            modifier = Modifier\n                .padding(vertical = 4.dp)\n                .fillMaxWidth()) {\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n\n            Row(\n                modifier = Modifier\n                    .height(IntrinsicSize.Max)\n                    .fillMaxWidth(),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.SpaceEvenly) {\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Travelled Distance\",\n                    content = distance)\n\n                Divider(\n                    color = Black440, modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp))\n\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Max Speed\",\n                    content = maxSpeed)\n            }\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n        }\n    }\n}\n\n@Composable\nfun RowScope.ItemSpeed(modifier: Modifier, title: String, content: String) {\n    Column(\n        modifier = modifier\n            .padding(vertical = 4.dp)\n            .weight(0.3f),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center) {\n        Text(\n            text = title,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize))\n\n        Text(\n            text = content,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle1.copy(\n                fontWeight = FontWeight.Medium,\n                fontSize = MaterialTheme.typography.button.fontSize))\n    }\n}\n\n@Composable\nprivate fun RoundButtonSection(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit) {\n\n\n    Row(\n        modifier = modifier\n            .background(Color.Transparent)\n            .fillMaxWidth(),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.Center) {\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_call,\n            buttonSubtitle = \"Emergency Call\", onClick = onClickCallButton)\n\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_chat,\n            buttonSubtitle = \"Chat\", onClick = onClickChatButton)\n\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = Red900,\n            contentColor = Color.White,\n            imageId = R.drawable.ic_cancel_1,\n            buttonSubtitle = \"Cancel\", onClick = onClickCancelButton)\n    }\n}\n\n\n\n@Composable\nprivate fun RoundedButtonItem(\n    modifier: Modifier = Modifier,\n    backgroundColor: Color,\n    contentColor: Color,\n    imageId: Int,\n    buttonSubtitle: String,\n    onClick: () -> Unit) {\n\n    Column(\n        modifier = modifier\n            .wrapContentSize().padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.spacedBy(\n            space = 7.dp,\n            alignment = Alignment.CenterVertically),\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n        Button(\n            modifier = Modifier\n                .size(48.dp)\n                .shadow(elevation = 2.dp, shape = CircleShape),\n            onClick = onClick,\n            shape = CircleShape,\n            colors = ButtonDefaults.buttonColors(\n                backgroundColor = backgroundColor,\n                contentColor = contentColor)) {\n\n            Icon(\n                painter = painterResource(id = imageId),\n                contentDescription = null, modifier = Modifier.fillMaxSize())\n        }\n\n        Text(\n            text = buttonSubtitle,\n            color = Black440,\n            style = MaterialTheme.typography.caption,\n            textAlign = TextAlign.Center)\n    }\n}\n\n\n\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueDark() {\n\n    CyclistanceTheme(true) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.Rescuer.name)\n        }\n    }\n}\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueLight() {\n\n    CyclistanceTheme(false) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n\n\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.Rescuee.name)\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(revision 448d4f8f23001b3fda831b744e727cd292726c6e)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(date 1697633514694)
@@ -59,7 +59,7 @@
             modifier = Modifier
                 .fillMaxWidth()) {
 
-            val (time, roundedButtonSection, distance, etaIcon, speedometer) = createRefs()
+            val (time, roundedButtonSection, distance, etaIcon, speedometer, grip) = createRefs()
 
             val etaAvailable by remember(onGoingRescueModel.estimatedTime) {
                 derivedStateOf {
@@ -67,7 +67,17 @@
                 }
             }
 
-
+            Divider(
+                modifier = Modifier
+                    .fillMaxWidth(0.1f)
+                    .padding(vertical = 4.dp)
+                    .constrainAs(grip) {
+                        top.linkTo(parent.top, margin = 4.dp)
+                        end.linkTo(parent.end)
+                        start.linkTo(parent.start)
+                    },
+                thickness = 1.dp, color = MaterialTheme.colors.primary
+            )
 
             if (!etaAvailable) {
 
@@ -76,7 +86,7 @@
                     color = MaterialTheme.colors.onSurface,
                     style = MaterialTheme.typography.subtitle2,
                     modifier = Modifier.constrainAs(time) {
-                        top.linkTo(parent.top, margin = 12.dp)
+                        top.linkTo(grip.bottom, margin = 12.dp)
                         start.linkTo(parent.start)
                         end.linkTo(parent.end)
                     }
@@ -89,7 +99,7 @@
                 if (isRescuer) {
                     SpeedometerSection(
                         modifier = Modifier.constrainAs(speedometer) {
-                            top.linkTo(parent.top, margin = 4.dp)
+                            top.linkTo(grip.bottom)
                             start.linkTo(parent.start)
                             end.linkTo(parent.end)
                         },
@@ -107,8 +117,8 @@
                         .padding(horizontal = 12.dp)
                         .constrainAs(time) {
                             top.linkTo(
-                                if (isRescuer) speedometer.bottom else parent.top,
-                                margin = 12.dp)
+                                if (isRescuer) speedometer.bottom else grip.bottom,
+                                margin = 4.dp)
                             end.linkTo(etaIcon.start)
                         }
                 )
@@ -121,8 +131,8 @@
                         .size(20.dp)
                         .constrainAs(etaIcon) {
                             top.linkTo(
-                                if (isRescuer) speedometer.bottom else parent.top,
-                                margin = 12.dp)
+                                if (isRescuer) speedometer.bottom else grip.bottom,
+                                margin = 4.dp)
                             start.linkTo(parent.start)
                             end.linkTo(parent.end)
                             this.centerHorizontallyTo(parent)
@@ -138,8 +148,8 @@
                         .padding(horizontal = 12.dp)
                         .constrainAs(distance) {
                             top.linkTo(
-                                if (isRescuer) speedometer.bottom else parent.top,
-                                margin = 12.dp,
+                                if (isRescuer) speedometer.bottom else grip.bottom,
+                                margin = 4.dp,
                             )
                             start.linkTo(etaIcon.end)
                         }
@@ -150,7 +160,7 @@
             RoundButtonSection(
                 modifier = Modifier.constrainAs(roundedButtonSection) {
                     val anchor = if (etaAvailable) etaIcon else time
-                    top.linkTo(anchor.bottom, margin = 10.dp)
+                    top.linkTo(anchor.bottom, margin = 6.dp)
                     end.linkTo(parent.end)
                     start.linkTo(parent.start)
                     bottom.linkTo(parent.bottom, margin = 10.dp)
@@ -314,7 +324,6 @@
 }
 
 
-
 @Composable
 private fun RoundedButtonItem(
     modifier: Modifier = Modifier,
@@ -326,7 +335,8 @@
 
     Column(
         modifier = modifier
-            .wrapContentSize().padding(vertical = 4.dp),
+            .wrapContentSize()
+            .padding(vertical = 4.dp),
         verticalArrangement = Arrangement.spacedBy(
             space = 7.dp,
             alignment = Alignment.CenterVertically),
@@ -356,39 +366,60 @@
 }
 
 
-
-
-
 @OptIn(ExperimentalMaterialApi::class)
 @Preview(name = "BottomSheetOnGoingRescue", device = "id:Galaxy Nexus")
 @Composable
 private fun PreviewBottomSheetOnGoingRescueDark() {
 
     CyclistanceTheme(true) {
-        Box(
-            contentAlignment = Alignment.BottomCenter,
-            modifier = Modifier
-                .fillMaxSize()
-                .background(MaterialTheme.colors.background)) {
-            BottomSheetOnGoingRescue(
-                onClickCancelButton = {},
-                onClickCallButton = {},
-                onClickChatButton = {},
-                onGoingRescueModel = OnGoingRescueModel(
-                    currentSpeed = "13.3",
-                    ridingDistance = "10.0 km",
-                    maxSpeed = "36 km/h",
-                    estimatedDistance = "9.0 km",
-                    estimatedTime = "1h 20m",
-                ),
-                role = Role.Rescuer.name)
+
+        val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(
+            bottomSheetState = rememberBottomSheetState(
+                initialValue = BottomSheetValue.Expanded,
+                confirmStateChange = { false })
+        )
+
+        Box {
+
+            MappingBottomSheet(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(horizontal = 12.dp)
+                    .align(Alignment.BottomCenter),
+                bottomSheetScaffoldState = bottomSheetScaffoldState,
+                sheetGesturesEnabled = true,
+                sheetPeekHeight = 55.dp,
+                sheetContent = {
+                    BottomSheetOnGoingRescue(
+                        onClickCancelButton = {},
+                        onClickCallButton = {},
+                        onClickChatButton = {},
+                        onGoingRescueModel = OnGoingRescueModel(
+                            currentSpeed = "13.3",
+                            ridingDistance = "10.0 km",
+                            maxSpeed = "36 km/h",
+                            estimatedDistance = "9.0 km",
+                            estimatedTime = "1h 20m",
+                        ),
+                        role = Role.Rescuer.name)
+                }, content = {
+                    Box(
+                        contentAlignment = Alignment.BottomCenter,
+                        modifier = Modifier
+                            .fillMaxSize()
+                            .background(MaterialTheme.colors.background)) {
+
+                    }
+                })
+
         }
+
+
     }
 }
 
 
-@OptIn(ExperimentalMaterialApi::class)
-@Preview(name = "BottomSheetOnGoingRescue", device = "id:Galaxy Nexus")
+@Preview(name = "BottomSheetOnGoingRescue", device = "id:Nexus 5")
 @Composable
 private fun PreviewBottomSheetOnGoingRescueLight() {
 
