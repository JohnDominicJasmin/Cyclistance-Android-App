Index: app/src/main/java/com/example/cyclistance/navigation/NavScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.navigation\n\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.compose.animation.*\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.compose.currentBackStackEntryAsState\nimport androidx.navigation.compose.rememberNavController\nimport com.example.cyclistance.core.utils.composable_utils.ComposableLifecycle\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.BOTTOM_SHEET_TYPE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.CANCELLATION_TYPE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.CLIENT_ID\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.TRANSACTION_ID\nimport com.example.cyclistance.feature_authentication.domain.util.findActivity\nimport com.example.cyclistance.feature_mapping.data.local.network_observer.NetworkConnectivityChecker\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.MappingViewModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.DefaultTopBar\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.MappingDrawerContent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.TitleTopAppBar\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.TopAppBarCreator\nimport com.example.cyclistance.feature_settings.presentation.setting_edit_profile.EditProfileViewModel\nimport com.example.cyclistance.feature_settings.presentation.setting_edit_profile.event.EditProfileEvent\nimport com.example.cyclistance.feature_settings.presentation.setting_edit_profile.event.EditProfileVmEvent\nimport com.example.cyclistance.feature_settings.presentation.setting_screen.SettingEvent\nimport com.example.cyclistance.feature_settings.presentation.setting_screen.SettingUiEvent\nimport com.example.cyclistance.feature_settings.presentation.setting_screen.SettingViewModel\nimport com.example.cyclistance.navigation.state.NavUiState\nimport com.example.cyclistance.theme.Black900\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport com.example.cyclistance.theme.White50\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalPermissionsApi::class)\n@Composable\nfun NavScreen(\n    settingViewModel: SettingViewModel = hiltViewModel(),\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    navViewModel: NavViewModel = hiltViewModel(),\n    editProfileViewModel: EditProfileViewModel = hiltViewModel()\n) {\n\n\n    var navUiState by rememberSaveable { mutableStateOf(NavUiState()) }\n    val navController = rememberNavController()\n    val context = LocalContext.current\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\n    val scaffoldState = rememberScaffoldState(drawerState = rememberDrawerState(initialValue = DrawerValue.Closed))\n    val coroutineScope = rememberCoroutineScope()\n    val mappingState by mappingViewModel.state.collectAsStateWithLifecycle()\n    val settingState by settingViewModel.state.collectAsStateWithLifecycle()\n    val navState by navViewModel.state.collectAsStateWithLifecycle()\n    val lifecycleOwner = LocalLifecycleOwner.current\n\n    val onChangeNavigatingState = remember {\n        { navigating: Boolean ->\n            navUiState = navUiState.copy(\n                isNavigating = navigating\n            )\n        }\n    }\n\n\n    BackHandler(enabled = true, onBack = {\n        coroutineScope.launch {\n\n            if (scaffoldState.drawerState.isOpen) {\n                scaffoldState.drawerState.close()\n                return@launch\n            }\n\n            context.findActivity()?.finish()\n        }\n    })\n\n    ComposableLifecycle { _, event ->\n        when (event) {\n            Lifecycle.Event.ON_CREATE -> {\n                NetworkConnectivityChecker.observe(lifecycleOwner) { isConnected ->\n                    isConnected?.let {\n                        navUiState = navUiState.copy(internetAvailable = isConnected)\n                    }\n                }\n            }\n\n            Lifecycle.Event.ON_RESUME -> {\n                NetworkConnectivityChecker.checkForConnection()\n            }\n\n            else -> {}\n        }\n\n    }\n\n\n\n    LaunchedEffect(key1 = true) {\n\n        editProfileViewModel.eventFlow.distinctUntilChanged().collect{ event ->\n            when (event) {\n                is EditProfileEvent.GetNameSuccess -> {\n                    navUiState = navUiState.copy(name = event.name)\n                }\n\n                is EditProfileEvent.GetPhotoUrlSuccess -> {\n                    navUiState = navUiState.copy(photoUrl = event.photoUrl)\n                }\n\n                else -> {}\n            }\n        }\n    }\n\n    LaunchedEffect(key1 = true) {\n\n        settingViewModel.eventFlow.collectLatest { event ->\n            when (event) {\n\n                is SettingUiEvent.SignOutSuccess -> {\n                    navController.popBackStack()\n                    navController.navigate(Screens.SignInScreen.route)\n                }\n\n                is SettingUiEvent.SignOutFailed -> {\n                    Toast.makeText(context, \"Failed to Sign out account\", Toast.LENGTH_SHORT).show()\n                }\n\n            }\n        }\n    }\n\n\n    val onClickSettings = remember {\n        {\n            coroutineScope.launch {\n                scaffoldState.drawerState.close()\n            }\n            navController.navigateScreen(\n                Screens.SettingScreen.route)\n        }\n    }\n\n    val onClickRescueRequest = remember(scaffoldState.drawerState) {\n        {\n            coroutineScope.launch {\n                scaffoldState.drawerState.close()\n            }\n            navController.navigateScreen(\n                Screens.RescueRequestScreen.route)\n        }\n    }\n\n    val onClickChat = remember {\n        {\n            coroutineScope.launch {\n                scaffoldState.drawerState.close()\n            }\n            Unit\n        }\n    }\n\n    val onClickSignOut = remember {\n        {\n            coroutineScope.launch {\n                scaffoldState.drawerState.close()\n            }\n            settingViewModel.onEvent(event = SettingEvent.SignOut)\n        }\n    }\n\n    val onToggleTheme = remember {\n        {\n            settingViewModel.onEvent(event = SettingEvent.ToggleTheme)\n        }\n    }\n\n    val onClickArrowBackIcon = remember {\n        {\n            navController.popBackStack()\n            Unit\n        }\n    }\n\n    val onClickMenuIcon = remember {\n        {\n            editProfileViewModel.onEvent(event = EditProfileVmEvent.LoadProfile)\n            coroutineScope.launch {\n                scaffoldState.drawerState.open()\n            }\n            Unit\n        }\n    }\n\n    val respondentCount by remember(mappingState.newRescueRequest?.request?.size) {\n        derivedStateOf { (mappingState.newRescueRequest?.request ?: emptyList()).size }\n    }\n\n\n    CyclistanceTheme(darkTheme = settingState.isDarkTheme) {\n\n        Surface(\n            modifier = Modifier.fillMaxSize()) {\n\n            Scaffold(\n                drawerGesturesEnabled = scaffoldState.drawerState.isOpen,\n                scaffoldState = scaffoldState,\n                topBar = {\n                    Column {\n\n                        TopAppBar(\n                            route = navBackStackEntry?.destination?.route,\n                            onClickMenuIcon = onClickMenuIcon,\n                            onClickArrowBackIcon = onClickArrowBackIcon,\n                            isNavigating = navUiState.isNavigating)\n\n                        NoInternetStatusBar(\n                            navUiState.internetAvailable,\n                            navBackStackEntry?.destination?.route)\n\n                    }\n                },\n                drawerContent = {\n                    MappingDrawerContent(\n                        respondentCount = respondentCount,\n                        onClickSettings = onClickSettings,\n                        onClickRescueRequest = onClickRescueRequest,\n                        onClickChat = onClickChat,\n                        onClickSignOut = onClickSignOut,\n                        uiState = navUiState\n                    )\n                },\n            ) { paddingValues ->\n                navState.navigationStartingDestination?.let {\n                    NavGraph(\n                        hasInternetConnection = navUiState.internetAvailable,\n                        navController = navController,\n                        paddingValues = paddingValues,\n                        isDarkTheme = settingState.isDarkTheme,\n                        mappingViewModel = mappingViewModel,\n                        onChangeNavigatingState = onChangeNavigatingState,\n                        onToggleTheme = onToggleTheme,\n                        isNavigating = navUiState.isNavigating,\n                        startingDestination = it\n                    )\n                }\n            }\n        }\n    }\n\n}\n\n@Composable\nprivate fun TopAppBar(\n    onClickArrowBackIcon: () -> Unit = {},\n    onClickMenuIcon: () -> Unit = {},\n    isNavigating: Boolean,\n    route: String?) {\n\n    when (route) {\n        Screens.MappingScreen.route + \"?$BOTTOM_SHEET_TYPE={$BOTTOM_SHEET_TYPE}\" -> {\n            AnimatedVisibility(\n                visible = isNavigating.not(),\n                enter = fadeIn(initialAlpha = 0.4f),\n                exit = fadeOut(animationSpec = tween(durationMillis = 100))) {\n\n                DefaultTopBar(onClickIcon = onClickMenuIcon)\n            }\n        }\n\n        \"${Screens.CancellationScreen.route}/{$CANCELLATION_TYPE}/{$TRANSACTION_ID}/{$CLIENT_ID}\" -> {\n            TopAppBarCreator(\n                icon = Icons.Default.ArrowBack,\n                onClickIcon = onClickArrowBackIcon,\n                topAppBarTitle = {\n                    TitleTopAppBar(title = \"Cancellation Reason\")\n                })\n        }\n\n        Screens.ConfirmDetailsScreen.route + \"?$LATITUDE={$LATITUDE}&$LONGITUDE={$LONGITUDE}\" -> {\n            TopAppBarCreator(\n                icon = Icons.Default.ArrowBack,\n                onClickIcon = onClickArrowBackIcon,\n                topAppBarTitle = {\n                    TitleTopAppBar(\n                        title = \"Confirmation Details\")\n                })\n        }\n\n\n        Screens.RescueRequestScreen.route -> {\n            TopAppBarCreator(\n                icon = Icons.Default.ArrowBack,\n                onClickIcon = onClickArrowBackIcon,\n                topAppBarTitle = {\n                    TitleTopAppBar(title = \"Rescue Requests\")\n                })\n        }\n\n        Screens.ChangePasswordScreen.route -> {\n            TopAppBarCreator(\n                icon = Icons.Default.ArrowBack,\n                onClickIcon = onClickArrowBackIcon,\n                topAppBarTitle = {\n                    TitleTopAppBar(title = \"Change Password\")\n                })\n        }\n\n        Screens.EditProfileScreen.route -> {\n            TopAppBarCreator(\n                icon = Icons.Default.ArrowBack,\n                onClickIcon = onClickArrowBackIcon,\n                topAppBarTitle = {\n                    TitleTopAppBar(title = \"Edit Profile\")\n                })\n        }\n\n        Screens.SettingScreen.route -> {\n            TopAppBarCreator(\n                icon = Icons.Default.ArrowBack,\n                onClickIcon = onClickArrowBackIcon,\n                topAppBarTitle = {\n                    TitleTopAppBar(title = \"Setting Screen\")\n                })\n        }\n    }\n\n}\n\n\n@Composable\nprivate fun NoInternetStatusBar(internetAvailable: Boolean, route: String?) {\n\n    val inShowableScreens =\n        route != Screens.SettingScreen.route && route != Screens.IntroSliderScreen.route\n\n    AnimatedVisibility(\n        visible = internetAvailable.not() && inShowableScreens,\n        enter = slideInVertically(),\n        exit = slideOutVertically()) {\n        Box(\n            contentAlignment = Alignment.Center,\n            modifier = Modifier\n                .background(Black900)\n                .fillMaxWidth()) {\n\n            Text(\n                text = \"No Connection\",\n                color = White50,\n                style = MaterialTheme.typography.body2,\n                modifier = Modifier.padding(vertical = 1.5.dp))\n        }\n    }\n\n}\n\n\n@Preview\n@Composable\nfun TopAppBarPreview() {\n    CyclistanceTheme(true) {\n        TopAppBar(\n            route = Screens.EditProfileScreen.route,\n            isNavigating = false)\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/navigation/NavScreen.kt b/app/src/main/java/com/example/cyclistance/navigation/NavScreen.kt
--- a/app/src/main/java/com/example/cyclistance/navigation/NavScreen.kt	(revision eca498fe54b0d0e16ddf02ce5f3f38246121e7f0)
+++ b/app/src/main/java/com/example/cyclistance/navigation/NavScreen.kt	(date 1685446859005)
@@ -159,7 +159,7 @@
             coroutineScope.launch {
                 scaffoldState.drawerState.close()
             }
-            navController.navigateScreen(
+            navController.navigate(
                 Screens.SettingScreen.route)
         }
     }
@@ -169,7 +169,7 @@
             coroutineScope.launch {
                 scaffoldState.drawerState.close()
             }
-            navController.navigateScreen(
+            navController.navigate(
                 Screens.RescueRequestScreen.route)
         }
     }
Index: app/src/main/java/com/example/cyclistance/feature_settings/presentation/setting_screen/SettingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_settings.presentation.setting_screen\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport com.example.cyclistance.R\nimport com.example.cyclistance.feature_settings.presentation.setting_screen.components.SectionTitle\nimport com.example.cyclistance.feature_settings.presentation.setting_screen.components.SettingSwitchButton\nimport com.example.cyclistance.feature_settings.presentation.setting_screen.components.SettingsButtonItem\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.navigateScreen\nimport com.example.cyclistance.theme.CyclistanceTheme\n\n@Composable\nfun SettingScreen(\n    isDarkTheme: Boolean,\n    onToggleTheme: () -> Unit,\n    paddingValues: PaddingValues,\n    navController: NavController) {\n\n\n    SettingScreenContent(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(paddingValues),\n        isDarkTheme = isDarkTheme,\n        onToggleTheme = onToggleTheme,\n        onClickEditProfile = {\n            navController.navigateScreen(Screens.EditProfileScreen.route)\n        }\n    )\n\n}\n\n@Composable\nfun SettingScreenContent(\n    modifier: Modifier = Modifier,\n    isDarkTheme: Boolean = false,\n    onToggleTheme: () -> Unit = {},\n    onClickEditProfile: () -> Unit = {}) {\n\n    Surface(modifier = modifier, color = MaterialTheme.colors.background) {\n\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            verticalArrangement = Arrangement.Top,\n            horizontalAlignment = Alignment.CenterHorizontally) {\n\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth(0.9f)\n                    .padding(top = 30.dp),\n                verticalArrangement = Arrangement.spacedBy(3.dp)) {\n\n                SectionTitle(iconId = R.drawable.ic_baseline_brush_24, title = \"Preference\")\n                SettingSwitchButton(\n                    checkedState = isDarkTheme,\n                    onCheckedChange = { onToggleTheme() },\n                    onClick = onToggleTheme)\n\n\n            }\n\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth(0.9f)\n                    .padding(top = 30.dp),\n                verticalArrangement = Arrangement.spacedBy(3.dp)) {\n\n\n                SectionTitle(iconId = R.drawable.ic_baseline_person_24, title = \"Account\")\n                SettingsButtonItem(buttonText = \"Edit Profile\", onClick = onClickEditProfile)\n\n            }\n\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth(0.9f)\n                    .padding(top = 30.dp),\n                verticalArrangement = Arrangement.spacedBy(3.dp)) {\n\n                SectionTitle(\n                    iconId = R.drawable.ic_baseline_settings_suggest_24,\n                    title = \"Other Settings\")\n\n                SettingsButtonItem(buttonText = \"Privacy Policy\", onClick = {\n\n                })\n                SettingsButtonItem(buttonText = \"Rate this app\", onClick = {\n\n                })\n\n\n            }\n        }\n\n    }\n}\n\n@Preview\n@Composable\nfun SettingScreenPreview() {\n    CyclistanceTheme(true) {\n        val navController = rememberNavController()\n        SettingScreen(\n            isDarkTheme = true,\n            onToggleTheme = {},\n            navController = navController,\n            paddingValues = PaddingValues())\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_settings/presentation/setting_screen/SettingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_settings/presentation/setting_screen/SettingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_settings/presentation/setting_screen/SettingScreen.kt	(revision eca498fe54b0d0e16ddf02ce5f3f38246121e7f0)
+++ b/app/src/main/java/com/example/cyclistance/feature_settings/presentation/setting_screen/SettingScreen.kt	(date 1685446753289)
@@ -20,7 +20,6 @@
 import com.example.cyclistance.feature_settings.presentation.setting_screen.components.SettingSwitchButton
 import com.example.cyclistance.feature_settings.presentation.setting_screen.components.SettingsButtonItem
 import com.example.cyclistance.navigation.Screens
-import com.example.cyclistance.navigation.navigateScreen
 import com.example.cyclistance.theme.CyclistanceTheme
 
 @Composable
@@ -38,7 +37,7 @@
         isDarkTheme = isDarkTheme,
         onToggleTheme = onToggleTheme,
         onClickEditProfile = {
-            navController.navigateScreen(Screens.EditProfileScreen.route)
+            navController.navigate(Screens.EditProfileScreen.route)
         }
     )
 
