Index: app/src/main/java/com/example/cyclistance/core/utils/permissions/MultiplePermission.kt
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/core/utils/permissions/MultiplePermission.kt b/app/src/main/java/com/example/cyclistance/core/utils/permissions/MultiplePermission.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/cyclistance/core/utils/permissions/MultiplePermission.kt	(revision 06e8b0051980f375edcc52ee3d3ef1769eedaf99)
+++ /dev/null	(revision 06e8b0051980f375edcc52ee3d3ef1769eedaf99)
@@ -1,54 +0,0 @@
-package com.example.cyclistance.core.utils.permissions
-
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import com.google.accompanist.permissions.*
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.setValue
-
-@ExperimentalPermissionsApi
-@Composable
-fun RequestMultiplePermissions(
-    multiplePermissionsState: MultiplePermissionsState,
-    deniedMessage: String = "Give this app a permission to proceed.",
-    rationaleMessage: String = "To use this app's functionalities, you need to give us the permission.",
-    onPermissionGranted:  () -> Unit = {}
-) {
-
-    HandleRequests(
-        multiplePermissionsState = multiplePermissionsState,
-        deniedContent = { shouldShowRationale ->
-            PermissionDeniedContent(
-                deniedMessage = deniedMessage,
-                rationaleMessage = rationaleMessage,
-                shouldShowRationale = shouldShowRationale,
-                onRequestPermission = {
-                    multiplePermissionsState.launchMultiplePermissionRequest()
-                }
-            )
-        },
-        onPermissionGranted = onPermissionGranted
-    )
-}
-
-@ExperimentalPermissionsApi
-@Composable
-private fun HandleRequests(
-    multiplePermissionsState: MultiplePermissionsState,
-    deniedContent: @Composable (Boolean) -> Unit,
-    onPermissionGranted: () -> Unit
-) {
-    var shouldShowRationale by remember { mutableStateOf(false) }
-    val result = remember(multiplePermissionsState.permissions) {
-        multiplePermissionsState.permissions.all {
-            shouldShowRationale = it.status.shouldShowRationale
-            it.status == PermissionStatus.Granted
-        }
-    }
-    if (result) {
-        onPermissionGranted()
-    } else {
-        deniedContent(shouldShowRationale)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/core/utils/permissions/SinglePermission.kt
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/core/utils/permissions/SinglePermission.kt b/app/src/main/java/com/example/cyclistance/core/utils/permissions/SinglePermission.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/cyclistance/core/utils/permissions/SinglePermission.kt	(revision 06e8b0051980f375edcc52ee3d3ef1769eedaf99)
+++ /dev/null	(revision 06e8b0051980f375edcc52ee3d3ef1769eedaf99)
@@ -1,118 +0,0 @@
-package com.example.cyclistance.core.utils.permissions
-
-import androidx.compose.material.AlertDialog
-import androidx.compose.material.Button
-import androidx.compose.material.MaterialTheme
-import androidx.compose.material.Text
-import androidx.compose.runtime.*
-import androidx.compose.ui.text.TextStyle
-import androidx.compose.ui.text.font.FontWeight
-import com.google.accompanist.permissions.*
-
-@ExperimentalPermissionsApi
-@Composable
-fun RequestSinglePermission(
-    permissionState: PermissionState,
-    deniedMessage: String = "Give this app a permission to proceed.",
-    rationaleMessage: String = "To use this app's functionalities, you need to give us the permission.",
-    onPermissionGranted:  () -> Unit
-) {
-
-
-    HandleRequest(
-        permissionState = permissionState,
-        deniedContent = { shouldShowRationale ->
-            PermissionDeniedContent(
-                deniedMessage = deniedMessage,
-                rationaleMessage = rationaleMessage,
-                shouldShowRationale = shouldShowRationale,
-                onRequestPermission = {
-                    permissionState.launchPermissionRequest()
-                }
-            )
-        },
-        onPermissionGranted = onPermissionGranted
-    )
-}
-
-@ExperimentalPermissionsApi
-@Composable
-private fun HandleRequest(
-    permissionState: PermissionState,
-    deniedContent: @Composable (Boolean) -> Unit,
-    onPermissionGranted: () -> Unit
-) {
-
-    when (permissionState.status) {
-        is PermissionStatus.Granted -> {
-            onPermissionGranted()
-        }
-        is PermissionStatus.Denied -> {
-         deniedContent(permissionState.status.shouldShowRationale)
-        }
-    }
-}
-
-
-
-@ExperimentalPermissionsApi
-@Composable
-fun PermissionDeniedContent(
-    deniedMessage: String,
-    rationaleMessage: String,
-    shouldShowRationale: Boolean,
-    onRequestPermission: () -> Unit
-) {
-
-
-    if (shouldShowRationale) {
-
-        CustomAlertDialog(
-            description = rationaleMessage,
-            title = "Permission Request",
-            buttonText = "Give Permission",
-            onClickButton = onRequestPermission)
-    }else {
-
-        CustomAlertDialog(
-            description = deniedMessage,
-            title = "Permission is Required",
-            buttonText = "Ok",
-            onClickButton = onRequestPermission)
-    }
-}
-@Composable
-fun CustomAlertDialog(
-    description: String,
-    title:String,
-    buttonText:String,
-    onClickButton: () -> Unit
-) {
-    var alertDialogState by remember { mutableStateOf(true) }
-
-    if (alertDialogState) {
-        AlertDialog(
-            onDismissRequest = { alertDialogState = false },
-            title = {
-                Text(
-                    text = title,
-                    style = TextStyle(
-                        fontSize = MaterialTheme.typography.h6.fontSize,
-                        fontWeight = FontWeight.Bold
-                    )
-                )
-            },
-            text = {
-                Text(description)
-            },
-            confirmButton = {
-                Button(onClick = {
-                    onClickButton();
-                    alertDialogState = false
-                }) {
-                    Text(buttonText)
-                }
-            }
-        )
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.content.Intent\nimport android.content.Intent.FLAG_ACTIVITY_NEW_TASK\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Build.VERSION_CODES.Q\nimport android.widget.Toast\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\nimport com.example.cyclistance.core.utils.permissions.RequestMultiplePermissions\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.startLocationServiceIntentAction\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    typeBottomSheet: String,\n    isDarkTheme: Boolean,\n    mappingViewModel: MappingViewModel,\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable{ mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(initialValue = BottomSheetValue.Collapsed)\n    )\n\n    val locationPermissionsState = if (Build.VERSION.SDK_INT >= Q) {\n        rememberMultiplePermissionsState(\n            permissions = listOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION,\n                Manifest.permission.ACCESS_BACKGROUND_LOCATION))\n    } else {\n        rememberMultiplePermissionsState(\n            permissions = listOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION))\n    }\n\n\n    val userLocationAvailable by remember(\n        locationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            locationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        locationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(locationPermissionsState.allPermissionsGranted) }\n    }\n\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n                if (isNavigating) {\n\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(locationComponentOptions.build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions);\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.GPS\n\n                    }\n\n                } else {\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(\n                                locationComponentOptions\n                                    .changeToNormalPuckIcon(context)\n                                    .pulseEnabled(pulsingEnabled)\n                                    .build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions);\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.NORMAL\n                    }\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\n                                                               ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember(userLocationAvailable) {\n        { mbm: MapboxMap ->\n            if(mapboxMap == null){\n                mapboxMap = mbm\n            }\n\n            if (userLocationAvailable) {\n                val camera = cameraState\n                locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n\n            }\n        }\n    }\n\n    RequestMultiplePermissions(\n        multiplePermissionsState = locationPermissionsState)\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    val requestHelp = remember {\n        {\n            if (!context.hasGPSConnection()) {\n                context.checkLocationSetting(\n                    onDisabled = settingResultRequest::launch,\n                    onEnabled = {\n                        mappingViewModel.onEvent(\n                            event = MappingVmEvent.RequestHelp)\n\n                    })\n            } else {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RequestHelp)\n\n            }\n        }\n    }\n\n    val onClickRequestHelpButton = remember {\n        {\n            locationPermissionsState.requestPermission(\n                context = context,\n                rationalMessage = \"Location permission is not yet granted.\") {\n                context.startLocationServiceIntentAction()\n                requestHelp()\n            }\n        }\n    }\n\n\n\n    val showRouteDirection = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not() || geometry.isEmpty()) {\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource?.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n\n\n    val onClickLocateUserButton = remember {\n        {\n            locationPermissionsState.requestPermission(\n                context = context,\n                rationalMessage = \"Location permission is not yet granted.\",\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(LOCATE_USER_ZOOM_LEVEL, point, DEFAULT_CAMERA_ANIMATION_DURATION)\n                    }\n\n                })\n        }\n    }\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val route = state.rescueTransaction?.route\n            val location = route?.destinationLocation\n            location?.let {\n                it.latitude ?: return@let\n                it.longitude ?: return@let\n                context.openNavigationApp(latitude = it.latitude, longitude = it.longitude)\n            }\n            Unit\n        }\n    }\n\n    val onClickRouteOverViewButton = remember(mapboxMap) {\n        {\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickRecenterButton = remember(mapboxMap) {\n        {\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING_GPS\n        }\n    }\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val onClickCancelSearchButton = remember {\n        {\n            coroutineScope.launch {\n                bottomSheetScaffoldState.bottomSheetState.collapse()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelRequestHelp)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n\n        }\n    }\n\n    val onClickCancelRescueButton = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(destination = \"${Screens.CancellationScreen.route}/$selectionType/$transactionId/$clientId\")\n\n        }\n    }\n\n    val onDismissNoInternetDialog = remember {\n        {\n            uiState = uiState.copy(\n                isNoInternetVisible = false\n            )\n        }\n    }\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        val transaction = state.rescueTransaction\n        val rescueTransactionId = state.rescueTransaction?.id ?: \"\"\n        val userTransactionId = state.user.transaction?.transactionId ?: \"\"\n        transaction != null && rescueTransactionId.isNotEmpty() && userTransactionId.isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction?.cancellation?.rescueCancelled, state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    val clientPhoneNumber = remember(state.rescuee, state.rescuer) {\n        val client = state.rescuee ?: state.rescuer\n        client?.contactNumber\n    }\n\n    val callClient = remember(clientPhoneNumber) {\n        {\n            val intent = Intent(Intent.ACTION_CALL)\n\n            intent.data = Uri.parse(\"tel:$clientPhoneNumber\")\n            intent.flags = FLAG_ACTIVITY_NEW_TASK\n            context.startActivity(intent)\n        }\n    }\n    val callPhonePermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                callClient()\n            }\n        }\n    val onClickChatButton = remember(clientPhoneNumber) {\n        {\n            val intent = Intent(Intent.ACTION_SENDTO)\n            intent.flags = FLAG_ACTIVITY_NEW_TASK\n            intent.data = Uri.parse(\"smsto:$clientPhoneNumber\")\n            context.startActivity(intent)\n        }\n    }\n\n    val onClickCallButton = remember(clientPhoneNumber) {\n        {\n            callPhonePermissionState.requestPermission(\n                context = context,\n                rationalMessage = \"Phone call permission is not yet granted.\") {\n                callClient()\n            }\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onClickRescueeMapIcon = remember {\n        { id: String ->\n            mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n        }\n    }\n\n    val onDismissRescueeBanner = remember{{\n        val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n        if (isRescueeBannerVisible) {\n            uiState = uiState.copy(\n                mapSelectedRescuee = null,\n                requestHelpButtonVisible = true\n            )\n        }\n    }\n    }\n\n    val onMapClick = remember {{\n        onDismissRescueeBanner()\n    }}\n\n    val onClickRespondToHelpButton = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            )\n        }\n    }\n\n\n    LaunchedEffect(key1 = true, key2 = state.userLocation) {\n\n        mappingViewModel.eventFlow.collectLatest { event ->\n            when (event) {\n\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    navController.navigateScreen(\n                        Screens.ConfirmDetailsScreen.route + \"?$LATITUDE=${state.userLocation?.latitude}&$LONGITUDE=${state.userLocation?.longitude}\")\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.EditProfileScreen.route)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.NoInternetConnection -> {\n                    uiState = uiState.copy(\n                        isNoInternetVisible = true\n                    )\n                }\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.NewRouteDirection -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection\n                    )\n                }\n\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = false,\n                        requestHelpButtonVisible = true,\n                        searchingAssistance = false,\n                        bottomSheetType = \"\"\n                    )\n                    onChangeNavigatingState(false)\n\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                     uiState = uiState.copy(\n                         rescueRequestAccepted = true\n                     )\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type)\n\n                }\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                else -> {}\n            }\n        }\n    }\n\n\n\n\n\n\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection ?: return@LaunchedEffect\n\n        if (route.geometry.isEmpty()) {\n            removeRouteDirection()\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n        val transactionRoute = state.rescueTransaction?.route\n        val startingLocation = transactionRoute?.startingLocation\n        val destinationLocation = transactionRoute?.destinationLocation\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        startingLocation?.longitude ?: return@LaunchedEffect\n        startingLocation.latitude ?: return@LaunchedEffect\n        destinationLocation?.longitude ?: return@LaunchedEffect\n        destinationLocation.latitude ?: return@LaunchedEffect\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLocation.longitude, startingLocation.latitude),\n                destination = Point.fromLngLat(\n                    destinationLocation.longitude,\n                    destinationLocation.latitude)))\n\n    }\n\n\n\n    LaunchedEffect(key1 = hasInternetConnection) {\n        val nearbyCyclistLoaded = state.nearbyCyclists != null\n        val userLoaded = state.user.id != null\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n\n        if (dataHaveBeenLoaded.not()) {\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\n        }\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\n    }\n\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType.isNotEmpty()) {\n                bottomSheetScaffoldState.bottomSheetState.expand()\n            }\n        }\n    }\n\n\n    LaunchedEffect(key1 = typeBottomSheet) {\n\n        if (typeBottomSheet == BottomSheetType.SearchAssistance.type) {\n            uiState = uiState.copy(searchingAssistance = true)\n        }\n        uiState = uiState.copy(bottomSheetType = typeBottomSheet)\n\n\n    }\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n\n    LaunchedEffect(key1 = locationPermissionsState.allPermissionsGranted) {\n        if (!locationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        isDarkTheme = isDarkTheme,\n        state = state,\n        locationPermissionState = locationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        hasTransaction = hasTransaction,\n        isRescueCancelled = isRescueCancelled,\n        mapboxMap = mapboxMap,\n        isNavigating = isNavigating,\n        uiState = uiState,\n        event = { event ->\n            when(event){\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\n                is MappingUiEvent.CancelSearchConfirmed -> onClickCancelSearchButton()\n                is MappingUiEvent.CallRescueTransaction -> onClickCallButton()\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> onClickCancelRescueButton()\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\n                is MappingUiEvent.RescueeMapIconSelected -> onClickRescueeMapIcon(event.id)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onClickLocateUserButton()\n                is MappingUiEvent.RouteOverview -> onClickRouteOverViewButton()\n                is MappingUiEvent.RecenterRoute -> onClickRecenterButton()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\n            }\n        }\n\n\n\n    )\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 06e8b0051980f375edcc52ee3d3ef1769eedaf99)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1685461698949)
@@ -30,7 +30,6 @@
 import com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE
 import com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE
 import com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE
-import com.example.cyclistance.core.utils.permissions.RequestMultiplePermissions
 import com.example.cyclistance.core.utils.permissions.requestPermission
 import com.example.cyclistance.feature_mapping.domain.model.Role
 import com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState
@@ -198,8 +197,6 @@
         }
     }
 
-    RequestMultiplePermissions(
-        multiplePermissionsState = locationPermissionsState)
 
     val settingResultRequest = rememberLauncherForActivityResult(
         contract = ActivityResultContracts.StartIntentSenderForResult()
