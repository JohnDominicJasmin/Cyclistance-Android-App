Index: app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingSocketRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.data.repository\n\nimport android.content.Context\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.model.api.rescue_transaction.RescueTransaction\nimport com.example.cyclistance.feature_mapping.domain.model.api.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.location.LiveLocationWSModel\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingSocketRepository\nimport com.example.cyclistance.feature_mapping.domain.sockets.WebSocketClient\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.retry\nimport kotlinx.coroutines.withContext\nimport kotlin.coroutines.CoroutineContext\n\nclass MappingSocketRepositoryImpl(\n    private val context: Context,\n    private val rescueTransactionClient: WebSocketClient<RescueTransaction, LiveLocationWSModel>,\n    private val nearbyCyclistClient: WebSocketClient<NearbyCyclist, LiveLocationWSModel>,\n    private val liveLocation: WebSocketClient<LiveLocationWSModel, LiveLocationWSModel>,\n): MappingSocketRepository {\n\n    private val scope: CoroutineContext = Dispatchers.IO\n    override suspend fun getUserUpdates(): Flow<NearbyCyclist> {\n        return nearbyCyclistClient.getResult().retry(MappingConstants.API_CALL_RETRY_COUNT) {\n            return@retry context.hasInternetConnection().not()\n        }\n    }\n\n    override suspend fun broadcastToNearbyCyclists(locationModel: LiveLocationWSModel) {\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n        withContext(scope) { nearbyCyclistClient.broadcastEvent(locationModel) }\n    }\n\n    override suspend fun broadcastRescueTransactionToRespondent() {\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n\n        withContext(scope) {\n            rescueTransactionClient.broadcastEvent()\n        }\n    }\n\n    override suspend fun getRescueTransactionUpdates(): Flow<RescueTransaction> {\n\n        return rescueTransactionClient.getResult().retry(MappingConstants.API_CALL_RETRY_COUNT) {\n            return@retry context.hasInternetConnection().not()\n        }\n    }\n\n    override suspend fun getTransactionLocationUpdates(): Flow<LiveLocationWSModel> {\n\n        return liveLocation.getResult().retry(MappingConstants.API_CALL_RETRY_COUNT) {\n            return@retry context.hasInternetConnection().not()\n        }\n    }\n\n    override suspend fun broadcastTransactionLocation(locationModel: LiveLocationWSModel) {\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n        return withContext(scope) {\n            liveLocation.broadcastEvent(locationModel)\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingSocketRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingSocketRepositoryImpl.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingSocketRepositoryImpl.kt	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingSocketRepositoryImpl.kt	(date 1692347138857)
@@ -8,7 +8,6 @@
 import com.example.cyclistance.feature_mapping.domain.model.api.user.NearbyCyclist
 import com.example.cyclistance.feature_mapping.domain.model.location.LiveLocationWSModel
 import com.example.cyclistance.feature_mapping.domain.repository.MappingSocketRepository
-import com.example.cyclistance.feature_mapping.domain.sockets.WebSocketClient
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.retry
@@ -17,11 +16,16 @@
 
 class MappingSocketRepositoryImpl(
     private val context: Context,
-    private val rescueTransactionClient: WebSocketClient<RescueTransaction, LiveLocationWSModel>,
-    private val nearbyCyclistClient: WebSocketClient<NearbyCyclist, LiveLocationWSModel>,
-    private val liveLocation: WebSocketClient<LiveLocationWSModel, LiveLocationWSModel>,
-): MappingSocketRepository {
+    private val nearbyCyclistClient: WebSocketClient<NearbyCyclist, LiveLocationSocketModel>,
+    private val rescueTransactionClient: WebSocketClient<RescueTransaction, LiveLocationSocketModel>,
+    private val liveLocation: WebSocketClient<LiveLocationSocketModel, LiveLocationSocketModel>,
+    private val addHazardousLaneClient: WebSocketClient<HazardousLane, HazardousLaneMarker>,
+    private val deleteHazardousLane: WebSocketClient<HazardousLane, String>
+
+
+    ) : MappingSocketRepository {
 
+
     private val scope: CoroutineContext = Dispatchers.IO
     override suspend fun getUserUpdates(): Flow<NearbyCyclist> {
         return nearbyCyclistClient.getResult().retry(MappingConstants.API_CALL_RETRY_COUNT) {
@@ -68,4 +72,20 @@
             liveLocation.broadcastEvent(locationModel)
         }
     }
+
+    override suspend fun getNewHazardousLaneUpdates(): Flow<HazardousLane> {
+
+        return addHazardousLaneClient.getResult().retry(MappingConstants.API_CALL_RETRY_COUNT) {
+            return@retry context.hasInternetConnection().not()
+        }
+    }
+
+    override suspend fun addNewHazardousLane(hazardousLaneMarker: HazardousLaneMarker) {
+        if (context.hasInternetConnection().not()) {
+            throw MappingExceptions.NetworkException()
+        }
+        return withContext(scope) {
+            addHazardousLaneClient.broadcastEvent(hazardousLaneMarker)
+        }
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingSocketRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.repository\n\nimport com.example.cyclistance.feature_mapping.domain.model.api.rescue_transaction.RescueTransaction\nimport com.example.cyclistance.feature_mapping.domain.model.api.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.location.LiveLocationWSModel\nimport kotlinx.coroutines.flow.Flow\n\ninterface MappingSocketRepository {\n\n    suspend fun getUserUpdates(): Flow<NearbyCyclist>\n    suspend fun getRescueTransactionUpdates(): Flow<RescueTransaction>\n    suspend fun getTransactionLocationUpdates(): Flow<LiveLocationWSModel>\n    suspend fun broadcastToNearbyCyclists(locationModel: LiveLocationWSModel)\n    suspend fun broadcastRescueTransactionToRespondent()\n    suspend fun broadcastTransactionLocation(locationModel: LiveLocationWSModel)\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingSocketRepository.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingSocketRepository.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingSocketRepository.kt	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingSocketRepository.kt	(date 1692348384197)
@@ -9,8 +9,10 @@
 
     suspend fun getUserUpdates(): Flow<NearbyCyclist>
     suspend fun getRescueTransactionUpdates(): Flow<RescueTransaction>
-    suspend fun getTransactionLocationUpdates(): Flow<LiveLocationWSModel>
-    suspend fun broadcastToNearbyCyclists(locationModel: LiveLocationWSModel)
+    suspend fun getTransactionLocationUpdates(): Flow<LiveLocationSocketModel>
+    suspend fun getNewHazardousLaneUpdates(): Flow<HazardousLane>
+
+    suspend fun broadcastToNearbyCyclists(locationModel: LiveLocationSocketModel)
     suspend fun broadcastRescueTransactionToRespondent()
     suspend fun broadcastTransactionLocation(locationModel: LiveLocationWSModel)
 }
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/live_location/GetTransactionLocationUpdatesUseCase.kt
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/live_location/GetTransactionLocationUpdatesUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/live_location/GetTransactionLocationUpdatesUseCase.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/live_location/GetTransactionLocationUpdatesUseCase.kt	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
+++ /dev/null	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
@@ -1,11 +0,0 @@
-package com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location
-
-import com.example.cyclistance.feature_mapping.domain.model.location.LiveLocationWSModel
-import com.example.cyclistance.feature_mapping.domain.repository.MappingSocketRepository
-import kotlinx.coroutines.flow.Flow
-
-class GetTransactionLocationUpdatesUseCase(val repository: MappingSocketRepository) {
-    suspend operator fun invoke(): Flow<LiveLocationWSModel>{
-        return repository.getTransactionLocationUpdates()
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/users/GetUserUpdatesUseCase.kt
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/users/GetUserUpdatesUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/users/GetUserUpdatesUseCase.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/users/GetUserUpdatesUseCase.kt	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
+++ /dev/null	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
@@ -1,11 +0,0 @@
-package com.example.cyclistance.feature_mapping.domain.use_case.websockets.users
-
-import com.example.cyclistance.feature_mapping.domain.model.api.user.NearbyCyclist
-import com.example.cyclistance.feature_mapping.domain.repository.MappingSocketRepository
-import kotlinx.coroutines.flow.Flow
-
-class GetUserUpdatesUseCase(private val repository: MappingSocketRepository) {
-    suspend operator fun invoke(): Flow<NearbyCyclist>{
-        return repository.getUserUpdates()
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/dto/hazardous_lane/HazardousLaneDto.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/dto/hazardous_lane/HazardousLaneDto.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/dto/hazardous_lane/HazardousLaneDto.kt
new file mode 100644
--- /dev/null	(date 1692337632737)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/dto/hazardous_lane/HazardousLaneDto.kt	(date 1692337632737)
@@ -0,0 +1,5 @@
+package com.example.cyclistance.feature_mapping.data.data_source.network.dto.hazardous_lane
+
+import com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker
+
+class HazardousLaneDto: ArrayList<HazardousLaneMarker>()
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/hazardous_lane/NewHazardousLaneUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/hazardous_lane/NewHazardousLaneUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/hazardous_lane/NewHazardousLaneUseCase.kt
new file mode 100644
--- /dev/null	(date 1692332145544)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/websockets/hazardous_lane/NewHazardousLaneUseCase.kt	(date 1692332145544)
@@ -0,0 +1,11 @@
+package com.example.cyclistance.feature_mapping.domain.use_case.websockets.hazardous_lane
+
+import com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker
+import com.example.cyclistance.feature_mapping.domain.repository.MappingSocketRepository
+
+class NewHazardousLaneUseCase(private val repository: MappingSocketRepository) {
+    suspend operator fun invoke() = repository.getNewHazardousLaneUpdates()
+    suspend operator fun invoke(hazardousLaneMarker: HazardousLaneMarker) =
+        repository.addNewHazardousLane(hazardousLaneMarker)
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLane.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLane.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLane.kt
new file mode 100644
--- /dev/null	(date 1692289721514)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLane.kt	(date 1692289721514)
@@ -0,0 +1,11 @@
+package com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane
+
+import android.os.Parcelable
+import com.example.cyclistance.core.utils.annotations.StableState
+import kotlinx.parcelize.Parcelize
+
+@StableState
+@Parcelize
+data class HazardousLane(
+    val markers: List<HazardousLaneMarker> = emptyList()
+):Parcelable
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.use_case\n\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.GetAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.SetAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.GetBikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.SetBikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bottom_sheet_type.GetBottomSheetTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bottom_sheet_type.SetBottomSheetTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetCalculatedDistanceUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetFullAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetUserLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.AcceptRescueRequestUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.AddRescueRespondentUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.ConfirmDetailsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.CreateUserUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteAllRespondentsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteRescueRespondentUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteUserUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.GetUserByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.GetUsersUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.BroadcastTransactionLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.GetTransactionLocationUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.BroadcastRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.GetRescueTransactionUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.BroadcastToNearbyCyclists\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.GetUserUpdatesUseCase\n\ndata class MappingUseCase(\n\n\n\n    val getUserByIdUseCase: GetUserByIdUseCase,\n    val getUsersUseCase: GetUsersUseCase,\n    val createUserUseCase: CreateUserUseCase,\n    val confirmDetailsUseCase: ConfirmDetailsUseCase,\n    val deleteUserUseCase: DeleteUserUseCase,\n    val deleteRescueRespondentUseCase: DeleteRescueRespondentUseCase,\n    val addRescueRespondentUseCase: AddRescueRespondentUseCase,\n    val deleteAllRespondentsUseCase: DeleteAllRespondentsUseCase,\n\n    val getRescueTransactionByIdUseCase: GetRescueTransactionByIdUseCase,\n    val acceptRescueRequestUseCase: AcceptRescueRequestUseCase,\n    val deleteRescueTransactionUseCase: DeleteRescueTransactionUseCase,\n    val confirmCancellationUseCase: ConfirmCancellationUseCase,\n\n    val getUserLocationUseCase: GetUserLocationUseCase,\n    val getFullAddressUseCase: GetFullAddressUseCase,\n\n\n    val getBikeTypeUseCase: GetBikeTypeUseCase,\n    val setBikeTypeUseCase: SetBikeTypeUseCase,\n\n    val getAddressUseCase: GetAddressUseCase,\n    val setAddressUseCase: SetAddressUseCase,\n\n    val getBottomSheetTypeUseCase: GetBottomSheetTypeUseCase,\n    val setBottomSheetTypeUseCase: SetBottomSheetTypeUseCase,\n\n    val broadcastRescueTransactionUseCase: BroadcastRescueTransactionUseCase,\n    val broadcastToNearbyCyclists: BroadcastToNearbyCyclists,\n    val broadcastRescueTransactionToRespondent: BroadcastTransactionLocationUseCase,\n    val getRescueTransactionUpdatesUseCase: GetRescueTransactionUpdatesUseCase,\n    val getUserUpdatesUseCase: GetUserUpdatesUseCase,\n    val getTransactionLocationUpdatesUseCase: GetTransactionLocationUpdatesUseCase,\n    val getRouteDirectionsUseCase: GetRouteDirectionsUseCase,\n    val getCalculatedDistanceUseCase: GetCalculatedDistanceUseCase,\n    )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt	(date 1692332385737)
@@ -22,12 +22,11 @@
 import com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteUserUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.user.GetUserByIdUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.user.GetUsersUseCase
-import com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.BroadcastTransactionLocationUseCase
-import com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.GetTransactionLocationUpdatesUseCase
+import com.example.cyclistance.feature_mapping.domain.use_case.websockets.hazardous_lane.NewHazardousLaneUseCase
+import com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.TransactionLocationUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.BroadcastRescueTransactionUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.GetRescueTransactionUpdatesUseCase
-import com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.BroadcastToNearbyCyclists
-import com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.GetUserUpdatesUseCase
+import com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.NearbyCyclistsUseCase
 
 data class MappingUseCase(
 
@@ -61,11 +60,10 @@
     val setBottomSheetTypeUseCase: SetBottomSheetTypeUseCase,
 
     val broadcastRescueTransactionUseCase: BroadcastRescueTransactionUseCase,
-    val broadcastToNearbyCyclists: BroadcastToNearbyCyclists,
-    val broadcastRescueTransactionToRespondent: BroadcastTransactionLocationUseCase,
+    val nearbyCyclistsUseCase: NearbyCyclistsUseCase,
+    val transactionLocationUseCase: TransactionLocationUseCase,
     val getRescueTransactionUpdatesUseCase: GetRescueTransactionUpdatesUseCase,
-    val getUserUpdatesUseCase: GetUserUpdatesUseCase,
-    val getTransactionLocationUpdatesUseCase: GetTransactionLocationUpdatesUseCase,
     val getRouteDirectionsUseCase: GetRouteDirectionsUseCase,
     val getCalculatedDistanceUseCase: GetCalculatedDistanceUseCase,
+    val newHazardousLaneUseCase: NewHazardousLaneUseCase
     )
Index: app/src/main/java/com/example/cyclistance/feature_mapping/data/mapper/HazardousLaneMapper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/data/mapper/HazardousLaneMapper.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/data/mapper/HazardousLaneMapper.kt
new file mode 100644
--- /dev/null	(date 1692337632720)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/data/mapper/HazardousLaneMapper.kt	(date 1692337632720)
@@ -0,0 +1,14 @@
+package com.example.cyclistance.feature_mapping.data.mapper
+
+import com.example.cyclistance.feature_mapping.data.data_source.network.dto.hazardous_lane.HazardousLaneDto
+import com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLane
+
+object HazardousLaneMapper {
+    fun HazardousLaneDto.toHazardousLane():  HazardousLane{
+        return HazardousLane(
+            markers = this
+        )
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/websockets/AddHazardousLaneClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/websockets/AddHazardousLaneClient.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/websockets/AddHazardousLaneClient.kt
new file mode 100644
--- /dev/null	(date 1692347157530)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/data/data_source/network/websockets/AddHazardousLaneClient.kt	(date 1692347157530)
@@ -0,0 +1,51 @@
+package com.example.cyclistance.feature_mapping.data.data_source.network.websockets
+
+import com.example.cyclistance.core.utils.constants.MappingConstants.NEW_HAZARDOUS_LANE
+import com.example.cyclistance.feature_mapping.data.data_source.network.dto.hazardous_lane.HazardousLaneDto
+import com.example.cyclistance.feature_mapping.data.mapper.HazardousLaneMapper.toHazardousLane
+import com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLane
+import com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker
+import com.example.cyclistance.feature_mapping.domain.sockets.WebSocketClientReceiver
+import com.example.cyclistance.feature_mapping.domain.sockets.WebSocketClientSender
+import com.google.gson.Gson
+import io.socket.client.Socket
+import io.socket.emitter.Emitter
+import kotlinx.coroutines.channels.awaitClose
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.callbackFlow
+
+
+class AddHazardousLaneClient(
+    private val socket: Socket
+) : WebSocketClientReceiver<HazardousLane>, WebSocketClientSender<HazardousLaneMarker> {
+
+    override suspend fun getResult(): Flow<HazardousLane> {
+        return callbackFlow {
+            val gson = Gson()
+            val onNewHazardousLane = Emitter.Listener { response ->
+
+                val responseResult = response[0].toString().trimIndent()
+                val result = gson.fromJson(responseResult, HazardousLaneDto::class.java)
+                trySend(element = result.toHazardousLane())
+
+            }
+
+            socket.on(NEW_HAZARDOUS_LANE, onNewHazardousLane)
+            socket.connect()
+
+
+            awaitClose {
+                socket.disconnect()
+                socket.off(NEW_HAZARDOUS_LANE, onNewHazardousLane)
+            }
+
+        }
+    }
+
+    override suspend fun broadcastEvent(broadcastItem: HazardousLaneMarker?) {
+        broadcastItem?.let { marker ->
+            val gson = Gson()
+            socket.emit(NEW_HAZARDOUS_LANE, gson.toJson(marker))
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLaneMarker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLaneMarker.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLaneMarker.kt
new file mode 100644
--- /dev/null	(date 1692289721501)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/remote_models/hazardous_lane/HazardousLaneMarker.kt	(date 1692289721501)
@@ -0,0 +1,15 @@
+package com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane
+
+import android.os.Parcelable
+import com.example.cyclistance.core.utils.annotations.StableState
+import kotlinx.parcelize.Parcelize
+
+
+@StableState
+@Parcelize
+data class HazardousLaneMarker(
+    val id: String = "",
+    val latitude: Double? = null,
+    val longitude: Double? = null,
+    val label: String = ""
+):Parcelable
Index: app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.core.utils.constants\n\nimport androidx.datastore.preferences.core.stringPreferencesKey\n\nobject MappingConstants {\n    const val ROAD_LABEL_NAVIGATION = \"road-label-navigation\"\n    const val MAX_ZOOM_LEVEL_MAPS = 20.00\n    const val MIN_ZOOM_LEVEL_MAPS = 3.00\n\n    const val MAP_ZOOM = 6.00\n    const val DEFAULT_MAP_ZOOM_LEVEL = 4.00\n    const val DEFAULT_LATITUDE = 12.879700000000023\n    const val DEFAULT_LONGITUDE = 121.774\n    const val TRACKING_MAP_ZOOM_LEVEL = 16.0\n    const val LOCATE_USER_ZOOM_LEVEL = 15.20\n\n    const val CAMERA_TILT_DEGREES = 30.00\n\n\n    const val DEFAULT_CAMERA_ANIMATION_DURATION: Int = 1500\n    const val FAST_CAMERA_ANIMATION_DURATION:Int = 1\n\n    const val CHARACTER_LIMIT = 110\n    const val IMAGE_PLACEHOLDER_URL = \"https://raw.githubusercontent.com/JohnDominicJasmin/JohnDominicJasmin/main/ic_empty_profile_placeholder.jpg\"\n\n    const val LOCATION_UPDATES_INTERVAL: Long = 10000L\n    const val FASTEST_LOCATION_UPDATES_INTERVAL: Long = 7000L\n\n    val BIKE_TYPE_KEY = stringPreferencesKey(\"bike_type\")\n    val ADDRESS_KEY = stringPreferencesKey(\"address\")\n\n\n    const val LOCATION_NAME = \"cyclistance-location\"\n    const val LOCATION_SERVICE_CHANNEL_ID = \"cyclistance-location-channel-id\"\n    const val ACTION_START = \"start\"\n    const val ACTION_STOP = \"stop\"\n\n    const val CONFIRM_DETAILS_VM_STATE_KEY = \"confirm_details_vm_state_key\"\n    const val MAPPING_VM_STATE_KEY = \"mapping_vm_state_key\"\n    const val CANCELLATION_VM_STATE_KEY = \"cancellation_vm_state_key\"\n    const val BROADCAST_USERS = \"broadcast_users\"\n    const val BROADCAST_RESCUE_TRANSACTION = \"broadcast_rescue_transaction\"\n    const val BROADCAST_LOCATION = \"broadcasting_location\"\n    const val JOIN_LIVE_LOCATION_UPDATES = \"joinLiveLocationUpdates\"\n    const val DEFAULT_BIKE_AVERAGE_SPEED_KM = 20.5\n    const val BUTTON_ANIMATION_DURATION = 1500L\n\n    const val INJURY_TEXT = \"Injury\"\n    const val BROKEN_FRAME_TEXT  = \"Broken Frame\"\n    const val INCIDENT_TEXT = \"Incident\"\n    const val BROKEN_CHAIN_TEXT = \"Broken Chain\"\n    const val FLAT_TIRES_TEXT = \"Flat tires\"\n    const val FAULTY_BRAKES_TEXT = \"Faulty Brakes\"\n\n\n\n    const val HEADER_CACHE_CONTROL = \"Cache-Control\"\n    const val HEADER_PRAGMA = \"Pragma\"\n\n    const val SELECTION_RESCUER_TYPE = \"rescuer_type\"\n    const val SELECTION_RESCUEE_TYPE = \"rescuee_type\"\n\n    const val NEAREST_METERS = 10.00\n    const val DEFAULT_RADIUS = 7000.00\n    const val API_CALL_RETRY_COUNT: Long = 3\n\n\n    /*Map*/\n\n    const val DEFAULT_LOCATION_CIRCLE_PULSE_DURATION_MS = 1500f\n    const val DEFAULT_LOCATION_CIRCLE_PULSE_RADIUS = 50f\n\n    const val NUMBER_OF_STARS = 5\n    const val ROUTE_LAYER_ID = \"route-layer-id\"\n    const val ROUTE_SOURCE_ID = \"route-source-id\"\n    const val ICON_SOURCE_ID = \"icon-source-id\"\n    const val TRANSACTION_ICON_ID = \"red-pin-icon-id\"\n    const val ICON_LAYER_ID = \"icon-layer-id\"\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt b/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt
--- a/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt	(revision 867a76e43d39ff1da3fa26227daa21415ec0b769)
+++ b/app/src/main/java/com/example/cyclistance/core/utils/constants/MappingConstants.kt	(date 1692346352468)
@@ -44,6 +44,8 @@
     const val JOIN_LIVE_LOCATION_UPDATES = "joinLiveLocationUpdates"
     const val DEFAULT_BIKE_AVERAGE_SPEED_KM = 20.5
     const val BUTTON_ANIMATION_DURATION = 1500L
+    const val NEW_HAZARDOUS_LANE = "new_hazardous_lane"
+    const val DELETE_HAZARDOUS_LANE = "delete_hazardous_lane"
 
     const val INJURY_TEXT = "Injury"
     const val BROKEN_FRAME_TEXT  = "Broken Frame"
