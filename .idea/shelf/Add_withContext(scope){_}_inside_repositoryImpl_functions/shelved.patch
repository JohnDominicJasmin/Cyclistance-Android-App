Index: app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_readable_displays.data.repository\n\nimport android.content.Context\nimport com.example.cyclistance.core.utils.constants.ReadableConstants.DATA_STORE_INTRO_SLIDER_KEY\nimport com.example.cyclistance.core.utils.extension.editData\nimport com.example.cyclistance.core.utils.extension.getData\nimport com.example.cyclistance.feature_mapping.data.repository.dataStore\nimport com.example.cyclistance.feature_readable_displays.domain.repository.IntroSliderRepository\nimport kotlinx.coroutines.flow.Flow\n\n\nclass IntroSliderRepositoryImpl(context: Context) : IntroSliderRepository {\n    private var dataStore = context.dataStore\n\n    override fun userCompletedWalkThrough(): Flow<Boolean> {\n        return dataStore.getData(key = DATA_STORE_INTRO_SLIDER_KEY, defaultValue = false)\n    }\n\n    override suspend fun setUserCompletedWalkThrough() {\n        dataStore.editData(DATA_STORE_INTRO_SLIDER_KEY, true)\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt
--- a/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
+++ b/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt	(date 1685544838607)
@@ -6,10 +6,15 @@
 import com.example.cyclistance.core.utils.extension.getData
 import com.example.cyclistance.feature_mapping.data.repository.dataStore
 import com.example.cyclistance.feature_readable_displays.domain.repository.IntroSliderRepository
+import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.withContext
+import kotlin.coroutines.CoroutineContext
 
 
-class IntroSliderRepositoryImpl(context: Context) : IntroSliderRepository {
+class IntroSliderRepositoryImpl(
+    context: Context,
+    private val scope: CoroutineContext = Dispatchers.IO) : IntroSliderRepository {
     private var dataStore = context.dataStore
 
     override fun userCompletedWalkThrough(): Flow<Boolean> {
@@ -17,7 +22,9 @@
     }
 
     override suspend fun setUserCompletedWalkThrough() {
-        dataStore.editData(DATA_STORE_INTRO_SLIDER_KEY, true)
+        withContext(scope) {
+            dataStore.editData(DATA_STORE_INTRO_SLIDER_KEY, true)
+        }
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_settings.data.repository\n\nimport android.content.Context\nimport android.net.Uri\nimport android.os.Bundle\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.AuthConstants\nimport com.example.cyclistance.core.utils.constants.AuthConstants.IMAGE_LARGE_SIZE\nimport com.example.cyclistance.core.utils.constants.AuthConstants.IMAGE_SMALL_SIZE\nimport com.example.cyclistance.core.utils.constants.SettingConstants.DATA_STORE_THEME_KEY\nimport com.example.cyclistance.core.utils.extension.editData\nimport com.example.cyclistance.core.utils.extension.getData\nimport com.example.cyclistance.feature_mapping.data.repository.dataStore\nimport com.example.cyclistance.feature_settings.domain.exceptions.SettingExceptions\nimport com.example.cyclistance.feature_settings.domain.repository.SettingRepository\nimport com.facebook.AccessToken\nimport com.facebook.GraphRequest\nimport com.google.firebase.FirebaseException\nimport com.google.firebase.FirebaseNetworkException\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.userProfileChangeRequest\nimport com.google.firebase.storage.FirebaseStorage\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport org.json.JSONObject\nimport kotlin.coroutines.resume\nimport kotlin.coroutines.resumeWithException\n\n\nclass SettingRepositoryImpl(\n    val context: Context,\n    private val auth: FirebaseAuth,\n    private val storage: FirebaseStorage\n\n) : SettingRepository {\n    private var dataStore = context.dataStore\n\n\n    override suspend fun toggleTheme(value: Boolean) {\n        dataStore.editData(DATA_STORE_THEME_KEY, value)\n    }\n\n    override fun isDarkTheme(): Flow<Boolean> {\n        return dataStore.getData(key = DATA_STORE_THEME_KEY, defaultValue = false)\n    }\n\n    override suspend fun updatePhoneNumber(phoneNumber: String) {\n        dataStore.editData(AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, phoneNumber)\n    }\n\n    override fun getPhoneNumber(): Flow<String> {\n        return dataStore.getData(key = AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, defaultValue = \"\")\n    }\n\n\n    override suspend fun updateProfile(photoUrl: String?, name: String?): Boolean {\n        val profileUpdates = userProfileChangeRequest {\n            name?.let { this.displayName = it }\n            photoUrl?.let { this.photoUri = Uri.parse(photoUrl) }\n        }\n\n\n        if (!context.hasInternetConnection()) {\n            throw SettingExceptions.NetworkException(message = context.getString(R.string.no_internet_message))\n        }\n\n        return suspendCancellableCoroutine { continuation ->\n            auth.currentUser?.updateProfile(profileUpdates)\n                ?.addOnCompleteListener { updateProfile ->\n                    updateProfile.exception?.let { exception ->\n\n                        if (exception is FirebaseNetworkException) {\n                            continuation.resumeWithException(\n                                SettingExceptions.NetworkException(\n                                    message = context.getString(R.string.no_internet_message)))\n                        }\n\n                        if (exception is FirebaseException) {\n\n                            continuation.resumeWithException(\n                                SettingExceptions.InternalServerException(\n                                    message = exception.message\n                                              ?: context.getString(R.string.somethingWentWrong))\n                            )\n                        }\n\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(updateProfile.isSuccessful)\n                    }\n                }\n        }\n    }\n\n\n    override suspend fun uploadImage(v: String): String {\n        val id = auth.currentUser?.uid\n        val reference = storage.reference.child(\"images/${id}\")\n        val uploadTask = reference.putFile(Uri.parse(v))\n        return suspendCancellableCoroutine { continuation ->\n            uploadTask.addOnCompleteListener { task ->\n                task.exception?.let { exception ->\n                    if (exception is FirebaseNetworkException) {\n                        continuation.resumeWithException(\n                            SettingExceptions.NetworkException(\n                                message = context.getString(R.string.no_internet_message)))\n                    }\n                }\n\n                if (task.isSuccessful) {\n                    reference.downloadUrl.addOnSuccessListener{\n                        continuation.resume(it.toString())\n                    }\n                }\n\n            }\n        }\n    }\n\n    private fun getFacebookToken(): AccessToken?{\n        return AccessToken.getCurrentAccessToken()\n    }\n\n    private suspend fun getUserFacebookInformation(): String?{\n        return suspendCancellableCoroutine { continuation ->\n            val request = GraphRequest.newMeRequest(getFacebookToken()) { jsonObject: JSONObject?, _ ->\n                val result = jsonObject.toString().takeUnless { it == \"null\" }\n                continuation.resume(result)\n            }\n            val parameters = Bundle()\n            parameters.putString(\"fields\", \"id,name, email, link, picture.type(large)\")\n            request.parameters = parameters\n            request.executeAsync()\n        }\n    }\n\n\n    override suspend fun getName(): String? {\n        val infoString = getUserFacebookInformation()\n        val jsonObject = infoString?.let(::JSONObject)\n        val fbName = jsonObject?.getString(\"name\")\n        val authName: String? = auth.currentUser?.displayName\n        return authName?.takeIf { it.isNotEmpty() } ?: fbName\n    }\n\n    override suspend fun getPhotoUrl(): String? {\n        val infoString = getUserFacebookInformation()\n        val jsonObject = infoString?.let(::JSONObject)\n        val fbPhotoUrl = jsonObject?.getJSONObject(\"picture\")?.getJSONObject(\"data\")?.getString(\"url\")\n        val authPhotoUrl: String = auth.currentUser?.photoUrl.toString().apply {\n            replace(oldValue = IMAGE_SMALL_SIZE, newValue = IMAGE_LARGE_SIZE)\n        }\n        return authPhotoUrl.takeIf { it.isNotEmpty() } ?: fbPhotoUrl\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt
--- a/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
+++ b/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt	(date 1685544854543)
@@ -21,9 +21,12 @@
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.auth.ktx.userProfileChangeRequest
 import com.google.firebase.storage.FirebaseStorage
+import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.suspendCancellableCoroutine
+import kotlinx.coroutines.withContext
 import org.json.JSONObject
+import kotlin.coroutines.CoroutineContext
 import kotlin.coroutines.resume
 import kotlin.coroutines.resumeWithException
 
@@ -31,14 +34,17 @@
 class SettingRepositoryImpl(
     val context: Context,
     private val auth: FirebaseAuth,
-    private val storage: FirebaseStorage
+    private val storage: FirebaseStorage,
+    private val scope: CoroutineContext = Dispatchers.IO
 
 ) : SettingRepository {
     private var dataStore = context.dataStore
 
 
     override suspend fun toggleTheme(value: Boolean) {
-        dataStore.editData(DATA_STORE_THEME_KEY, value)
+        withContext(scope) {
+            dataStore.editData(DATA_STORE_THEME_KEY, value)
+        }
     }
 
     override fun isDarkTheme(): Flow<Boolean> {
@@ -46,7 +52,9 @@
     }
 
     override suspend fun updatePhoneNumber(phoneNumber: String) {
-        dataStore.editData(AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, phoneNumber)
+        withContext(scope) {
+            dataStore.editData(AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, phoneNumber)
+        }
     }
 
     override fun getPhoneNumber(): Flow<String> {
@@ -65,31 +73,33 @@
             throw SettingExceptions.NetworkException(message = context.getString(R.string.no_internet_message))
         }
 
-        return suspendCancellableCoroutine { continuation ->
-            auth.currentUser?.updateProfile(profileUpdates)
-                ?.addOnCompleteListener { updateProfile ->
-                    updateProfile.exception?.let { exception ->
+        return withContext(scope) {
+            suspendCancellableCoroutine { continuation ->
+                auth.currentUser?.updateProfile(profileUpdates)
+                    ?.addOnCompleteListener { updateProfile ->
+                        updateProfile.exception?.let { exception ->
 
-                        if (exception is FirebaseNetworkException) {
-                            continuation.resumeWithException(
-                                SettingExceptions.NetworkException(
-                                    message = context.getString(R.string.no_internet_message)))
-                        }
+                            if (exception is FirebaseNetworkException) {
+                                continuation.resumeWithException(
+                                    SettingExceptions.NetworkException(
+                                        message = context.getString(R.string.no_internet_message)))
+                            }
 
-                        if (exception is FirebaseException) {
+                            if (exception is FirebaseException) {
 
-                            continuation.resumeWithException(
-                                SettingExceptions.InternalServerException(
-                                    message = exception.message
-                                              ?: context.getString(R.string.somethingWentWrong))
-                            )
-                        }
+                                continuation.resumeWithException(
+                                    SettingExceptions.InternalServerException(
+                                        message = exception.message
+                                                  ?: context.getString(R.string.somethingWentWrong))
+                                )
+                            }
 
-                    }
-                    if (continuation.isActive) {
-                        continuation.resume(updateProfile.isSuccessful)
+                        }
+                        if (continuation.isActive) {
+                            continuation.resume(updateProfile.isSuccessful)
+                        }
                     }
-                }
+            }
         }
     }
 
@@ -98,60 +108,71 @@
         val id = auth.currentUser?.uid
         val reference = storage.reference.child("images/${id}")
         val uploadTask = reference.putFile(Uri.parse(v))
-        return suspendCancellableCoroutine { continuation ->
-            uploadTask.addOnCompleteListener { task ->
-                task.exception?.let { exception ->
-                    if (exception is FirebaseNetworkException) {
-                        continuation.resumeWithException(
-                            SettingExceptions.NetworkException(
-                                message = context.getString(R.string.no_internet_message)))
-                    }
-                }
+        return withContext(scope) {
+            suspendCancellableCoroutine { continuation ->
+                uploadTask.addOnCompleteListener { task ->
+                    task.exception?.let { exception ->
+                        if (exception is FirebaseNetworkException) {
+                            continuation.resumeWithException(
+                                SettingExceptions.NetworkException(
+                                    message = context.getString(R.string.no_internet_message)))
+                        }
+                    }
 
-                if (task.isSuccessful) {
-                    reference.downloadUrl.addOnSuccessListener{
-                        continuation.resume(it.toString())
-                    }
-                }
+                    if (task.isSuccessful) {
+                        reference.downloadUrl.addOnSuccessListener {
+                            continuation.resume(it.toString())
+                        }
+                    }
 
+                }
             }
         }
     }
 
-    private fun getFacebookToken(): AccessToken?{
+    private fun getFacebookToken(): AccessToken? {
         return AccessToken.getCurrentAccessToken()
     }
 
-    private suspend fun getUserFacebookInformation(): String?{
-        return suspendCancellableCoroutine { continuation ->
-            val request = GraphRequest.newMeRequest(getFacebookToken()) { jsonObject: JSONObject?, _ ->
-                val result = jsonObject.toString().takeUnless { it == "null" }
-                continuation.resume(result)
-            }
-            val parameters = Bundle()
-            parameters.putString("fields", "id,name, email, link, picture.type(large)")
-            request.parameters = parameters
-            request.executeAsync()
+    private suspend fun getUserFacebookInformation(): String? {
+        return withContext(scope) {
+            suspendCancellableCoroutine { continuation ->
+                val request =
+                    GraphRequest.newMeRequest(getFacebookToken()) { jsonObject: JSONObject?, _ ->
+                        val result = jsonObject.toString().takeUnless { it == "null" }
+                        continuation.resume(result)
+                    }
+                val parameters = Bundle()
+                parameters.putString("fields", "id,name, email, link, picture.type(large)")
+                request.parameters = parameters
+                request.executeAsync()
+            }
         }
     }
 
 
     override suspend fun getName(): String? {
-        val infoString = getUserFacebookInformation()
-        val jsonObject = infoString?.let(::JSONObject)
-        val fbName = jsonObject?.getString("name")
-        val authName: String? = auth.currentUser?.displayName
-        return authName?.takeIf { it.isNotEmpty() } ?: fbName
+        return withContext(scope) {
+            val infoString = getUserFacebookInformation()
+            val jsonObject = infoString?.let(::JSONObject)
+            val fbName = jsonObject?.getString("name")
+            val authName: String? = auth.currentUser?.displayName
+            authName?.takeIf { it.isNotEmpty() } ?: fbName
+        }
+
     }
 
     override suspend fun getPhotoUrl(): String? {
-        val infoString = getUserFacebookInformation()
-        val jsonObject = infoString?.let(::JSONObject)
-        val fbPhotoUrl = jsonObject?.getJSONObject("picture")?.getJSONObject("data")?.getString("url")
-        val authPhotoUrl: String = auth.currentUser?.photoUrl.toString().apply {
-            replace(oldValue = IMAGE_SMALL_SIZE, newValue = IMAGE_LARGE_SIZE)
+        return withContext(scope) {
+            val infoString = getUserFacebookInformation()
+            val jsonObject = infoString?.let(::JSONObject)
+            val fbPhotoUrl =
+                jsonObject?.getJSONObject("picture")?.getJSONObject("data")?.getString("url")
+            val authPhotoUrl: String = auth.currentUser?.photoUrl.toString().apply {
+                replace(oldValue = IMAGE_SMALL_SIZE, newValue = IMAGE_LARGE_SIZE)
+            }
+            authPhotoUrl.takeIf { it.isNotEmpty() } ?: fbPhotoUrl
         }
-        return authPhotoUrl.takeIf { it.isNotEmpty() } ?: fbPhotoUrl
 
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.data.repository\n\nimport android.content.Context\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.AuthConstants.FACEBOOK_CONNECTION_FAILURE\nimport com.example.cyclistance.core.utils.constants.AuthConstants.USER_NOT_FOUND\nimport com.example.cyclistance.feature_authentication.domain.exceptions.AuthExceptions\nimport com.example.cyclistance.feature_authentication.domain.model.SignInCredential\nimport com.example.cyclistance.feature_authentication.domain.repository.AuthRepository\nimport com.google.firebase.FirebaseNetworkException\nimport com.google.firebase.FirebaseTooManyRequestsException\nimport com.google.firebase.auth.FacebookAuthProvider\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.FirebaseAuthInvalidCredentialsException\nimport com.google.firebase.auth.FirebaseAuthInvalidUserException\nimport com.google.firebase.auth.FirebaseAuthUserCollisionException\nimport com.google.firebase.auth.GoogleAuthProvider\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport timber.log.Timber\nimport kotlin.coroutines.resume\nimport kotlin.coroutines.resumeWithException\n\n\nclass AuthRepositoryImpl(\n    private val context: Context,\n    private val auth: FirebaseAuth,\n    ) : AuthRepository {\n\n\n\n\n    override suspend fun reloadEmail(): Boolean {\n        return suspendCancellableCoroutine { continuation ->\n            auth.currentUser?.reload()?.addOnCompleteListener { reload ->\n                reload.exception?.let { exception ->\n                    if (exception is FirebaseNetworkException) {\n                        continuation.resumeWithException(\n                            AuthExceptions.NetworkException(\n                                message = context.getString(\n                                    R.string.no_internet_message)))\n                    }\n                }\n                if (continuation.isActive) {\n                    continuation.resume(reload.isSuccessful)\n                }\n            }\n        }\n    }\n\n    override suspend fun sendEmailVerification(): Boolean {\n        return suspendCancellableCoroutine { continuation ->\n            auth.currentUser?.sendEmailVerification()?.addOnCompleteListener { sendEmail ->\n                sendEmail.exception?.let {\n                    continuation.resumeWithException(\n                        AuthExceptions.EmailVerificationException(message = context.getString(R.string.failed_email_verification)))\n                }\n                if (continuation.isActive) {\n                    continuation.resume(sendEmail.isSuccessful)\n                }\n            }\n        }\n    }\n\n    override suspend fun createUserWithEmailAndPassword(email: String, password: String): Boolean {\n\n        if(!context.hasInternetConnection()){\n            throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))\n        }\n\n        return suspendCancellableCoroutine { continuation ->\n            auth.createUserWithEmailAndPassword(email.trim(), password.trim())\n                .addOnCompleteListener { createAccount ->\n                    createAccount.exception?.let { exception ->\n                        if (exception is FirebaseNetworkException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(R.string.no_internet_message)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is FirebaseAuthUserCollisionException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.UserAlreadyExistsException(\n                                    title = context.getString(R.string.userAlreadyExists),\n                                    message = context.getString(R.string.accountAlreadyInUse)))\n                            return@addOnCompleteListener\n                        }\n                        continuation.resumeWithException(exception)\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(createAccount.isSuccessful)\n                    }\n                }\n        }\n    }\n\n    override suspend fun signInWithEmailAndPassword(email: String, password: String): Boolean {\n\n        if(!context.hasInternetConnection()){\n            throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))\n        }\n\n        return suspendCancellableCoroutine { continuation ->\n            auth.signInWithEmailAndPassword(email.trim(), password.trim())\n                .addOnCompleteListener { signInWithEmailAndPassword ->\n                    signInWithEmailAndPassword.exception?.let { exception ->\n                        Timber.e(exception.message)\n                        if (exception is FirebaseNetworkException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(\n                                        R.string.no_internet_message)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is FirebaseAuthInvalidCredentialsException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.PasswordException(\n                                    message = context.getString(\n                                        R.string.incorrectPasswordMessage)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is FirebaseAuthInvalidUserException) {\n                            if (exception.errorCode == USER_NOT_FOUND) {\n                                continuation.resumeWithException(\n                                    AuthExceptions.EmailException(\n                                        message = context.getString(\n                                            R.string.couldntFindAccount)))\n                                return@addOnCompleteListener\n                            }\n                        }\n\n                        if (exception is FirebaseTooManyRequestsException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.TooManyRequestsException(\n                                    title = context.getString(\n                                        R.string.tooManyFailedAttempts),\n                                    message = context.getString(R.string.manyFailedAttempts)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is IllegalStateException) {\n                            Timber.e(exception.message)\n                        }\n\n                        continuation.resumeWithException(exception)\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(signInWithEmailAndPassword.isSuccessful)\n                    }\n                }\n        }\n    }\n\n\n    override suspend fun signInWithCredential(credential: SignInCredential): Boolean {\n        return suspendCancellableCoroutine { continuation ->\n\n            val signInCredential = when(credential){\n                is SignInCredential.Google -> GoogleAuthProvider.getCredential(credential.providerToken, null)\n                is SignInCredential.Facebook -> FacebookAuthProvider.getCredential(credential.providerToken)\n            }\n\n\n            auth.signInWithCredential(signInCredential)\n                .addOnCompleteListener { signInWithCredential ->\n                    signInWithCredential.exception?.let { exception ->\n                        if (exception.message == FACEBOOK_CONNECTION_FAILURE) {\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(\n                                        R.string.no_internet_message)))\n                        }\n\n                        if(exception is FirebaseNetworkException){\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(R.string.no_internet_message)))\n                            return@addOnCompleteListener\n                        }\n\n                        continuation.resumeWithException(\n                            AuthExceptions.ConflictFBTokenException(\n                                exception.message\n                                ?: \"Sorry, something went wrong. Please try again.\"))\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(signInWithCredential.isSuccessful)\n                    }\n                }\n        }\n    }\n\n    override fun signOut() {\n        auth.signOut()\n    }\n\n    override fun getId(): String? {\n        return auth.currentUser?.uid\n    }\n\n    override fun getEmail(): String? {\n        return auth.currentUser?.email\n    }\n\n\n\n\n\n    override fun isSignedInWithProvider(): Boolean? {\n        return auth.currentUser?.providerData?.any {\n            it.providerId == FacebookAuthProvider.PROVIDER_ID ||\n            it.providerId == GoogleAuthProvider.PROVIDER_ID\n        }\n    }\n\n    override fun isEmailVerified(): Boolean? {\n        return auth.currentUser?.isEmailVerified\n    }\n\n    override fun hasAccountSignedIn(): Boolean {\n        return auth.currentUser != null\n    }\n\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt	(date 1685544947718)
@@ -16,8 +16,11 @@
 import com.google.firebase.auth.FirebaseAuthInvalidUserException
 import com.google.firebase.auth.FirebaseAuthUserCollisionException
 import com.google.firebase.auth.GoogleAuthProvider
+import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.suspendCancellableCoroutine
+import kotlinx.coroutines.withContext
 import timber.log.Timber
+import kotlin.coroutines.CoroutineContext
 import kotlin.coroutines.resume
 import kotlin.coroutines.resumeWithException
 
@@ -25,38 +28,41 @@
 class AuthRepositoryImpl(
     private val context: Context,
     private val auth: FirebaseAuth,
+    private val scope: CoroutineContext = Dispatchers.IO
     ) : AuthRepository {
 
 
 
 
     override suspend fun reloadEmail(): Boolean {
-        return suspendCancellableCoroutine { continuation ->
-            auth.currentUser?.reload()?.addOnCompleteListener { reload ->
-                reload.exception?.let { exception ->
-                    if (exception is FirebaseNetworkException) {
-                        continuation.resumeWithException(
-                            AuthExceptions.NetworkException(
-                                message = context.getString(
-                                    R.string.no_internet_message)))
-                    }
-                }
-                if (continuation.isActive) {
-                    continuation.resume(reload.isSuccessful)
+        return withContext(scope) {
+             suspendCancellableCoroutine { continuation ->
+                auth.currentUser?.reload()?.addOnCompleteListener { reload ->
+                    reload.exception?.let { exception ->
+                        if (exception is FirebaseNetworkException) {
+                            continuation.resumeWithException(AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message)))
+                        }
+                    }
+                    if (continuation.isActive) {
+                        continuation.resume(reload.isSuccessful)
+                    }
                 }
             }
         }
     }
 
     override suspend fun sendEmailVerification(): Boolean {
-        return suspendCancellableCoroutine { continuation ->
-            auth.currentUser?.sendEmailVerification()?.addOnCompleteListener { sendEmail ->
-                sendEmail.exception?.let {
-                    continuation.resumeWithException(
-                        AuthExceptions.EmailVerificationException(message = context.getString(R.string.failed_email_verification)))
-                }
-                if (continuation.isActive) {
-                    continuation.resume(sendEmail.isSuccessful)
+        return withContext(scope) {
+
+            suspendCancellableCoroutine { continuation ->
+                auth.currentUser?.sendEmailVerification()?.addOnCompleteListener { sendEmail ->
+                    sendEmail.exception?.let {
+                        continuation.resumeWithException(
+                            AuthExceptions.EmailVerificationException(message = context.getString(R.string.failed_email_verification)))
+                    }
+                    if (continuation.isActive) {
+                        continuation.resume(sendEmail.isSuccessful)
+                    }
                 }
             }
         }
@@ -68,30 +74,32 @@
             throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))
         }
 
-        return suspendCancellableCoroutine { continuation ->
-            auth.createUserWithEmailAndPassword(email.trim(), password.trim())
-                .addOnCompleteListener { createAccount ->
-                    createAccount.exception?.let { exception ->
-                        if (exception is FirebaseNetworkException) {
-                            continuation.resumeWithException(
-                                AuthExceptions.NetworkException(
-                                    message = context.getString(R.string.no_internet_message)))
-                            return@addOnCompleteListener
-                        }
+        return withContext(scope) {
+            suspendCancellableCoroutine { continuation ->
+                auth.createUserWithEmailAndPassword(email.trim(), password.trim())
+                    .addOnCompleteListener { createAccount ->
+                        createAccount.exception?.let { exception ->
+                            if (exception is FirebaseNetworkException) {
+                                continuation.resumeWithException(
+                                    AuthExceptions.NetworkException(
+                                        message = context.getString(R.string.no_internet_message)))
+                                return@addOnCompleteListener
+                            }
 
-                        if (exception is FirebaseAuthUserCollisionException) {
-                            continuation.resumeWithException(
-                                AuthExceptions.UserAlreadyExistsException(
-                                    title = context.getString(R.string.userAlreadyExists),
-                                    message = context.getString(R.string.accountAlreadyInUse)))
-                            return@addOnCompleteListener
-                        }
-                        continuation.resumeWithException(exception)
-                    }
-                    if (continuation.isActive) {
-                        continuation.resume(createAccount.isSuccessful)
+                            if (exception is FirebaseAuthUserCollisionException) {
+                                continuation.resumeWithException(
+                                    AuthExceptions.UserAlreadyExistsException(
+                                        title = context.getString(R.string.userAlreadyExists),
+                                        message = context.getString(R.string.accountAlreadyInUse)))
+                                return@addOnCompleteListener
+                            }
+                            continuation.resumeWithException(exception)
+                        }
+                        if (continuation.isActive) {
+                            continuation.resume(createAccount.isSuccessful)
+                        }
                     }
-                }
+            }
         }
     }
 
@@ -101,95 +109,99 @@
             throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))
         }
 
-        return suspendCancellableCoroutine { continuation ->
-            auth.signInWithEmailAndPassword(email.trim(), password.trim())
-                .addOnCompleteListener { signInWithEmailAndPassword ->
-                    signInWithEmailAndPassword.exception?.let { exception ->
-                        Timber.e(exception.message)
-                        if (exception is FirebaseNetworkException) {
-                            continuation.resumeWithException(
-                                AuthExceptions.NetworkException(
-                                    message = context.getString(
-                                        R.string.no_internet_message)))
-                            return@addOnCompleteListener
-                        }
+        return withContext(scope) {
+            suspendCancellableCoroutine { continuation ->
+                auth.signInWithEmailAndPassword(email.trim(), password.trim())
+                    .addOnCompleteListener { signInWithEmailAndPassword ->
+                        signInWithEmailAndPassword.exception?.let { exception ->
+                            Timber.e(exception.message)
+                            if (exception is FirebaseNetworkException) {
+                                continuation.resumeWithException(
+                                    AuthExceptions.NetworkException(
+                                        message = context.getString(
+                                            R.string.no_internet_message)))
+                                return@addOnCompleteListener
+                            }
 
-                        if (exception is FirebaseAuthInvalidCredentialsException) {
-                            continuation.resumeWithException(
-                                AuthExceptions.PasswordException(
-                                    message = context.getString(
-                                        R.string.incorrectPasswordMessage)))
-                            return@addOnCompleteListener
-                        }
+                            if (exception is FirebaseAuthInvalidCredentialsException) {
+                                continuation.resumeWithException(
+                                    AuthExceptions.PasswordException(
+                                        message = context.getString(
+                                            R.string.incorrectPasswordMessage)))
+                                return@addOnCompleteListener
+                            }
 
-                        if (exception is FirebaseAuthInvalidUserException) {
-                            if (exception.errorCode == USER_NOT_FOUND) {
-                                continuation.resumeWithException(
-                                    AuthExceptions.EmailException(
-                                        message = context.getString(
-                                            R.string.couldntFindAccount)))
-                                return@addOnCompleteListener
-                            }
-                        }
+                            if (exception is FirebaseAuthInvalidUserException) {
+                                if (exception.errorCode == USER_NOT_FOUND) {
+                                    continuation.resumeWithException(
+                                        AuthExceptions.EmailException(
+                                            message = context.getString(
+                                                R.string.couldntFindAccount)))
+                                    return@addOnCompleteListener
+                                }
+                            }
 
-                        if (exception is FirebaseTooManyRequestsException) {
-                            continuation.resumeWithException(
-                                AuthExceptions.TooManyRequestsException(
-                                    title = context.getString(
-                                        R.string.tooManyFailedAttempts),
-                                    message = context.getString(R.string.manyFailedAttempts)))
-                            return@addOnCompleteListener
-                        }
+                            if (exception is FirebaseTooManyRequestsException) {
+                                continuation.resumeWithException(
+                                    AuthExceptions.TooManyRequestsException(
+                                        title = context.getString(
+                                            R.string.tooManyFailedAttempts),
+                                        message = context.getString(R.string.manyFailedAttempts)))
+                                return@addOnCompleteListener
+                            }
 
-                        if (exception is IllegalStateException) {
-                            Timber.e(exception.message)
-                        }
+                            if (exception is IllegalStateException) {
+                                Timber.e(exception.message)
+                            }
 
-                        continuation.resumeWithException(exception)
-                    }
-                    if (continuation.isActive) {
-                        continuation.resume(signInWithEmailAndPassword.isSuccessful)
+                            continuation.resumeWithException(exception)
+                        }
+                        if (continuation.isActive) {
+                            continuation.resume(signInWithEmailAndPassword.isSuccessful)
+                        }
                     }
-                }
+            }
         }
     }
 
 
     override suspend fun signInWithCredential(credential: SignInCredential): Boolean {
-        return suspendCancellableCoroutine { continuation ->
+        return withContext(scope) {
+            suspendCancellableCoroutine { continuation ->
 
-            val signInCredential = when(credential){
-                is SignInCredential.Google -> GoogleAuthProvider.getCredential(credential.providerToken, null)
-                is SignInCredential.Facebook -> FacebookAuthProvider.getCredential(credential.providerToken)
-            }
+                val signInCredential = when(credential){
+                    is SignInCredential.Google -> GoogleAuthProvider.getCredential(credential.providerToken, null)
+                    is SignInCredential.Facebook -> FacebookAuthProvider.getCredential(credential.providerToken)
+                }
 
 
-            auth.signInWithCredential(signInCredential)
-                .addOnCompleteListener { signInWithCredential ->
-                    signInWithCredential.exception?.let { exception ->
-                        if (exception.message == FACEBOOK_CONNECTION_FAILURE) {
-                            continuation.resumeWithException(
-                                AuthExceptions.NetworkException(
-                                    message = context.getString(
-                                        R.string.no_internet_message)))
-                        }
+                auth.signInWithCredential(signInCredential)
+                    .addOnCompleteListener { signInWithCredential ->
+                        signInWithCredential.exception?.let { exception ->
+                            if (exception.message == FACEBOOK_CONNECTION_FAILURE) {
+                                continuation.resumeWithException(
+                                    AuthExceptions.NetworkException(
+                                        message = context.getString(
+                                            R.string.no_internet_message)))
+                            }
 
-                        if(exception is FirebaseNetworkException){
-                            continuation.resumeWithException(
-                                AuthExceptions.NetworkException(
-                                    message = context.getString(R.string.no_internet_message)))
-                            return@addOnCompleteListener
-                        }
+                            if(exception is FirebaseNetworkException){
+                                continuation.resumeWithException(
+                                    AuthExceptions.NetworkException(
+                                        message = context.getString(R.string.no_internet_message)))
+                                return@addOnCompleteListener
+                            }
 
-                        continuation.resumeWithException(
-                            AuthExceptions.ConflictFBTokenException(
-                                exception.message
-                                ?: "Sorry, something went wrong. Please try again."))
-                    }
-                    if (continuation.isActive) {
-                        continuation.resume(signInWithCredential.isSuccessful)
+                            continuation.resumeWithException(
+                                AuthExceptions.ConflictFBTokenException(
+                                    exception.message
+                                    ?: "Sorry, something went wrong. Please try again."))
+                        }
+                        if (continuation.isActive) {
+                            continuation.resume(signInWithCredential.isSuccessful)
+                        }
                     }
-                }
+            }
         }
     }
 
