Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/rescue_transaction/AcceptRescueRequestUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction\n\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.StatusModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingRepository\nimport java.util.Date\n\nclass AcceptRescueRequestUseCase(private val repository : MappingRepository) {\n    suspend operator fun invoke(transactionId: String, rescuer: UserItem, user: UserItem) : RescueTransactionItem{\n        val rescueTransaction = RescueTransactionItem(\n            id = transactionId,\n            rescuerId = rescuer.id,\n            rescueeId = user.id,\n            status = StatusModel(started = true, onGoing = true),\n            route = RouteModel(\n                startingLocation = LocationModel(\n                    latitude = rescuer.location!!.latitude,\n                    longitude = rescuer.location.longitude\n                ),\n                destinationLocation = LocationModel(\n                    latitude = user.location!!.latitude,\n                    longitude = user.location.longitude\n                )\n            ),\n            startingMillis = Date().time\n        )\n\n        repository.createRescueTransaction(rescueTransaction)\n        return rescueTransaction\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/rescue_transaction/AcceptRescueRequestUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/rescue_transaction/AcceptRescueRequestUseCase.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/rescue_transaction/AcceptRescueRequestUseCase.kt	(revision 92ee2bd1d7dc4587c87a405a9867dcdb23791407)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/rescue_transaction/AcceptRescueRequestUseCase.kt	(date 1699120655089)
@@ -1,34 +1,9 @@
 package com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction
 
-import com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem
-import com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteModel
-import com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.StatusModel
-import com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel
-import com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem
 import com.example.cyclistance.feature_mapping.domain.repository.MappingRepository
-import java.util.Date
 
 class AcceptRescueRequestUseCase(private val repository : MappingRepository) {
-    suspend operator fun invoke(transactionId: String, rescuer: UserItem, user: UserItem) : RescueTransactionItem{
-        val rescueTransaction = RescueTransactionItem(
-            id = transactionId,
-            rescuerId = rescuer.id,
-            rescueeId = user.id,
-            status = StatusModel(started = true, onGoing = true),
-            route = RouteModel(
-                startingLocation = LocationModel(
-                    latitude = rescuer.location!!.latitude,
-                    longitude = rescuer.location.longitude
-                ),
-                destinationLocation = LocationModel(
-                    latitude = user.location!!.latitude,
-                    longitude = user.location.longitude
-                )
-            ),
-            startingMillis = Date().time
-        )
-
-        repository.createRescueTransaction(rescueTransaction)
-        return rescueTransaction
+    suspend operator fun invoke(userId: String, rescuerId: String) {
+        repository.acceptRescueRequest(userId = userId, rescuerId = rescuerId)
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/helper/TrackingStateHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.helper\n\nimport com.example.cyclistance.core.utils.constants.MappingConstants\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.formatDuration\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.formatToDistanceKm\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.getTimeDurationMillis\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.isLocationAvailable\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.toReadableDateTime\nimport com.example.cyclistance.feature_authentication.domain.exceptions.AuthExceptions\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.live_location.LiveLocationSocketModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransaction\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.TransactionModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_rescue_record.domain.model.ui.RideDetails\nimport com.example.cyclistance.feature_rescue_record.domain.model.ui.RideMetrics\nimport com.example.cyclistance.feature_rescue_record.domain.model.ui.RideSummary\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.update\nimport timber.log.Timber\nimport java.util.Date\n\nclass TrackingStateHandler(\n    val state: MutableStateFlow<MappingState>,\n    val eventFlow: MutableSharedFlow<MappingEvent>) {\n\n\n    suspend fun updateClient() {\n\n        coroutineScope {\n            val rescueTransaction = state.value.rescueTransaction\n            val cyclists = state.value.nearbyCyclist\n            val userRole = state.value.user.getRole()\n\n            if (userRole == Role.Rescuee.name) {\n                rescueTransaction?.rescuerId?.let { id ->\n                    state.update { it.copy(rescuer = cyclists?.findUser(id), rescuee = null) }\n                }\n                return@coroutineScope\n            }\n\n            rescueTransaction?.rescueeId?.let { rescueeId ->\n                state.update { it.copy(rescuee = cyclists?.findUser(rescueeId), rescuer = null) }\n            }\n        }\n    }\n\n    fun filterUserRescueTransaction(rescueTransaction: RescueTransaction): RescueTransactionItem? {\n\n        val transactionId = state.value.getTransactionId()\n        return transactionId.let { rescueTransaction.findTransaction(it) }\n\n    }\n\n    fun clearTransactionRoles() {\n        state.update {\n            it.copy(\n                respondedToHelp = false,\n                rescueTransaction = null,\n                rescuee = null,\n                rescuer = null,\n                newRescueRequest = NewRescueRequestsModel(),\n\n                )\n        }\n    }\n\n    suspend fun showSelectedRescuee(\n        selectedRescuee: UserItem,\n        distance: Double,\n        timeRemaining: String\n    ) {\n\n        eventFlow.emit(\n            value = MappingEvent.NewSelectedRescuee(\n                selectedRescuee = MapSelectedRescuee(\n                    userId = selectedRescuee.id!!,\n                    userProfileImage = selectedRescuee.profilePictureUrl\n                                       ?: MappingConstants.IMAGE_PLACEHOLDER_URL,\n                    name = selectedRescuee.name ?: \"name unavailable\",\n                    issue = selectedRescuee.getDescription() ?: \"\",\n                    bikeType = selectedRescuee.getBikeType() ?: \"\",\n                    address = selectedRescuee.address ?: \"\",\n                    message = selectedRescuee.getMessage() ?: \"\",\n                    distanceRemaining = distance.formatToDistanceKm(),\n                    timeRemaining = timeRemaining\n                )\n            )\n        )\n    }\n\n\n    fun getRideDetails(): RideDetails {\n        val rescuer = state.value.rescuer\n        val rescuee = state.value.rescuee\n\n        val user = state.value.user\n        val role = user.getRole()\n        val rescueTransaction = state.value.rescueTransaction\n\n        val startingMillis = rescueTransaction?.startingMillis ?: Date().time\n        val endingMillis = rescueTransaction?.endingMillis ?: Date().time\n        val startingAddress = rescuer?.address ?: user.address\n        val destinationAddress = rescuee?.address ?: user.address\n        val iconDescription = if(role == Role.Rescuee.name) user.getDescription() else rescuee?.getDescription()\n        val bikeType = if(role == Role.Rescuee.name) user.getBikeType() else rescuee?.getBikeType()\n        val startingTime = Date(startingMillis).toReadableDateTime(pattern = \"hh:mm a\")\n        val endTime = Date().toReadableDateTime(pattern = \"hh:mm a\")\n        val dateNow = Date().toReadableDateTime(pattern = \"dd/MM/yyyy\")\n        val durationTime = formatDuration(startingMillis = startingMillis, endingMillis = endingMillis)\n        val rideId = state.value.getTransactionId()\n\n\n\n\n        val rideDetails = if(role == Role.Rescuee.name){\n            RideDetails(\n                rescueeId = user.id!!,\n                rescueeName = user.name!!,\n                rescueePhotoUrl = user.profilePictureUrl!!,\n                rescuerId = rescuer?.id!!,\n                rescuerName = rescuer.name!!,\n                rescuerPhotoUrl = rescuer.profilePictureUrl!!)\n        }else{\n            RideDetails(\n                rescueeId = rescuee?.id!!,\n                rescueeName = rescuee.name!!,\n                rescueePhotoUrl = rescuee.profilePictureUrl!!,\n                rescuerId = user.id!!,\n                rescuerName = user.name!!,\n                rescuerPhotoUrl = user.profilePictureUrl!!)\n        }\n\n        return rideDetails.copy(\n            rideId = rideId,\n            rideSummary = RideSummary(\n                iconDescription = iconDescription!!,\n                bikeType = bikeType!!,\n                date = dateNow,\n                startingTime = startingTime,\n                endTime = endTime,\n                startingAddress = startingAddress!!,\n                destinationAddress = destinationAddress!!,\n                duration = durationTime,\n\n            )\n        )\n\n    }\n\n    fun getRideMetrics(): RideMetrics{\n        val rescueTransaction = state.value.rescueTransaction\n\n        val startingMillis = rescueTransaction?.startingMillis ?: Date().time\n        val endingMillis = rescueTransaction?.endingMillis ?: Date().time\n        val timeMillisDifference = getTimeDurationMillis(\n            startingMillis = startingMillis,\n            endingMillis = endingMillis)\n        val speedCalculator = SpeedCalculator()\n        val speedometerState = state.value.speedometerState\n\n        val calculateAverageSpeedInMetersPerSecond = speedCalculator.calculateAverageSpeedInMeters(\n            distanceMeters = speedometerState.travelledDistance,\n            timeMillis = timeMillisDifference)\n\n\n        return RideMetrics(\n            distanceInMeters = speedometerState.travelledDistance,\n            maxSpeed = String.format(\"%.2f km/h\", speedometerState.topSpeed),\n            averageSpeedMps = calculateAverageSpeedInMetersPerSecond\n        )\n    }\n\n\n    fun updateLocation(location: LocationModel) {\n        val latitude = location.latitude ?: return\n        val longitude = location.longitude ?: return\n        /*   state.update {\n               it.copy(\n                   userLocation = LocationModel()\n               )\n           }*/\n        state.update {\n            it.copy(\n                userLocation = LocationModel(\n                    latitude = latitude,\n                    longitude = longitude\n                )\n            )\n        }\n\n\n    }\n\n    fun updateTransactionLocation(location: LiveLocationSocketModel) {\n        val longitude = location.longitude ?: return\n        val latitude = location.latitude ?: return\n        state.update {\n            it.copy(\n                transactionLocation = LocationModel(\n                    latitude = latitude,\n                    longitude = longitude\n                )\n            )\n        }\n    }\n\n    suspend inline fun checkCurrentTransactions(\n        user: UserItem,\n        rescuer: UserItem,\n        crossinline noCurrentTransaction: suspend () -> Unit\n    ) {\n\n        val userHasCurrentTransaction =\n            (user.transaction ?: TransactionModel()).transactionId.isNotEmpty()\n\n        val rescuerHasCurrentTransaction =\n            (rescuer.transaction ?: TransactionModel()).transactionId.isNotEmpty()\n\n        val rescuerLocationAvailable = rescuer.location.isLocationAvailable()\n        val userLocationAvailable = user.location.isLocationAvailable()\n\n        if (!rescuerLocationAvailable) {\n            eventFlow.emit(value = MappingEvent.RescuerLocationNotAvailable())\n            return\n        }\n\n        if (!userLocationAvailable) {\n            eventFlow.emit(value = MappingEvent.LocationNotAvailable(\"Location not found\"))\n            return\n        }\n\n        if (rescuerHasCurrentTransaction) {\n            eventFlow.emit(value = MappingEvent.RescueHasTransaction)\n            return\n        }\n\n        if (userHasCurrentTransaction) {\n            eventFlow.emit(value = MappingEvent.UserHasCurrentTransaction)\n            return\n        }\n\n\n        noCurrentTransaction()\n    }\n\n\n\n\n    fun getTransactionId(rescuer: UserItem): String {\n        val user = state.value.user\n        val idCombination =  user.id?.take(3) + rescuer.id?.take(3)\n        return idCombination + System.currentTimeMillis().toString()\n    }\n\n    suspend fun filterRescueRequestAccepted(rescueTransaction: RescueTransaction, id: String) {\n        val respondedToHelp = state.value.respondedToHelp\n        val user = state.value.user\n\n        val userId = state.value.user.id ?: id\n\n        if (respondedToHelp.not()) {\n            return\n        }\n\n\n\n        filterUserRescueTransaction(rescueTransaction = rescueTransaction)\n            ?.let { transaction ->\n\n                if(transaction.cancellation != null){\n                    return@let\n                }\n\n                if (transaction.isRescueCancelled()) {\n                    return@let\n                }\n\n                if (transaction.rescuerId != userId) {\n                    return@let\n                }\n\n                if (user.isRescuee()) {\n                    return@let\n                }\n\n                if (transaction.rescueeId.isNullOrEmpty()) {\n                    return@let\n                }\n                eventFlow.emit(value = MappingEvent.RescueRequestAccepted)\n            }\n\n\n    }\n\n    suspend fun handleException(exception: Throwable) {\n        when (exception) {\n\n            is MappingExceptions.NavigationRouteException -> {\n                eventFlow.emit(\n                    MappingEvent.GenerateRouteNavigationFailed(\n                        reason = exception.message ?: \"Failed to Generate Navigation Route\"\n                    )\n                )\n            }\n\n            is MappingExceptions.NetworkException -> {\n                eventFlow.emit(value = MappingEvent.NoInternetConnection)\n            }\n\n            is MappingExceptions.UnexpectedErrorException -> {\n                eventFlow.emit(\n                    MappingEvent.UnexpectedError(\n                        reason = exception.message\n                    )\n                )\n            }\n\n            is AuthExceptions.UserException -> {\n                eventFlow.emit(\n                    MappingEvent.UserFailed(\n                        reason = exception.message\n                    )\n                )\n            }\n\n            is MappingExceptions.AddressException -> {\n                eventFlow.emit(\n                    MappingEvent.AddressFailed(\n                        reason = exception.message ?: \"Searching for GPS\"\n                    )\n                )\n            }\n\n            is MappingExceptions.NameException -> {\n                eventFlow.emit(MappingEvent.InsufficientUserCredential)\n            }\n\n            else -> {\n                Timber.e(\"Error HandleException: ${exception.message}\")\n            }\n\n        }\n    }\n\n\n    fun getTopSpeed(currentSpeed: Double) {\n        val topSpeed = state.value.getTopSpeed()\n        if (currentSpeed > topSpeed) {\n            state.update { it.copy(speedometerState = it.speedometerState.copy(topSpeed = currentSpeed)) }\n        }\n    }\n\n    fun setSpeed(currentSpeedKph: Double){\n        state.update { it.copy(speedometerState = it.speedometerState.copy(currentSpeedKph = currentSpeedKph)) }\n    }\n\n    fun setTravelledDistance(distance: Double){\n\n        state.update { it.copy(speedometerState = it.speedometerState.copy(travelledDistance = distance)) }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/helper/TrackingStateHandler.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/helper/TrackingStateHandler.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/helper/TrackingStateHandler.kt	(revision 92ee2bd1d7dc4587c87a405a9867dcdb23791407)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/helper/TrackingStateHandler.kt	(date 1699120294569)
@@ -256,12 +256,6 @@
 
 
 
-    fun getTransactionId(rescuer: UserItem): String {
-        val user = state.value.user
-        val idCombination =  user.id?.take(3) + rescuer.id?.take(3)
-        return idCombination + System.currentTimeMillis().toString()
-    }
-
     suspend fun filterRescueRequestAccepted(rescueTransaction: RescueTransaction, id: String) {
         val respondedToHelp = state.value.respondedToHelp
         val user = state.value.user
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_RADIUS\nimport com.example.cyclistance.core.utils.constants.MappingConstants.MAPPING_VM_STATE_KEY\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.formatToDistanceKm\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.isLocationAvailable\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.toRescueDescription\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\nimport com.example.cyclistance.feature_mapping.data.mapper.UserMapper.toRescueRequest\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.helper.TrackingStateHandler\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.live_location.LiveLocationSocketModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue.RescueRequestItemModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransaction\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.RescuePending\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.RescueRequest\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserAssistanceModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.createMockUsers\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport com.example.cyclistance.feature_rescue_record.domain.use_case.RescueRecordUseCase\nimport com.example.cyclistance.feature_user_profile.domain.model.UserStats\nimport com.example.cyclistance.feature_user_profile.domain.use_case.UserProfileUseCase\nimport com.google.maps.android.SphericalUtil\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharedFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.flow.launchIn\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\nimport javax.inject.Inject\nimport com.google.android.gms.maps.model.LatLng as GoogleLatLng\n\n\n@HiltViewModel\nclass MappingViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val authUseCase: AuthenticationUseCase,\n    private val mappingUseCase: MappingUseCase,\n    private val userProfileUseCase: UserProfileUseCase,\n    private val defaultDispatcher: CoroutineDispatcher,\n    private val messagingUseCase: MessagingUseCase,\n    private val rescueRecordUseCase: RescueRecordUseCase,\n) : ViewModel() {\n\n\n    private var locationUpdatesJob: Job? = null\n    private var trackingHandler: TrackingStateHandler\n\n    private val _state: MutableStateFlow<MappingState> = MutableStateFlow(\n        savedStateHandle[MAPPING_VM_STATE_KEY] ?: MappingState(userId = getId())\n    )\n    val state = _state.asStateFlow()\n\n    private val _eventFlow: MutableSharedFlow<MappingEvent> = MutableSharedFlow()\n    val eventFlow: SharedFlow<MappingEvent> = _eventFlow.asSharedFlow()\n    private var travelledPath: MutableList<GoogleLatLng> = mutableStateListOf()\n\n    private val _hazardousLaneMarkers = mutableStateListOf<HazardousLaneMarker>()\n    val hazardousLaneMarkers: List<HazardousLaneMarker> = _hazardousLaneMarkers\n\n    init {\n        trackingHandler = TrackingStateHandler(state = _state, eventFlow = _eventFlow)\n        loadData()\n        observeDataChanges()\n        getMapType()\n        getShouldShowHazardousStartingInfo()\n        refreshToken()\n    }\n\n    private fun setShouldShowHazardousStartingInfo(shouldShow: Boolean) {\n        viewModelScope.launch {\n            mappingUseCase.shouldHazardousStartingInfoUseCase(shouldShow = shouldShow)\n        }\n    }\n\n    private fun getShouldShowHazardousStartingInfo() {\n        viewModelScope.launch {\n            mappingUseCase.shouldHazardousStartingInfoUseCase().catch {\n                it.handleException()\n            }.onEach { shouldShow ->\n                _state.update { it.copy(shouldShowHazardousStartingInfo = shouldShow) }\n            }.launchIn(this)\n        }\n    }\n\n\n    private fun observeDataChanges() {\n        subscribeToLocationUpdates()\n        subscribeToNearbyUsersUpdates()\n        subscribeToRescueTransactionUpdates()\n        subscribeToTransactionLocationUpdates()\n        subscribeToBottomSheetTypeUpdates()\n        subscribeToHazardousLaneUpdates()\n    }\n\n    private fun getMapType() {\n        viewModelScope.launch {\n            mappingUseCase.mapTypeUseCase()\n                .distinctUntilChanged()\n                .catch {\n                    Timber.v(\"Error getting map type: ${it.message}\")\n                }.onEach { mapType ->\n                    _state.update { it.copy(mapType = mapType) }\n                }.launchIn(this)\n\n        }\n    }\n\n    private fun subscribeToHazardousLaneUpdates() {\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.newHazardousLaneUseCase(\n                onAddedHazardousMarker = ::handleAddedHazardousMarker,\n                onModifiedHazardousMarker = ::handleModifiedHazardousMarker,\n                onRemovedHazardousMarker = ::handleRemovedHazardousMarker\n            )\n        }\n    }\n\n    private fun handleAddedHazardousMarker(marker: HazardousLaneMarker) {\n        _hazardousLaneMarkers.removeAll { it.id == marker.id }\n        _hazardousLaneMarkers.add(marker)\n    }\n\n    private fun handleModifiedHazardousMarker(modifiedMarker: HazardousLaneMarker) {\n        _hazardousLaneMarkers.removeAll { it.id == modifiedMarker.id }\n        _hazardousLaneMarkers.add(modifiedMarker)\n    }\n\n    private fun handleRemovedHazardousMarker(markerId: String) {\n        _hazardousLaneMarkers.removeAll { it.id == markerId }\n    }\n\n\n    private fun subscribeToBottomSheetTypeUpdates() {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.bottomSheetTypeUseCase().catch {\n                it.handleException()\n            }.onEach {\n                if (it.isEmpty()) {\n                    return@onEach\n                }\n                _eventFlow.emit(value = MappingEvent.NewBottomSheetType(it))\n            }.launchIn(this)\n        }\n    }\n\n    private fun loadData() {\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n//            createMockUpUsers()\n            trackingHandler.updateClient()\n\n        }\n    }\n\n\n\n\n    private fun acceptRescueRequest(id: String) {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            val rescuer = state.value.nearbyCyclist?.findUser(id) ?: return@launch\n            val transactionId = trackingHandler.getTransactionId(rescuer)\n            val user = state.value.user\n\n            trackingHandler.checkCurrentTransactions(user = user, rescuer = rescuer) {\n\n                coroutineScope {\n                    runCatching {\n                        isLoading(true)\n\n                        mappingUseCase.acceptRescueRequestUseCase(\n                            transactionId = transactionId,\n                            rescuer = rescuer,\n                            user = state.value.user\n                        )\n\n\n                    }.onSuccess { rescueTransaction ->\n                        broadcastRescueTransaction()\n                        assignRequestTransaction(\n                            rescueTransaction = rescueTransaction,\n                            user = user,\n                            rescuer = rescuer,\n                            transactionId = transactionId\n                        )\n                        user.location?.let { broadcastRescueTransactionToRespondent(it) }\n                    }.onFailure { exception ->\n                        isLoading(false)\n                        exception.handleException()\n                    }\n                }\n\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n\n            }\n        }\n    }\n\n    private fun cancelHelpRequest() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                isLoading(true)\n                cancelUserHelpRequest()\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelHelpRequestSuccess)\n                broadcastToNearbyCyclists()\n            }.onFailure { exception ->\n                Timber.e(\"Failed to cancel search assistance: ${exception.message}\")\n                exception.handleException()\n            }\n            isLoading(false)\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n        }\n    }\n\n    private fun destinationArrived() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                rescuerArrived()\n                removeUserTransaction(id = getId())\n            }.onSuccess {\n                broadcastToNearbyCyclists()\n                isLoading(false)\n                _eventFlow.emit(value = MappingEvent.RescueArrivedSuccess)\n            }.onFailure { exception ->\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n    private fun cancelRescueTransaction() {\n        viewModelScope.launch(context = defaultDispatcher + SupervisorJob()) {\n            runCatching {\n                removeUserTransaction(id = getId())\n            }.onSuccess {\n                broadcastToNearbyCyclists()\n                isLoading(false)\n                trackingHandler.clearTransactionRoles()\n                _eventFlow.emit(value = MappingEvent.CancelRescueTransactionSuccess)\n            }.onFailure { exception ->\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n    private fun selectRescueeMapIcon(id: String) {\n        viewModelScope.launch(context = defaultDispatcher) {\n\n            val userLocation = state.value.user.location ?: state.value.userLocation\n\n            if (!userLocation.isLocationAvailable()) {\n                viewModelScope.launch(context = defaultDispatcher) {\n                    _eventFlow.emit(value = MappingEvent.LocationNotAvailable(\"Tracking your Location\"))\n                }\n                return@launch\n            }\n\n            calculateSelectedRescueeDistance(userLocation, id)\n\n        }\n    }\n\n    private fun respondToHelp(selectedRescuee: MapSelectedRescuee) {\n        viewModelScope.launch(context = defaultDispatcher + SupervisorJob()) {\n            uploadUserProfile(onSuccess = {\n                viewModelScope.launch(this.coroutineContext) {\n                    runCatching {\n                        mappingUseCase.addRescueRespondentUseCase(\n                            userId = selectedRescuee.userId,\n                            respondentId = getId()\n                        )\n                    }.onSuccess {\n                        broadcastToNearbyCyclists()\n                        broadcastRescueTransaction()\n                        _state.update { it.copy(respondedToHelp = true) }\n                        _eventFlow.emit(value = MappingEvent.RespondToHelpSuccess())\n\n                    }.onFailure {\n                        it.handleException()\n                    }\n                }\n            })\n        }\n    }\n\n    private fun showRouteDirection(origin: Point, destination: Point) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                mappingUseCase.getRouteDirectionsUseCase(origin = origin, destination = destination)\n            }.onSuccess { routeDirection ->\n                _eventFlow.emit(value = MappingEvent.GenerateRouteNavigationSuccess(routeDirection))\n            }.onFailure {\n                it.handleException()\n            }\n        }\n    }\n\n\n    private suspend fun broadcastRescueTransaction() {\n        runCatching {\n            mappingUseCase.broadcastRescueTransactionUseCase()\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n    private suspend fun broadcastToNearbyCyclists() {\n        val location = state.value.userLocation ?: return\n        location.longitude ?: return\n        location.latitude ?: return\n\n        runCatching {\n            mappingUseCase.nearbyCyclistsUseCase(\n                locationModel = LiveLocationSocketModel(\n                    latitude = location.latitude,\n                    longitude = location.longitude\n                )\n            )\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n    private fun refreshToken() {\n        viewModelScope.launch(SupervisorJob()) {\n            runCatching {\n                isLoading(true)\n                messagingUseCase.refreshTokenUseCase()\n            }.onSuccess {\n                Timber.v(\"Successfully refreshed token\")\n            }.onFailure {\n                Timber.e(\"Failed to refresh token ${it.message}\")\n            }.also {\n                isLoading(false)\n            }\n        }\n    }\n\n    private fun declineRescueRequest(id: String) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                isLoading(true)\n                mappingUseCase.deleteRescueRespondentUseCase(userId = getId(), respondentId = id)\n            }.onSuccess {\n                removeRescueRespondent(id)\n                broadcastToNearbyCyclists()\n            }.onFailure {\n                it.handleDeclineRescueRequest()\n            }\n            isLoading(false)\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n\n        }\n    }\n\n    private suspend fun removeRescueRespondent(id: String) {\n        state.value.newRescueRequest?.request?.toMutableList()?.apply {\n            val respondentRemoved = removeAll { it.id == id }\n            if (!respondentRemoved) {\n                _eventFlow.emit(value = MappingEvent.RemoveRespondentFailed())\n                return@apply\n            }\n            _state.update {\n                it.copy(\n                    newRescueRequest = NewRescueRequestsModel(this)\n                )\n            }\n        }\n    }\n\n\n    private fun requestHelp() {\n        viewModelScope.launch(context = defaultDispatcher + SupervisorJob()) {\n            runCatching {\n                uploadUserProfile(onSuccess = {\n                    viewModelScope.launch(context = defaultDispatcher) {\n                        _eventFlow.emit(MappingEvent.RequestHelpSuccess)\n                        subscribeToNearbyUsersUpdates()\n                        subscribeToRescueTransactionUpdates()\n                        subscribeToTransactionLocationUpdates()\n                    }\n                })\n            }.onFailure {\n                it.handleException()\n            }\n        }.invokeOnCompletion {\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n        }\n    }\n\n    fun onEvent(event: MappingVmEvent) {\n        when (event) {\n\n\n            is MappingVmEvent.GetRouteDirections -> {\n                showRouteDirection(origin = event.origin, destination = event.destination)\n            }\n\n            is MappingVmEvent.RespondToHelp -> {\n                respondToHelp(event.selectedRescuee)\n            }\n\n            is MappingVmEvent.SelectRescueMapIcon -> {\n                selectRescueeMapIcon(event.id)\n            }\n\n            is MappingVmEvent.RequestHelp -> {\n                requestHelp()\n            }\n\n\n            is MappingVmEvent.DeclineRescueRequest -> {\n                declineRescueRequest(event.id)\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.AcceptRescueRequest -> {\n                acceptRescueRequest(event.id)\n            }\n\n            is MappingVmEvent.CancelSearchingAssistance -> {\n                cancelHelpRequest()\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.ReportIncident -> {\n                calculateIncidentDistance(\n                    latLng = event.latLng,\n                    label = event.label,\n                    incidentDescription = event.description)\n            }\n\n            is MappingVmEvent.SetMapType -> {\n                setMapType(mapType = event.mapType)\n            }\n\n            is MappingVmEvent.SelectHazardousLaneMarker -> {\n                selectHazardousLaneMarker(id = event.id)\n            }\n\n            is MappingVmEvent.DeleteHazardousLaneMarker -> {\n                deleteHazardousLaneMarker(id = event.id)\n            }\n\n            is MappingVmEvent.UpdateReportedIncident -> {\n                updateReportedIncident(marker = event.marker)\n            }\n\n            is MappingVmEvent.ShouldShowHazardousStartingInfo ->\n                setShouldShowHazardousStartingInfo(event.shouldShow)\n\n            is MappingVmEvent.NotifyNewRescueRequest -> {\n                mappingUseCase.newRescueRequestNotificationUseCase(\n                    message = event.message\n                )\n            }\n\n            is MappingVmEvent.NotifyRequestAccepted -> {\n                mappingUseCase.requestAcceptedNotificationUseCase(\n                    message = event.message\n                )\n            }\n\n            is MappingVmEvent.CancelRespondHelp -> cancelRespondToHelp(respondentId = event.id)\n\n\n            is MappingVmEvent.CancelRescueTransaction -> {\n                cancelRescueTransaction()\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.DestinationArrived -> {\n                destinationArrived()\n                clearTravelledPath()\n            }\n\n            MappingVmEvent.ArrivedAtLocation -> {\n                arrivedAtLocation()\n            }\n        }\n        savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n    }\n\n\n    private fun arrivedAtLocation(){\n        viewModelScope.launch(Dispatchers.IO){\n            runCatching {\n                val transactionId = state.value.getTransactionId()\n                mappingUseCase.rescueFinishUseCase(transactionId = transactionId)\n            }.onSuccess {\n                Timber.v(\"Successfully finished rescue transaction\")\n                broadcastRescueTransaction()\n            }.onFailure {\n                Timber.e(\"Failed to finish rescue transaction ${it.message}\")\n                it.handleException()\n            }\n        }\n    }\n\n    private fun rescuerArrived() {\n        val role = state.value.user.getRole()\n        val rideDetails = trackingHandler.getRideDetails()\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n            runCatching {\n                if (role == Role.Rescuee.name) {\n                    rescueRecordUseCase.addRescueRecordUseCase(rideDetails = rideDetails)\n                }else{\n                    val rideMetrics = trackingHandler.getRideMetrics()\n                    rescueRecordUseCase.rideMetricsUseCase(rideMetrics = rideMetrics)\n                    rescueRecordUseCase.addRideMetrics(rideId = rideDetails.rideId, rideMetrics = rideMetrics)\n                    rescueRecordUseCase.updateStatsUseCase(userStats = UserStats(\n                        rescuerId = rideDetails.rescuerId,\n                        rescueeId = rideDetails.rescueeId,\n                        rescueOverallDistanceInMeters = rideMetrics.distanceInMeters,\n                        rescueAverageSpeedMps = rideMetrics.averageSpeedMps,\n                        rescueDescription = toRescueDescription(rideDetails.rideSummary.iconDescription) ?: \"\"\n                    ))\n                }\n            }.onSuccess {\n                rescueRecordUseCase.rescueDetailsUseCase(details = rideDetails)\n                trackingHandler.clearTransactionRoles()\n\n            }.onFailure {\n                _eventFlow.emit(value = MappingEvent.RescueArrivedFailed(it.message ?: \"Rescuer Arrived\"))\n            }\n        }\n    }\n\n    private fun cancelRespondToHelp(respondentId: String) {\n        viewModelScope.launch {\n            runCatching {\n                isLoading(true)\n                mappingUseCase.cancelHelpRespondUseCase(\n                    userId = getId(),\n                    respondentId = respondentId)\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelRespondSuccess)\n                broadcastToNearbyCyclists()\n                _state.update { it.copy(respondedToHelp = false) }\n            }.onFailure {\n                it.handleException()\n            }.also {\n                isLoading(false)\n            }\n        }\n    }\n\n\n    private fun updateReportedIncident(marker: HazardousLaneMarker) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.updateHazardousLaneUseCase(\n                    hazardousLaneMarker = marker\n                )\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.UpdateIncidentSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.UpdateIncidentFailed(\n                        it.message ?: \"Failed to update incident\"))\n            }\n        }\n    }\n\n\n    private fun deleteHazardousLaneMarker(id: String) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.deleteHazardousLaneUseCase(id)\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.DeleteHazardousLaneMarkerSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.DeleteHazardousLaneMarkerFailed(\n                        it.message ?: \"Failed to delete incident marker\"))\n            }\n        }\n    }\n\n    private fun selectHazardousLaneMarker(id: String) {\n        viewModelScope.launch {\n            hazardousLaneMarkers.find { it.id == id }?.let { marker ->\n                _eventFlow.emit(value = MappingEvent.SelectHazardousLaneMarker(marker))\n            }\n        }\n    }\n\n\n    private fun calculateIncidentDistance(\n        latLng: LatLng,\n        label: String,\n        incidentDescription: String) {\n\n        viewModelScope.launch {\n            val userLocation = state.value.getCurrentLocation()\n\n            if (userLocation == null) {\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@launch\n            }\n\n            val distance = mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = userLocation,\n                destinationLocation = LocationModel(\n                    latitude = latLng.latitude,\n                    longitude = latLng.longitude\n                )\n            )\n\n            if (distance > DEFAULT_RADIUS) {\n                _eventFlow.emit(MappingEvent.IncidentDistanceTooFar)\n                return@launch\n            }\n\n            reportIncident(\n                label = label,\n                latLng = latLng,\n                incidentDescription = incidentDescription)\n\n\n        }\n\n    }\n\n    private fun setMapType(mapType: String) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.mapTypeUseCase(mapType = mapType)\n            }.onSuccess {\n                Timber.v(\"Success setting map type: $it\")\n            }.onFailure {\n                Timber.e(\"Error setting map type: ${it.message}\")\n            }\n        }\n    }\n\n    private suspend fun reportIncident(\n        label: String,\n        latLng: LatLng,\n        incidentDescription: String) {\n\n\n        coroutineScope {\n            runCatching {\n                mappingUseCase.newHazardousLaneUseCase(\n                    hazardousLaneMarker = HazardousLaneMarker(\n                        id = getId() + System.currentTimeMillis(),\n                        idCreator = getId(),\n                        latitude = latLng.latitude,\n                        longitude = latLng.longitude,\n                        label = label,\n                        description = incidentDescription,\n\n                        ))\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.ReportIncidentSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.ReportIncidentFailed(\n                        reason = it.message ?: \"Failed to report incident\"))\n            }\n        }\n    }\n\n    private suspend fun calculateSelectedRescueeDistance(userLocation: LocationModel?, id: String) {\n        val selectedRescuee = state.value.nearbyCyclist?.findUser(id) ?: return\n        val selectedRescueeLocation = selectedRescuee.location\n\n\n        runCatching {\n            isLoading(true)\n            mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = LocationModel(\n                    latitude = userLocation?.latitude,\n                    longitude = userLocation?.longitude\n                ), destinationLocation = LocationModel(\n                    latitude = selectedRescueeLocation!!.latitude,\n                    longitude = selectedRescueeLocation.longitude\n                )\n            )\n        }.onSuccess { distance ->\n            val timeRemaining = FormatterUtils.getCalculatedETA(distance)\n            trackingHandler.showSelectedRescuee(\n                selectedRescuee = selectedRescuee,\n                distance = distance,\n                timeRemaining = timeRemaining)\n        }.onFailure {\n            _eventFlow.emit(value = MappingEvent.FailedToCalculateDistance)\n        }.also {\n            isLoading(false)\n        }\n    }\n\n\n    private suspend fun removeUserTransaction(id: String) {\n        mappingUseCase.createUserUseCase(\n            user = UserItem.removeUserTransaction(id)\n        )\n    }\n\n\n    private fun subscribeToTransactionLocationUpdates() {\n\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.transactionLocationUseCase().distinctUntilChanged().catch {\n                Timber.e(\"ERROR GETTING TRANSACTION LOCATION: ${it.message}\")\n            }.onEach { liveLocation ->\n                trackingHandler.updateTransactionLocation(location = liveLocation)\n                liveLocation.updateTransactionETA()\n            }.launchIn(this@launch)\n\n        }\n    }\n\n\n\n    private fun LiveLocationSocketModel.updateTransactionETA() {\n        val userLocation = state.value.userLocation\n        userLocation ?: return\n        this.latitude ?: return\n        this.longitude ?: return\n\n        val eta = getETABetweenTwoPoints(\n            startingLocation = LocationModel(\n                latitude = this.latitude,\n                longitude = this.longitude\n            ), endLocation = userLocation\n        )\n\n        val distance = mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = LocationModel(\n                latitude = this.latitude,\n                longitude = this.longitude\n            ),\n            destinationLocation = userLocation)\n        _state.update { it.copy(rescueETA = eta, rescueDistance = distance) }\n    }\n\n    private fun getETABetweenTwoPoints(\n        startingLocation: LocationModel,\n        endLocation: LocationModel\n    ): String {\n        val distance = mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = startingLocation,\n            destinationLocation = endLocation\n        )\n\n        return FormatterUtils.getCalculatedETA(distanceMeters = distance)\n    }\n\n\n    private suspend fun assignRequestTransaction(\n        rescueTransaction: RescueTransactionItem,\n        user: UserItem,\n        rescuer: UserItem,\n        transactionId: String\n    ) {\n\n        runCatching {\n\n            user.assignRequestTransaction(role = Role.Rescuee.name, transactionId = transactionId)\n            rescuer.assignRequestTransaction(role = Role.Rescuer.name, transactionId = transactionId)\n\n        }.onSuccess {\n            broadcastToNearbyCyclists()\n            _eventFlow.emit(value = MappingEvent.AcceptRescueRequestSuccess)\n            delay(500)\n            updateTransactionETA(rescuer, rescueTransaction)\n            isLoading(false)\n            broadcastRescueTransaction()\n        }.onFailure { exception ->\n            isLoading(false)\n            exception.handleException()\n        }\n\n    }\n\n    private fun updateTransactionETA(rescuer: UserItem, rescueTransaction: RescueTransactionItem) {\n        val userLocation = state.value.userLocation ?: return\n\n        val estimatedTimeArrival = rescuer.location?.let {\n            getETABetweenTwoPoints(\n                startingLocation = it,\n                endLocation = userLocation\n            )\n        }\n\n        val distance = rescuer.location?.let {\n            mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = it,\n                destinationLocation = userLocation)\n        }\n        _state.update {\n            it.copy(\n                rescueTransaction = rescueTransaction,\n                rescueETA = estimatedTimeArrival ?: \"\",\n                rescueDistance = distance ?: 0.0,\n                rescuer = rescuer\n            )\n        }\n    }\n\n    private fun isLoading(loading: Boolean) {\n        _state.update { it.copy(isLoading = loading) }\n    }\n\n\n    private suspend fun UserItem.assignRequestTransaction(role: String, transactionId: String?) {\n        mappingUseCase.createUserUseCase(\n            user = this.assignTransaction(transactionId = transactionId!!, role = role)\n        )\n    }\n\n\n    private suspend fun Throwable.handleDeclineRescueRequest() {\n        when (this) {\n            is MappingExceptions.NetworkException -> {\n                _eventFlow.emit(value = MappingEvent.NoInternetConnection)\n            }\n\n            else -> {\n                Timber.d(\"Failed to update user\")\n            }\n        }\n    }\n\n\n    private suspend fun cancelUserHelpRequest() {\n\n        mappingUseCase.createUserUseCase(\n            user = UserItem.cancelUserHelpRequest(id = getId()))\n    }\n\n\n    private fun NearbyCyclist.filterUser() {\n\n        runCatching {\n            getId()\n        }.onSuccess { id ->\n            findUser(id = id)?.let { user ->\n                val respondents = user.getUserRescueRespondents(this).distinctBy { it.id }\n                _state.update {\n                    it.copy(\n                        newRescueRequest = NewRescueRequestsModel(request = respondents),\n                        user = user)\n                }\n            }\n        }.onFailure {\n            Timber.e(\"Failed to get user: ${it.message}\")\n        }\n\n    }\n\n\n    private fun UserItem.getUserRescueRespondents(nearbyCyclist: NearbyCyclist): List<RescueRequestItemModel> {\n        val rescueRespondentsSnapShot: MutableList<RescueRequestItemModel> = mutableListOf()\n\n        rescueRequest?.respondents?.forEach { respondent ->\n            val userRespondent = nearbyCyclist.findUser(id = respondent.clientId) ?: UserItem()\n            val distance =\n                calculateDistance(startLocation = location, endLocation = userRespondent.location)\n\n            distance?.let {\n                val formattedETA = FormatterUtils.getCalculatedETA(distanceMeters = it)\n                rescueRespondentsSnapShot.add(\n                    element = userRespondent.toRescueRequest(\n                        distance = it.formatToDistanceKm(),\n                        eta = formattedETA,\n                        timestamp = respondent.timeStamp\n                    )\n                )\n            }\n        }\n\n        return rescueRespondentsSnapShot.distinct()\n    }\n\n    private fun calculateDistance(\n        startLocation: LocationModel?,\n        endLocation: LocationModel?): Double? {\n        val startLatitude = startLocation?.latitude ?: return null\n        val startLongitude = startLocation.longitude ?: return null\n        val endLatitude = endLocation?.latitude ?: return null\n        val endLongitude = endLocation.longitude ?: return null\n\n        return mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = LocationModel(latitude = startLatitude, longitude = startLongitude),\n            destinationLocation = LocationModel(latitude = endLatitude, longitude = endLongitude)\n        )\n    }\n\n    private fun NearbyCyclist.updateNearbyCyclists() {\n\n        _state.update {\n            it.copy(nearbyCyclist = NearbyCyclist())\n        }\n        _state.update {\n            it.copy(nearbyCyclist = this)\n        }\n    }\n\n    private suspend fun broadcastRescueTransactionToRespondent(location: LocationModel) {\n        val rescueTransaction = state.value.rescueTransaction ?: return\n        runCatching {\n\n            val transaction = state.value.user.transaction\n            val user = state.value.user\n\n            if (transaction?.transactionId?.isEmpty() == true) {\n                return@runCatching\n            }\n\n            mappingUseCase.transactionLocationUseCase(\n                LiveLocationSocketModel(\n                    latitude = location.latitude,\n                    longitude = location.longitude,\n                    room = rescueTransaction.id\n                ),\n                user = user,\n                rescueTransactionItem = rescueTransaction\n            )\n\n        }.onSuccess {\n            Timber.v(\"Broadcasting location to transaction success\")\n        }.onFailure {\n            Timber.v(\"Broadcasting location to transaction failed: ${it.message}\")\n        }\n    }\n\n\n\n\n    private fun removeHazardousLaneListener() {\n        mappingUseCase.removeHazardousListenerUseCase()\n    }\n\n\n    private fun subscribeToRescueTransactionUpdates() {\n\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.getRescueTransactionUpdatesUseCase().catch {\n                Timber.e(\"ERROR GETTING RESCUE TRANSACTION: ${it.message}\")\n\n            }.onEach { rescueTransactions ->\n                rescueTransactions.updateCurrentRescueTransaction()\n                trackingHandler.filterRescueRequestAccepted(\n                    rescueTransaction = rescueTransactions,\n                    id = getId()\n                )\n                trackingHandler.updateClient()\n            }.launchIn(this@launch).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n\n        }\n    }\n\n\n    private fun RescueTransaction.updateCurrentRescueTransaction() {\n        val rescueTransaction = trackingHandler.filterUserRescueTransaction(this)\n        _state.update { it.copy(rescueTransaction = rescueTransaction) }\n    }\n\n\n    private fun subscribeToLocationUpdates() {\n        if (locationUpdatesJob?.isActive == true) {\n            return\n        }\n        locationUpdatesJob = viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.getUserLocationUseCase().catch {\n                Timber.e(\"Error Location Updates: ${it.message}\")\n            }.onEach { location ->\n                trackingHandler.updateLocation(location)\n                broadcastRescueTransactionToRespondent(location)\n                updateSpeedometer(location)\n                if (state.value.nearbyCyclist == null) {\n                    broadcastToNearbyCyclists()\n                }\n\n            }.launchIn(this@launch).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun updateSpeedometer(location: LocationModel) {\n        val isUserRescuer = state.value.user.isRescuer()\n        if (!isUserRescuer) {\n            return\n        }\n\n        val distance = SphericalUtil.computeLength(travelledPath)\n\n\n        trackingHandler.setSpeed(location.speed)\n        trackingHandler.getTopSpeed(location.speed)\n        travelledPath.add(element = GoogleLatLng(location.latitude!!, location.longitude!!))\n\n        trackingHandler.setTravelledDistance(distance)\n    }\n\n\n    private fun subscribeToNearbyUsersUpdates() {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.nearbyCyclistsUseCase().catch {\n                Timber.e(\"ERROR GETTING USERS: ${it.message}\")\n            }.onEach {\n                it.filterUser()\n                it.updateNearbyCyclists()\n                Timber.v(\"Receiving from subscribeToNearbyUsersChanges\")\n                trackingHandler.updateClient()\n            }.launchIn(this).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun unSubscribeToLocationUpdates() {\n        locationUpdatesJob?.cancel()\n    }\n\n\n    private suspend inline fun uploadUserProfile(crossinline onSuccess: () -> Unit) {\n        coroutineScope {\n            val userLocation = state.value.userLocation\n\n\n            if (userLocation == null) {\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@coroutineScope\n            }\n\n            if(userLocation.longitude == null && userLocation.latitude == null){\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@coroutineScope\n            }\n\n\n\n            uploadProfile(location = userLocation, onSuccess = onSuccess)\n\n        }\n    }\n\n\n    private suspend inline fun uploadProfile(\n        location: LocationModel,\n        crossinline onSuccess: () -> Unit\n    ) {\n\n        val isProfileUploaded = state.value.profileUploaded\n\n        if (isProfileUploaded) {\n            onSuccess()\n            return\n        }\n\n        coroutineScope {\n\n            runCatching {\n                isLoading(true)\n\n                val fullAddress = mappingUseCase.getFullAddressUseCase(\n                    latitude = location.latitude,\n                    longitude = location.longitude\n                )\n\n                fullAddress?.let { mappingUseCase.addressUseCase(it) }\n                mappingUseCase.createUserUseCase(\n                    user = UserItem(\n                        id = getId(),\n                        name = getName(),\n                        address = fullAddress,\n                        profilePictureUrl = getPhotoUrl(),\n                        location = LocationModel(\n                            latitude = location.latitude,\n                            longitude = location.longitude\n                        ),\n                        rescueRequest = RescueRequest(),\n                        userAssistance = UserAssistanceModel(),\n                        rescuePending = RescuePending()\n                    )\n                )\n\n\n            }.onSuccess {\n                isLoading(false)\n                broadcastToNearbyCyclists()\n                onSuccess()\n                _state.update { it.copy(profileUploaded = true) }\n\n            }.onFailure { exception ->\n                Timber.e(\"Error uploading profile: ${exception.message}\")\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n\n    private suspend fun Throwable.handleException() {\n        trackingHandler.handleException(this)\n        savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n    }\n\n\n    private suspend fun createMockUpUsers() {\n        runCatching {\n            mappingUseCase.createMockUsers()\n        }.onSuccess {\n            Timber.v(\"CREATED MOCK USERS!\")\n            broadcastToNearbyCyclists()\n        }.onFailure {\n            Timber.e(\"FAILED TO CREATE MOCK USERS: ${it.message}\")\n        }\n    }\n\n    private fun removeBottomSheet() {\n        viewModelScope.launch(SupervisorJob()) {\n            mappingUseCase.bottomSheetTypeUseCase(bottomSheet = \"\")\n        }\n    }\n\n\n    override fun onCleared() {\n        super.onCleared()\n        removeBottomSheet()\n        unSubscribeToLocationUpdates()\n        removeHazardousLaneListener()\n\n\n    }\n\n\n    private fun getId(): String = authUseCase.getIdUseCase()\n\n    private suspend fun getName(): String = userProfileUseCase.getNameUseCase()\n\n    private suspend fun getPhotoUrl() = userProfileUseCase.getPhotoUrlUseCase()\n\n    private fun clearTravelledPath() {\n        travelledPath = mutableListOf()\n    }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt	(revision 92ee2bd1d7dc4587c87a405a9867dcdb23791407)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt	(date 1699120294583)
@@ -191,7 +191,6 @@
         viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {
 
             val rescuer = state.value.nearbyCyclist?.findUser(id) ?: return@launch
-            val transactionId = trackingHandler.getTransactionId(rescuer)
             val user = state.value.user
 
             trackingHandler.checkCurrentTransactions(user = user, rescuer = rescuer) {
@@ -201,10 +200,10 @@
                         isLoading(true)
 
                         mappingUseCase.acceptRescueRequestUseCase(
-                            transactionId = transactionId,
-                            rescuer = rescuer,
-                            user = state.value.user
+                            userId = getId(),
+                            rescuerId = id
                         )
+
 
 
                     }.onSuccess { rescueTransaction ->
Index: app/src/main/java/com/example/cyclistance/feature_mapping/data/CyclistanceApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.data\n\nimport com.example.cyclistance.feature_mapping.data.data_source.network.dto.rescue_transaction.RescueTransactionItemDto\nimport com.example.cyclistance.feature_mapping.data.data_source.network.dto.user_dto.UserItemDto\nimport retrofit2.http.*\n\ninterface CyclistanceApi {\n\n\n    @GET(\"/api/v1/get-user-by-id/{user_id}\")\n    suspend fun getUserById(@Path(\"user_id\") userId: String): UserItemDto\n\n    @POST(\"/api/v1/create-user\")\n    suspend fun createUser(@Body userItemDto: UserItemDto)\n\n    @DELETE(\"/api/v1/delete-user/{user_id}\")\n    suspend fun deleteUser(@Path(\"user_id\") itemId: String)\n\n\n\n\n\n    @DELETE(\"/api/v1/delete-rescue-respondent/{user_id}/{respondent_id}\")\n    suspend fun deleteRescueRespondent(@Path(\"user_id\") userId: String, @Path(\"respondent_id\") respondentId: String)\n\n    @PUT(\"/api/v1/add-rescue-respondent/{user_id}/{respondent_id}\")\n    suspend fun addRescueRespondent(@Path(\"user_id\") userId: String, @Path(\"respondent_id\") respondentId: String)\n\n    @DELETE(\"/api/v1/delete-all-respondents/{user_id}\")\n    suspend fun deleteAllRespondents(@Path(\"user_id\") userId: String)\n\n    @PUT(\"/api/v1/cancel-help-respond/{user_id}/{respondent_id}\")\n    suspend fun cancelHelpRespond(@Path(\"user_id\") userId: String, @Path(\"respondent_id\") respondentId: String)\n\n\n    @GET(\"/api/v1/get-rescue-transaction-by-id/{rescue_transaction_id}\")\n    suspend fun getRescueTransactionById(@Path(\"rescue_transaction_id\") userId: String): RescueTransactionItemDto\n\n    @POST(\"/api/v1/create-rescue-transaction\")\n    suspend fun createRescueTransaction(@Body rescueTransactionItemDto: RescueTransactionItemDto)\n\n    @DELETE(\"/api/v1/delete-rescue-transaction/{rescue_transaction_id}\")\n    suspend fun deleteRescueTransaction(@Path(\"rescue_transaction_id\") itemId: String)\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/data/CyclistanceApi.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/data/CyclistanceApi.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/data/CyclistanceApi.kt	(revision 92ee2bd1d7dc4587c87a405a9867dcdb23791407)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/data/CyclistanceApi.kt	(date 1699119949964)
@@ -33,6 +33,9 @@
     suspend fun cancelHelpRespond(@Path("user_id") userId: String, @Path("respondent_id") respondentId: String)
 
 
+    @PUT("api/v1/accept-rescue-request/{user_id}/{rescuer_id}")
+    suspend fun acceptRescueRequest(@Path("user_id") userId: String, @Path("rescuer_id") rescuerId: String)
+
     @GET("/api/v1/get-rescue-transaction-by-id/{rescue_transaction_id}")
     suspend fun getRescueTransactionById(@Path("rescue_transaction_id") userId: String): RescueTransactionItemDto
 
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.repository\n\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.mapbox.geojson.Point\nimport kotlinx.coroutines.flow.Flow\n\ninterface MappingRepository {\n    suspend fun getUserById(userId: String): Flow<UserItem>\n    suspend fun createUser(userItem: UserItem)\n    suspend fun deleteUser(id: String)\n\n\n    suspend fun deleteRescueRespondent(userId: String, respondentId: String)\n    suspend fun addRescueRespondent(userId: String, respondentId: String)\n    suspend fun cancelHelpRespond(userId: String, respondentId: String)\n    suspend fun deleteAllRespondents(userId: String)\n\n\n    suspend fun getFullAddress(latitude: Double, longitude: Double): String\n    suspend fun getRescueTransactionById(transactionId: String): Flow<RescueTransactionItem>\n    suspend fun createRescueTransaction(rescueTransaction: RescueTransactionItem)\n    suspend fun deleteRescueTransaction(transactionId: String)\n\n\n    suspend fun getUserLocation(): Flow<LocationModel>\n\n\n    suspend fun addHazardousLaneListener(\n        onAddedHazardousMarker: (HazardousLaneMarker) -> Unit,\n        onModifiedHazardousMarker: (HazardousLaneMarker) -> Unit,\n        onRemovedHazardousMarker: (id: String) -> Unit)\n\n    suspend fun addNewHazardousLane(hazardousLaneMarker: HazardousLaneMarker)\n    suspend fun updateHazardousLane(label: String, description: String, id: String)\n    suspend fun deleteHazardousLane(id: String)\n    fun removeHazardousLaneListener()\n\n    suspend fun getRouteDirections(origin: Point, destination: Point): RouteDirection\n    fun getCalculateDistance(startingLocation: LocationModel, destinationLocation: LocationModel):Double\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingRepository.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingRepository.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingRepository.kt	(revision 92ee2bd1d7dc4587c87a405a9867dcdb23791407)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/repository/MappingRepository.kt	(date 1699119987074)
@@ -16,6 +16,7 @@
 
     suspend fun deleteRescueRespondent(userId: String, respondentId: String)
     suspend fun addRescueRespondent(userId: String, respondentId: String)
+    suspend fun acceptRescueRequest(userId: String, rescuerId: String)
     suspend fun cancelHelpRespond(userId: String, respondentId: String)
     suspend fun deleteAllRespondents(userId: String)
 
Index: app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.data.repository\n\nimport android.content.Context\nimport android.location.Address\nimport android.location.Geocoder\nimport android.os.Build\nimport androidx.annotation.WorkerThread\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.API_CALL_RETRY_COUNT\nimport com.example.cyclistance.core.utils.constants.MappingConstants.KEY_HAZARDOUS_LANE_COLLECTION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.KEY_MARKER_FIELD\nimport com.example.cyclistance.core.utils.constants.MappingConstants.KEY_TIMESTAMP_FIELD\nimport com.example.cyclistance.feature_mapping.data.CyclistanceApi\nimport com.example.cyclistance.feature_mapping.data.mapper.RescueTransactionMapper.toRescueTransaction\nimport com.example.cyclistance.feature_mapping.data.mapper.RescueTransactionMapper.toRescueTransactionDto\nimport com.example.cyclistance.feature_mapping.data.mapper.RouteDirectionMapper.toRouteDirection\nimport com.example.cyclistance.feature_mapping.data.mapper.UserMapper.toUserItem\nimport com.example.cyclistance.feature_mapping.data.mapper.UserMapper.toUserItemDto\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.model.*\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingRepository\nimport com.example.cyclistance.service.LocationService\nimport com.google.firebase.firestore.DocumentChange\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.FirebaseFirestoreException\nimport com.google.firebase.firestore.ListenerRegistration\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.mapbox.api.directions.v5.DirectionsCriteria\nimport com.mapbox.api.directions.v5.models.DirectionsRoute\nimport com.mapbox.api.optimization.v1.MapboxOptimization\nimport com.mapbox.api.optimization.v1.models.OptimizationResponse\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.retry\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport kotlinx.coroutines.withContext\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.HttpException\nimport retrofit2.Response\nimport timber.log.Timber\nimport java.io.IOException\nimport java.net.UnknownHostException\nimport java.util.Date\nimport java.util.concurrent.TimeUnit\nimport kotlin.coroutines.CoroutineContext\nimport kotlin.coroutines.resume\nimport kotlin.coroutines.resumeWithException\nimport kotlin.coroutines.suspendCoroutine\n\nclass MappingRepositoryImpl(\n\n    private val api: CyclistanceApi,\n    private val mapboxDirections: MapboxOptimization.Builder,\n    private val context: Context,\n    private val geocoder: Geocoder,\n    private val fireStore: FirebaseFirestore,\n) : MappingRepository {\n\n    private val scope: CoroutineContext = Dispatchers.IO\n    private var hazardousListener: ListenerRegistration? = null\n\n    private inline fun hazardousLaneListener(\n        crossinline onAddedHazardousMarker: (HazardousLaneMarker) -> Unit,\n        crossinline onModifiedHazardousMarker: (HazardousLaneMarker) -> Unit,\n        crossinline onRemovedHazardousMarker: (id: String) -> Unit,\n    ) = { value: QuerySnapshot?, error: FirebaseFirestoreException? ->\n\n        if (error != null) {\n            throw MappingExceptions.HazardousLaneException(\n                message = error?.message ?: \"Unknown error occurred\")\n        }\n\n        if (value == null) {\n            throw MappingExceptions.HazardousLaneException(message = \"No value found\")\n        }\n\n        value.documentChanges.forEach { item ->\n\n            item.document.get(\n                KEY_MARKER_FIELD,\n                HazardousLaneMarker::class.java)?.let { marker ->\n\n                when (item.type) {\n                    DocumentChange.Type.ADDED -> onAddedHazardousMarker(marker)\n                    DocumentChange.Type.MODIFIED -> onModifiedHazardousMarker(marker)\n                    DocumentChange.Type.REMOVED -> onRemovedHazardousMarker(marker.id)\n\n                }\n            }\n        }\n    }\n\n    override suspend fun updateHazardousLane(label: String, description: String, id: String) {\n\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n\n        suspendCancellableCoroutine { continuation ->\n            fireStore.collection(KEY_HAZARDOUS_LANE_COLLECTION).document(id)\n                .update(\n                    mapOf(\n                        \"$KEY_MARKER_FIELD.description\" to description,\n                        \"$KEY_MARKER_FIELD.label\" to label,\n                        \"$KEY_MARKER_FIELD.datePosted\" to Date(),\n                        KEY_TIMESTAMP_FIELD to System.currentTimeMillis()\n                    )).addOnSuccessListener {\n                    continuation.resume(Unit)\n                }.addOnFailureListener {\n                    continuation.resumeWithException(\n                        MappingExceptions.HazardousLaneException(\n                            message = it.message ?: \"Unknown error occurred\"))\n                }\n        }\n    }\n\n    override suspend fun addNewHazardousLane(hazardousLaneMarker: HazardousLaneMarker) {\n\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n\n        suspendCancellableCoroutine { continuation ->\n\n            fireStore\n                .collection(KEY_HAZARDOUS_LANE_COLLECTION)\n                .document(hazardousLaneMarker.id)\n                .set(\n                    mapOf(\n                        KEY_MARKER_FIELD to hazardousLaneMarker,\n                        KEY_TIMESTAMP_FIELD to System.currentTimeMillis()\n                    ))\n                .addOnSuccessListener {\n                    continuation.resume(Unit)\n                }\n                .addOnFailureListener {\n                    continuation.resumeWithException(\n                        MappingExceptions.HazardousLaneException(\n                            message = it.message ?: \"Unknown error occurred\"))\n                }\n\n        }\n\n    }\n\n    override suspend fun addHazardousLaneListener(\n        onAddedHazardousMarker: (HazardousLaneMarker) -> Unit,\n        onModifiedHazardousMarker: (HazardousLaneMarker) -> Unit,\n        onRemovedHazardousMarker: (id: String) -> Unit) {\n\n        val currentTimeMillis = System.currentTimeMillis()\n        val oneWeekAgo = currentTimeMillis - TimeUnit.DAYS.toMillis(7)\n\n        hazardousListener = fireStore.collection(KEY_HAZARDOUS_LANE_COLLECTION)\n            .whereGreaterThan(KEY_TIMESTAMP_FIELD, oneWeekAgo)\n            .orderBy(KEY_TIMESTAMP_FIELD)\n            .addSnapshotListener(\n                hazardousLaneListener(\n                    onAddedHazardousMarker = onAddedHazardousMarker,\n                    onModifiedHazardousMarker = onModifiedHazardousMarker,\n                    onRemovedHazardousMarker = onRemovedHazardousMarker))\n    }\n\n    override fun removeHazardousLaneListener() {\n        hazardousListener?.remove()\n    }\n\n    override suspend fun deleteHazardousLane(id: String) {\n\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n\n        suspendCancellableCoroutine { continuation ->\n\n            fireStore\n                .collection(KEY_HAZARDOUS_LANE_COLLECTION)\n                .document(id)\n                .delete()\n                .addOnSuccessListener {\n                    continuation.resume(Unit)\n                }\n                .addOnFailureListener {\n                    continuation.resumeWithException(\n                        MappingExceptions.HazardousLaneException(\n                            message = it.message ?: \"Unknown error occurred\"))\n                }\n\n        }\n    }\n\n    override suspend fun getFullAddress(latitude: Double, longitude: Double): String {\n        return withContext(scope) {\n            suspendCoroutine { continuation ->\n                geocoder.getAddress(latitude = latitude, longitude = longitude) { address ->\n                    if (address == null) {\n                        continuation.resumeWithException(MappingExceptions.AddressException(\"Searching for GPS\"))\n                        return@getAddress\n                    }\n\n                    val fullAddress = address.getFullAddress()\n\n                    if(fullAddress.isEmpty()){\n                        continuation.resumeWithException(MappingExceptions.AddressException(\"Searching for GPS\"))\n                        return@getAddress\n                    }\n\n                    continuation.resume(fullAddress)\n\n\n                }\n            }\n        }\n    }\n\n    @Suppress(\"DEPRECATION\")\n    @WorkerThread\n    private inline fun Geocoder.getAddress(\n        latitude: Double,\n        longitude: Double,\n        crossinline onCallbackAddress: (Address?) -> Unit) {\n\n        try {\n\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                getFromLocation(\n                    latitude, longitude, 1,\n                ) { addresses ->\n                    onCallbackAddress(addresses.lastOrNull())\n                }\n            } else {\n                onCallbackAddress(getFromLocation(latitude, longitude, 1)?.lastOrNull())\n            }\n\n        } catch (e: IOException) {\n             throw MappingExceptions.NetworkException()\n        }\n    }\n\n    override fun getCalculateDistance(\n        startingLocation: LocationModel,\n        destinationLocation: LocationModel,\n    ): Double {\n\n        startingLocation.latitude ?: throw MappingExceptions.LocationException()\n        startingLocation.longitude ?: throw MappingExceptions.LocationException()\n        destinationLocation.latitude ?: throw MappingExceptions.LocationException()\n        destinationLocation.longitude ?: throw MappingExceptions.LocationException()\n\n\n        return LatLng(startingLocation.latitude, startingLocation.longitude).distanceTo(\n            LatLng(\n                destinationLocation.latitude, destinationLocation.longitude)\n        )\n\n\n    }\n\n    private fun Address.getFullAddress(): String {\n        val subThoroughfare =\n            if (subThoroughfare != \"null\" && subThoroughfare != null) \"$subThoroughfare \" else \"\"\n        val thoroughfare =\n            if (thoroughfare != \"null\" && thoroughfare != null) \"$thoroughfare., \" else \"\"\n        val subAdminArea = if (subAdminArea != \"null\" && subAdminArea != null) subAdminArea else \"\"\n\n        val locality = if (locality != \"null\" && locality != null) \"$locality, \" else \"\"\n        val formattedLocality = if (subAdminArea.isNotEmpty()) locality else locality.replace(\n            oldChar = ',',\n            newChar = ' ',\n            ignoreCase = true\n        )\n\n        return \"$subThoroughfare$thoroughfare$formattedLocality$subAdminArea\"\n    }\n\n\n    override suspend fun getUserById(userId: String): Flow<UserItem> =\n        flow {\n            val user = api.getUserById(userId)\n            emit(user)\n        }.retry(API_CALL_RETRY_COUNT) { cause ->\n            return@retry cause is IOException || cause is HttpException\n        }.catch { cause ->\n            if (cause is IOException || cause is HttpException) {\n                throw MappingExceptions.NetworkException()\n            }\n        }.map { it.toUserItem() }\n\n\n    override suspend fun getUserLocation(): Flow<LocationModel> {\n        return withContext(scope) { LocationService.address }\n    }\n\n\n    override suspend fun createUser(userItem: UserItem) =\n        withContext(scope) {\n            handleException {\n                api.createUser(userItemDto = userItem.toUserItemDto())\n            }\n        }\n\n    override suspend fun deleteUser(id: String) =\n        withContext(scope) {\n            handleException {\n                api.deleteUser(id)\n            }\n        }\n\n    override suspend fun getRescueTransactionById(transactionId: String): Flow<RescueTransactionItem> =\n\n        flow {\n            val transaction = api.getRescueTransactionById(transactionId)\n            emit(transaction)\n        }.retry(API_CALL_RETRY_COUNT) { cause ->\n            return@retry cause is IOException || cause is HttpException\n        }.catch {\n            if (it is IOException || it is HttpException) {\n                throw MappingExceptions.NetworkException()\n            }\n        }.map { it.toRescueTransaction() }\n\n\n    override suspend fun createRescueTransaction(rescueTransaction: RescueTransactionItem) =\n        withContext(scope) {\n            handleException {\n                api.createRescueTransaction(rescueTransaction.toRescueTransactionDto())\n            }\n        }\n\n\n    override suspend fun deleteRescueTransaction(transactionId: String) {\n        withContext(scope) {\n            handleException {\n                api.deleteRescueTransaction(transactionId)\n            }\n        }\n    }\n\n    override suspend fun cancelHelpRespond(userId: String, respondentId: String) {\n        withContext(scope){\n            handleException {\n                api.cancelHelpRespond(userId, respondentId)\n            }\n        }\n    }\n\n    override suspend fun deleteRescueRespondent(userId: String, respondentId: String) {\n        withContext(scope) {\n            handleException {\n                api.deleteRescueRespondent(userId, respondentId)\n            }\n        }\n    }\n\n    override suspend fun addRescueRespondent(userId: String, respondentId: String) {\n        withContext(scope) {\n            handleException {\n                api.addRescueRespondent(userId, respondentId)\n            }\n        }\n    }\n\n    override suspend fun deleteAllRespondents(userId: String) {\n        withContext(scope) {\n            handleException {\n                api.deleteAllRespondents(userId)\n            }\n        }\n    }\n\n    override suspend fun getRouteDirections(origin: Point, destination: Point): RouteDirection {\n\n        if (context.hasInternetConnection().not()) {\n            throw MappingExceptions.NetworkException()\n        }\n\n        val client = mapboxDirections.coordinates(listOf(origin, destination))\n            .profile(DirectionsCriteria.PROFILE_CYCLING)\n            .overview(DirectionsCriteria.OVERVIEW_FULL)\n            .build()\n\n        return withContext(scope) {\n            suspendCoroutine { continuation ->\n                client.enqueueCall(object : Callback<OptimizationResponse> {\n                    override fun onResponse(\n                        call: Call<OptimizationResponse>,\n                        response: Response<OptimizationResponse>) {\n                        val routesAvailable = response.routesAvailable()\n\n                        if (!routesAvailable) {\n                            continuation.resumeWithException(Exception(\"No routes found\"))\n                            return\n                        }\n\n                        val currentRoute = response.getRoute()\n                        continuation.resume(currentRoute.toRouteDirection())\n                    }\n\n                    override fun onFailure(call: Call<OptimizationResponse>, throwable: Throwable) {\n\n                        if(throwable is UnknownHostException){\n                            continuation.resumeWithException(MappingExceptions.NavigationRouteException())\n                            return\n                        }\n\n                        continuation.resumeWithException(throwable)\n                    }\n                })\n            }\n        }\n    }\n}\n\nprivate fun Response<OptimizationResponse>.getRoute(): DirectionsRoute {\n    return body()!!.trips()!!.first()\n}\n\n\nprivate fun Response<OptimizationResponse>.routesAvailable(): Boolean {\n\n    val body = this.body()\n    val hasBody = body != null\n    val hasTrips = body?.trips()?.isNotEmpty() == true\n    return (hasBody && hasTrips)\n}\n\n\nprivate inline fun <T> handleException(action: () -> T): T {\n    return try {\n        action()\n    } catch (e: HttpException) {\n        throw MappingExceptions.UnexpectedErrorException(message = e.message ?: \"Unexpected Error\")\n    } catch (e: IOException) {\n        Timber.e(\"Exception is ${e.message}\")\n        throw MappingExceptions.NetworkException()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingRepositoryImpl.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingRepositoryImpl.kt	(revision 92ee2bd1d7dc4587c87a405a9867dcdb23791407)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/data/repository/MappingRepositoryImpl.kt	(date 1699119993044)
@@ -363,6 +363,15 @@
         }
     }
 
+
+    override suspend fun acceptRescueRequest(userId: String, rescuerId: String) {
+        withContext(scope) {
+            handleException {
+                api.acceptRescueRequest(userId, rescuerId)
+            }
+        }
+    }
+
     override suspend fun addRescueRespondent(userId: String, respondentId: String) {
         withContext(scope) {
             handleException {
