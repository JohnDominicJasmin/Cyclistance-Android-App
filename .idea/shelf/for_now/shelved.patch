Index: .idea/shelf/Changes/shelved.patch
===================================================================
diff --git a/.idea/shelf/Changes/shelved.patch b/.idea/shelf/Changes/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Changes/shelved.patch	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,57 +0,0 @@
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\r\n\r\nimport android.os.Parcelable\r\nimport com.example.cyclistance.core.utils.annotations.StableState\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport com.example.cyclistance.feature_mapping.domain.model.api.rescue_transaction.RouteDirection\r\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\r\nimport kotlinx.parcelize.Parcelize\r\n\r\n\r\n@Parcelize\r\n@StableState\r\ndata class MappingUiState(\r\n    val rescueRequestAccepted: Boolean = false,\r\n    val requestHelpButtonVisible: Boolean = true,\r\n    val searchingAssistance: Boolean = false,\r\n    val isNoInternetVisible: Boolean = false,\r\n    val mapSelectedRescuee: MapSelectedRescuee? = null,\r\n    val routeDirection: RouteDirection? = null,\r\n    val bottomSheetType: String? = null,\r\n    val locationPermissionDialogVisible: Boolean = false,\r\n    val phonePermissionDialogVisible: Boolean = false,\r\n    val isFabExpanded: Boolean = false,\r\n    val alertDialogState: AlertDialogState = AlertDialogState(),\r\n    val isRescueRequestDialogVisible: Boolean = false,\r\n\r\n    ) : Parcelable\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(revision 14bffa0e989b24d0c9f5e99b885befb3b6466022)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(date 1687844989516)
-@@ -21,6 +21,7 @@
-     val locationPermissionDialogVisible: Boolean = false,
-     val phonePermissionDialogVisible: Boolean = false,
-     val isFabExpanded: Boolean = false,
-+    val emergencyCallDialogVisible: Boolean = false,
-     val alertDialogState: AlertDialogState = AlertDialogState(),
-     val isRescueRequestDialogVisible: Boolean = false,
- 
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity.RESULT_OK\r\nimport android.widget.Toast\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.animation.*\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\r\nimport androidx.navigation.NavController\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\r\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\r\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\r\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\r\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\r\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\r\nimport com.example.cyclistance.core.utils.permissions.requestPermission\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport com.example.cyclistance.feature_mapping.domain.model.Role\r\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\r\nimport com.example.cyclistance.navigation.Screens\r\nimport com.example.cyclistance.navigation.navigateScreen\r\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\r\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\r\nimport com.google.accompanist.permissions.rememberPermissionState\r\nimport com.mapbox.core.constants.Constants.PRECISION_6\r\nimport com.mapbox.geojson.Feature\r\nimport com.mapbox.geojson.FeatureCollection\r\nimport com.mapbox.geojson.LineString\r\nimport com.mapbox.geojson.Point\r\nimport com.mapbox.mapboxsdk.geometry.LatLng\r\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\r\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\r\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\r\nimport com.mapbox.mapboxsdk.maps.MapboxMap\r\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport timber.log.Timber\r\n\r\n\r\n@SuppressLint(\"MissingPermission\")\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@ExperimentalPermissionsApi\r\n@Composable\r\nfun MappingScreen(\r\n    hasInternetConnection: Boolean,\r\n    mappingViewModel: MappingViewModel = hiltViewModel(),\r\n    paddingValues: PaddingValues,\r\n    isNavigating: Boolean,\r\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\r\n    navController: NavController) {\r\n\r\n    val context = LocalContext.current\r\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\r\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\r\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\r\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\r\n        mutableStateOf(null)\r\n    }\r\n\r\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\r\n        bottomSheetState = rememberBottomSheetState(initialValue = BottomSheetValue.Collapsed)\r\n    )\r\n\r\n    val collapseBottomSheet = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\r\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    val expandBottomSheet = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\r\n                    bottomSheetScaffoldState.bottomSheetState.expand()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\r\n        permissions = listOf(\r\n            Manifest.permission.ACCESS_FINE_LOCATION,\r\n            Manifest.permission.ACCESS_COARSE_LOCATION))\r\n\r\n\r\n    val userLocationAvailable by remember(\r\n        foregroundLocationPermissionsState.allPermissionsGranted,\r\n        state.userLocation) {\r\n        derivedStateOf {\r\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\r\n        }\r\n    }\r\n\r\n\r\n    val pulsingEnabled by remember(\r\n        uiState.searchingAssistance,\r\n        foregroundLocationPermissionsState.allPermissionsGranted\r\n    ) {\r\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\r\n    }\r\n\r\n\r\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\r\n        {\r\n            mapboxMap?.style?.let { style ->\r\n                if (isNavigating) {\r\n\r\n                    val buildLocationComponentActivationOptions =\r\n                        LocationComponentActivationOptions.builder(context, style)\r\n                            .locationComponentOptions(locationComponentOptions.build())\r\n                            .build()\r\n                    mapboxMap?.locationComponent?.apply {\r\n                        activateLocationComponent(buildLocationComponentActivationOptions)\r\n                        isLocationComponentEnabled = userLocationAvailable\r\n                        cameraMode = CameraMode.NONE\r\n                        renderMode = RenderMode.GPS\r\n\r\n                    }\r\n\r\n                } else {\r\n                    val buildLocationComponentActivationOptions =\r\n                        LocationComponentActivationOptions.builder(context, style)\r\n                            .locationComponentOptions(\r\n                                locationComponentOptions\r\n                                    .changeToNormalPuckIcon(context)\r\n                                    .pulseEnabled(pulsingEnabled)\r\n                                    .build())\r\n                            .build()\r\n                    mapboxMap?.locationComponent?.apply {\r\n                        activateLocationComponent(buildLocationComponentActivationOptions)\r\n                        isLocationComponentEnabled = userLocationAvailable\r\n                        cameraMode = CameraMode.NONE\r\n                        renderMode = RenderMode.NORMAL\r\n                    }\r\n                }\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n\r\n    val locateUser =\r\n        remember(userLocationAvailable, mapboxMap) {\r\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\r\n\r\n                val mapboxLoaded =\r\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\r\n                                                               ?: false)\r\n                if (userLocationAvailable && mapboxLoaded) {\r\n                    showUserLocation()\r\n                    mapboxMap?.animateCameraPosition(\r\n                        latLng = latLng,\r\n                        zoomLevel = zoomLevel,\r\n                        cameraAnimationDuration = cameraAnimationDuration)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    val onInitializeMapboxMap = remember(userLocationAvailable) {\r\n        { mbm: MapboxMap ->\r\n            if (mapboxMap == null) {\r\n                mapboxMap = mbm\r\n            }\r\n\r\n            if (userLocationAvailable) {\r\n                val camera = cameraState\r\n                locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val settingResultRequest = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.StartIntentSenderForResult()\r\n    ) { activityResult ->\r\n        if (activityResult.resultCode == RESULT_OK) {\r\n            context.startLocationServiceIntentAction()\r\n            Timber.d(\"GPS Setting Request Accepted\")\r\n            return@rememberLauncherForActivityResult\r\n        }\r\n        Timber.d(\"GPS Setting Request Denied\")\r\n    }\r\n\r\n    val requestHelp = remember {\r\n        {\r\n            if (!context.hasGPSConnection()) {\r\n                context.checkLocationSetting(\r\n                    onDisabled = settingResultRequest::launch,\r\n                    onEnabled = {\r\n                        mappingViewModel.onEvent(\r\n                            event = MappingVmEvent.RequestHelp)\r\n\r\n                    })\r\n            } else {\r\n                mappingViewModel.onEvent(\r\n                    event = MappingVmEvent.RequestHelp)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    val onClickRequestHelpButton = remember {\r\n        {\r\n            foregroundLocationPermissionsState.requestPermission(\r\n                onGranted = {\r\n                    context.startLocationServiceIntentAction()\r\n                    requestHelp()\r\n                }, onExplain = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    val showRouteDirection = remember(uiState.routeDirection, mapboxMap) {\r\n        {\r\n\r\n            uiState.routeDirection?.geometry?.let { geometry ->\r\n\r\n                mapboxMap?.getStyle { style ->\r\n                    if (style.isFullyLoaded.not() || geometry.isEmpty()) {\r\n                        return@getStyle\r\n                    }\r\n\r\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\r\n                    routeLineSource?.setGeoJson(\r\n                        FeatureCollection.fromFeature(\r\n                            Feature.fromGeometry(\r\n                                LineString.fromPolyline(geometry, PRECISION_6))))\r\n                }\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val removeRouteDirection = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.getStyle { style ->\r\n\r\n                if (style.isFullyLoaded.not()) {\r\n                    return@getStyle\r\n                }\r\n\r\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\r\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n\r\n    val onClickLocateUserButton = remember {\r\n        {\r\n            foregroundLocationPermissionsState.requestPermission(\r\n                onGranted = {\r\n                    if (!context.hasGPSConnection()) {\r\n                        context.checkLocationSetting(\r\n                            onDisabled = settingResultRequest::launch)\r\n                    }\r\n                    state.userLocation?.let {\r\n                        it.latitude ?: return@let\r\n                        it.longitude ?: return@let\r\n                        val point = LatLng(it.latitude, it.longitude)\r\n                        locateUser(LOCATE_USER_ZOOM_LEVEL, point, DEFAULT_CAMERA_ANIMATION_DURATION)\r\n                    }\r\n\r\n                }, onExplain = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                })\r\n        }\r\n    }\r\n\r\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\r\n        {\r\n            val route = state.rescueTransaction?.route\r\n            val location = route?.destinationLocation\r\n            location?.let {\r\n                it.latitude ?: return@let\r\n                it.longitude ?: return@let\r\n                context.openNavigationApp(latitude = it.latitude, longitude = it.longitude)\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val onClickRouteOverViewButton = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING\r\n        }\r\n    }\r\n\r\n    val onClickRecenterButton = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING_GPS\r\n        }\r\n    }\r\n\r\n    val onClickOpenNavigationButton = remember {\r\n        {\r\n            openNavigationApp()\r\n        }\r\n    }\r\n\r\n    val onClickCancelSearchButton = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                collapseBottomSheet()\r\n            }.invokeOnCompletion {\r\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelRequestHelp)\r\n                uiState = uiState.copy(searchingAssistance = false)\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val onChangeCameraPosition = remember {\r\n        { _cameraState: CameraState ->\r\n            cameraState = _cameraState\r\n\r\n        }\r\n    }\r\n\r\n    val onClickCancelRescueButton = remember(state.rescuer, state.rescueTransaction) {\r\n        {\r\n            val role = state.user.transaction?.role\r\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\r\n            val transactionId = state.rescueTransaction?.id\r\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\r\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\r\n\r\n            navController.navigateScreen(destination = \"${Screens.CancellationScreen.route}/$selectionType/$transactionId/$clientId\")\r\n\r\n        }\r\n    }\r\n\r\n    val onDismissNoInternetDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isNoInternetVisible = false\r\n            )\r\n        }\r\n    }\r\n\r\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\r\n        val transaction = state.rescueTransaction\r\n        val rescueTransactionId = state.rescueTransaction?.id ?: \"\"\r\n        val userTransactionId = state.user.transaction?.transactionId ?: \"\"\r\n        transaction != null && rescueTransactionId.isNotEmpty() && userTransactionId.isNotEmpty()\r\n    }\r\n\r\n    val isRescueCancelled =\r\n        remember(state.rescueTransaction?.cancellation?.rescueCancelled, state.rescueTransaction) {\r\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\r\n        }\r\n\r\n    val clientPhoneNumber = remember(state.rescuee, state.rescuer) {\r\n        val client = state.rescuee ?: state.rescuer\r\n        client?.contactNumber\r\n    }\r\n\r\n    val callClient = remember(clientPhoneNumber) {\r\n        {\r\n            clientPhoneNumber?.let(context::callPhoneNumber)\r\n        }\r\n    }\r\n    val phonePermissionState =\r\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\r\n            if (permissionGranted) {\r\n                callClient()\r\n            }\r\n        }\r\n    val onClickChatButton = remember(clientPhoneNumber) {\r\n        {\r\n\r\n\r\n        }\r\n    }\r\n\r\n    val onClickCallButton = remember(clientPhoneNumber) {\r\n        {\r\n            phonePermissionState.requestPermission(\r\n                onGranted = {\r\n                    callClient()\r\n                },\r\n                onExplain = {\r\n                    uiState = uiState.copy(phonePermissionDialogVisible = true)\r\n                })\r\n        }\r\n    }\r\n\r\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\r\n        {\r\n            val locationComponent = mapboxMap?.locationComponent\r\n            locationComponent?.cameraMode = CameraMode.TRACKING\r\n        }\r\n    }\r\n\r\n    val onClickOkCancelledRescue = remember {\r\n        {\r\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\r\n        }\r\n    }\r\n\r\n    val onClickRescueeMapIcon = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\r\n        }\r\n    }\r\n\r\n    val onDismissRescueeBanner = remember {\r\n        {\r\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\r\n            if (isRescueeBannerVisible) {\r\n                uiState = uiState.copy(\r\n                    mapSelectedRescuee = null,\r\n                    requestHelpButtonVisible = true\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val onCollapseExpandableFAB = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isFabExpanded = false\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    val onToggleExpandedFAB = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isFabExpanded = !uiState.isFabExpanded\r\n            )\r\n        }\r\n    }\r\n\r\n    val onMapClick = remember {\r\n        {\r\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\r\n                collapseBottomSheet()\r\n            }\r\n            onDismissRescueeBanner()\r\n            onCollapseExpandableFAB()\r\n\r\n        }\r\n    }\r\n\r\n    val onMapLongClick = remember {\r\n        {\r\n            onDismissRescueeBanner()\r\n            onCollapseExpandableFAB()\r\n            uiState = uiState.copy(bottomSheetType = BottomSheetType.ReportIncident.type).also {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n    val onClickRespondToHelpButton = remember {\r\n        {\r\n            uiState.mapSelectedRescuee?.let {\r\n                mappingViewModel.onEvent(\r\n                    event = MappingVmEvent.RespondToHelp(\r\n                        selectedRescuee = it\r\n                    ))\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n    val onClickOkAcceptedRescue = remember {\r\n        {\r\n            onChangeNavigatingState(true)\r\n            uiState = uiState.copy(\r\n                rescueRequestAccepted = false,\r\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\r\n            ).also {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n    val onDismissLocationPermissionDialog = remember {\r\n        {\r\n            uiState = uiState.copy(locationPermissionDialogVisible = false)\r\n        }\r\n    }\r\n\r\n    val onDismissPhonePermissionDialog = remember {\r\n        {\r\n            uiState = uiState.copy(phonePermissionDialogVisible = false)\r\n        }\r\n    }\r\n    val onClickCancelButton = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\r\n        }\r\n    }\r\n\r\n    val onClickConfirmButton = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\r\n        }\r\n    }\r\n\r\n    val onClickReportIncident = remember {\r\n        {\r\n\r\n        }\r\n    }\r\n\r\n    val onDismissAlertDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                alertDialogState = AlertDialogState()\r\n            )\r\n        }\r\n    }\r\n\r\n    val onShowRescueRequestDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isRescueRequestDialogVisible = true\r\n            )\r\n        }\r\n    }\r\n\r\n    val onDismissRescueRequestDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isRescueRequestDialogVisible = false\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = true, key2 = state.userLocation) {\r\n\r\n        mappingViewModel.eventFlow.collectLatest { event ->\r\n            when (event) {\r\n\r\n\r\n                is MappingEvent.RequestHelpSuccess -> {\r\n                    navController.navigateScreen(\r\n                        Screens.ConfirmDetailsScreen.route + \"?$LATITUDE=${state.userLocation?.latitude}&$LONGITUDE=${state.userLocation?.longitude}\")\r\n                }\r\n\r\n                is MappingEvent.InsufficientUserCredential -> {\r\n                    navController.navigateScreen(\r\n                        Screens.EditProfileScreen.route)\r\n                }\r\n\r\n                is MappingEvent.LocationNotAvailable -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RescuerLocationNotAvailable -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.UnexpectedError -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.UserFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RespondToHelpSuccess -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.AddressFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.NoInternetConnection -> {\r\n                    uiState = uiState.copy(\r\n                        isNoInternetVisible = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.NewSelectedRescuee -> {\r\n                    uiState = uiState.copy(\r\n                        mapSelectedRescuee = event.selectedRescuee,\r\n                        requestHelpButtonVisible = false\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.NewRouteDirection -> {\r\n                    uiState = uiState.copy(\r\n                        routeDirection = event.routeDirection\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        rescueRequestAccepted = false,\r\n                        requestHelpButtonVisible = true,\r\n                        searchingAssistance = false,\r\n                        routeDirection = null,\r\n                        mapSelectedRescuee = null,\r\n                    ).also {\r\n                        collapseBottomSheet()\r\n                    }\r\n                    onChangeNavigatingState(false)\r\n\r\n                }\r\n\r\n                is MappingEvent.RescueRequestAccepted -> {\r\n                    uiState = uiState.copy(\r\n                        rescueRequestAccepted = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.CancelHelpRequestSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        requestHelpButtonVisible = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.AcceptRescueRequestSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        requestHelpButtonVisible = false,\r\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type\r\n                    ).also {\r\n                        expandBottomSheet()\r\n                    }\r\n                }\r\n\r\n                is MappingEvent.FailedToCalculateDistance -> {\r\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n\r\n                is MappingEvent.DestinationReached -> {\r\n                    val role = state.user.transaction?.role\r\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\r\n                        BottomSheetType.RescuerArrived.type\r\n                    } else {\r\n                        BottomSheetType.DestinationReached.type\r\n                    }\r\n                    uiState = uiState.copy(bottomSheetType = type).also {\r\n                        expandBottomSheet()\r\n                    }\r\n\r\n                }\r\n\r\n                is MappingEvent.RemoveRespondentFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RescueHasTransaction -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Cannot Request\",\r\n                            description = \"Unfortunately the Rescuer is currently in a Rescue.\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.UserHasCurrentTransaction -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Cannot Request\",\r\n                            description = \"You can only have one transaction at a time\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\r\n\r\n        val route = uiState.routeDirection ?: return@LaunchedEffect\r\n\r\n        if (route.geometry.isEmpty()) {\r\n            removeRouteDirection()\r\n            return@LaunchedEffect\r\n        }\r\n        showRouteDirection()\r\n    }\r\n\r\n\r\n    LaunchedEffect(\r\n        key1 = state.rescueTransaction?.route,\r\n        key2 = hasTransaction,\r\n        key3 = isRescueCancelled) {\r\n\r\n        val transactionRoute = state.rescueTransaction?.route\r\n        val startingLocation = transactionRoute?.startingLocation\r\n        val destinationLocation = transactionRoute?.destinationLocation\r\n\r\n\r\n        if (hasTransaction.not() || isRescueCancelled) {\r\n            uiState = uiState.copy(routeDirection = null)\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        startingLocation?.longitude ?: return@LaunchedEffect\r\n        startingLocation.latitude ?: return@LaunchedEffect\r\n        destinationLocation?.longitude ?: return@LaunchedEffect\r\n        destinationLocation.latitude ?: return@LaunchedEffect\r\n\r\n        mappingViewModel.onEvent(\r\n            event = MappingVmEvent.GetRouteDirections(\r\n                origin = Point.fromLngLat(startingLocation.longitude, startingLocation.latitude),\r\n                destination = Point.fromLngLat(\r\n                    destinationLocation.longitude,\r\n                    destinationLocation.latitude)))\r\n\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = hasInternetConnection) {\r\n        val nearbyCyclistLoaded = state.nearbyCyclists != null\r\n        val userLoaded = state.user.id != null\r\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\r\n\r\n        if (hasInternetConnection.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (dataHaveBeenLoaded.not()) {\r\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\r\n        }\r\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\r\n        showUserLocation()\r\n    }\r\n\r\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\r\n        coroutineScope.launch {\r\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\r\n\r\n        if (hasTransaction.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (isRescueCancelled) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        onChangeNavigatingState(false)\r\n\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\r\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (!context.hasGPSConnection()) {\r\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\r\n        }\r\n\r\n        context.startLocationServiceIntentAction()\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    MappingScreenContent(\r\n        modifier = Modifier.padding(paddingValues),\r\n        state = state,\r\n        locationPermissionState = foregroundLocationPermissionsState,\r\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\r\n        hasTransaction = hasTransaction,\r\n        isRescueCancelled = isRescueCancelled,\r\n        isNavigating = isNavigating,\r\n        mapboxMap = mapboxMap,\r\n        uiState = uiState,\r\n        event = { event ->\r\n            when (event) {\r\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\r\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\r\n                is MappingUiEvent.CancelSearchConfirmed -> onClickCancelSearchButton()\r\n                is MappingUiEvent.CallRescueTransaction -> onClickCallButton()\r\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\r\n                is MappingUiEvent.CancelRescueTransaction -> onClickCancelRescueButton()\r\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\r\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\r\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\r\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\r\n                is MappingUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\r\n                is MappingUiEvent.RescueeMapIconSelected -> onClickRescueeMapIcon(event.id)\r\n                is MappingUiEvent.OnMapClick -> onMapClick()\r\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\r\n                is MappingUiEvent.LocateUser -> onClickLocateUserButton()\r\n                is MappingUiEvent.RouteOverview -> onClickRouteOverViewButton()\r\n                is MappingUiEvent.RecenterRoute -> onClickRecenterButton()\r\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\r\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\r\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\r\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\r\n                is MappingUiEvent.DismissLocationPermission -> onDismissLocationPermissionDialog()\r\n                is MappingUiEvent.DismissPhonePermission -> onDismissPhonePermissionDialog()\r\n                is MappingUiEvent.OnToggleExpandableFAB -> onToggleExpandedFAB()\r\n                is MappingUiEvent.OpenEmergencyCall -> {}\r\n                is MappingUiEvent.OpenFamilyTracker -> {}\r\n                is MappingUiEvent.ShowRescueRequestDialog -> onShowRescueRequestDialog()\r\n                is MappingUiEvent.DismissRescueRequestDialog -> onDismissRescueRequestDialog()\r\n                is MappingUiEvent.CancelRequestHelp -> onClickCancelButton(event.id)\r\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\r\n                is MappingUiEvent.DismissAlertDialog -> onDismissAlertDialog()\r\n                is MappingUiEvent.OnCollapseExpandableFAB -> onCollapseExpandableFAB()\r\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick()\r\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident()\r\n\r\n            }\r\n        }\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 14bffa0e989b24d0c9f5e99b885befb3b6466022)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1687844989516)
-@@ -475,6 +475,12 @@
-         }
-     }
- 
-+    val openEmergencyCallDialog = remember{{
-+        uiState = uiState.copy(
-+            emergencyCallDialogVisible = true
-+        )
-+    }}
-+
-     val onMapClick = remember {
-         {
-             if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {
-@@ -862,7 +868,7 @@
-                 is MappingUiEvent.DismissLocationPermission -> onDismissLocationPermissionDialog()
-                 is MappingUiEvent.DismissPhonePermission -> onDismissPhonePermissionDialog()
-                 is MappingUiEvent.OnToggleExpandableFAB -> onToggleExpandedFAB()
--                is MappingUiEvent.OpenEmergencyCall -> {}
-+                is MappingUiEvent.OpenEmergencyCall -> openEmergencyCallDialog()
-                 is MappingUiEvent.OpenFamilyTracker -> {}
-                 is MappingUiEvent.ShowRescueRequestDialog -> onShowRescueRequestDialog()
-                 is MappingUiEvent.DismissRescueRequestDialog -> onDismissRescueRequestDialog()
-@@ -882,3 +888,6 @@
- }
- 
- 
-+
-+
-+
Index: .idea/shelf/Handling_notification_permission_in_mapping/shelved.patch
===================================================================
diff --git a/.idea/shelf/Handling_notification_permission_in_mapping/shelved.patch b/.idea/shelf/Handling_notification_permission_in_mapping/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Handling_notification_permission_in_mapping/shelved.patch	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,214 +0,0 @@
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.example.cyclistance.core.utils.contexts.shareLocation\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(\n            initialValue = BottomSheetValue.Collapsed,\n            confirmStateChange = { false })\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n                if (isNavigating) {\n\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(locationComponentOptions.build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.GPS\n\n                    }\n\n                } else {\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(\n                                locationComponentOptions\n                                    .changeToNormalPuckIcon(context)\n                                    .pulseEnabled(pulsingEnabled)\n                                    .build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.NORMAL\n                    }\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n        }\n    }\n\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    val requestHelp = remember {\n        {\n            if (!context.hasGPSConnection()) {\n                context.checkLocationSetting(\n                    onDisabled = settingResultRequest::launch,\n                    onEnabled = {\n                        mappingViewModel.onEvent(\n                            event = MappingVmEvent.RequestHelp)\n\n                    })\n            } else {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RequestHelp)\n\n            }\n        }\n    }\n\n    val onClickRequestHelpButton = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n\n        }\n    }\n\n\n    val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not()) {\n                        return@getStyle\n                    }\n                    if(geometry.isEmpty()){\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource!!.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n\n\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(\n                            LOCATE_USER_ZOOM_LEVEL,\n                            point,\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\n\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val changeCameraMode = remember{{ mode: Int ->\n        mapboxMap?.locationComponent?.apply {\n            if (isLocationComponentActivated) {\n                cameraMode = mode\n            }\n        }\n    }}\n\n    val routeOverView = remember{{\n        changeCameraMode(CameraMode.TRACKING)\n\n    }}\n\n    val onLocateUserButton = remember(uiState.routeDirection){{\n        if(uiState.routeDirection != null) {\n            routeOverView()\n        }\n        onLocateUser()\n    }}\n\n    val recenterRoute = remember{{\n        changeCameraMode(CameraMode.TRACKING_GPS)\n    }}\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let {\n                val latitude = it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val cancelSearchingAssistance = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    DisposableEffect(key1 = true){\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target ?: LatLng(\n                 DEFAULT_LATITUDE,\n                 DEFAULT_LONGITUDE,\n            )\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(CameraState(\n                position = cameraCenter,\n                zoom = cameraZoom ?: 0.0\n            ))\n        }\n    }\n\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(route = Screens.MappingNavigation.Cancellation.passArgument(\n                cancellationType = selectionType,\n                transactionId = transactionId!!,\n                clientId = clientId!!))\n\n        }\n    }\n\n    val noInternetDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isNoInternetVisible = visibility\n        )\n    }}\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        state.getTransactionId().isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    val onClickChatButton = remember() {\n        {\n\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val expandableFab = remember{{ expanded: Boolean ->\n        uiState = uiState.copy(\n            isFabExpanded = expanded\n        )\n    }}\n\n\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit){\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\n        if(isCurrentlyEditing){\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\n            return\n        }\n        noMarkerCurrentlyEditing()\n    }\n\n\n    val onMapMarkerClick = remember {\n        { snippet: String, id: String ->\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\n                })\n            } else {\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n            }\n        }\n    }\n\n    val hazardousLaneMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n    val onMapClick = remember {\n        {\n\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\n                collapseBottomSheet()\n            }\n\n            if(uiState.bottomSheetType == BottomSheetType.IncidentDescription.type){\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    collapseBottomSheet()\n                })\n            }\n            onDismissRescueeBanner()\n            expandableFab(false)\n\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        { latLng: LatLng ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                onDismissRescueeBanner()\n                expandableFab(false)\n                uiState = uiState.copy(\n                    lastLongPressedLocation = latLng,\n                    bottomSheetType = BottomSheetType.ReportIncident.type).also {\n                    expandBottomSheet()\n                }\n            })\n\n        }\n    }\n\n    val onClickRespondToHelpButton = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val locationPermissionDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(locationPermissionDialogVisible = visibility)\n    }}\n\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        { incidentLabel: String ->\n            uiState.lastLongPressedLocation?.let { locationLatLng ->\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.ReportIncident(\n                        label = incidentLabel,\n                        latLng = locationLatLng,\n                        description = incidentDescription.text\n                    ))\n                uiState = uiState.copy(selectedIncidentLabel = \"\")\n                incidentDescription = TextFieldValue()\n            }\n        }\n    }\n\n    val emergencyCallDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(\n            isEmergencyCallDialogVisible = visible\n        )\n    }}\n\n    val changeAlertDialogState = remember{{ alertDialogState: AlertDialogState ->\n        uiState = uiState.copy(\n            alertDialogState = alertDialogState\n        )\n    }}\n\n    val rescueRequestDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueRequestDialogVisible = visibility\n        )\n    }}\n\n    val sinoTrackWebViewVisibility = remember{{visible: Boolean ->\n        uiState = uiState.copy(\n            isSinoTrackWebViewVisible = visible\n        )\n    }}\n\n    val rescueResultsDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueResultsDialogVisible = visibility\n        )\n    }}\n\n\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.EmergencyCall.passArgument(shouldOpenContactDialog = true))\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location){{\n\n        val location = state.getCurrentLocation()\n\n        if(location == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            context.shareLocation(\n                latitude = location.latitude!!,\n                longitude = location.longitude!!\n            )\n        }\n    }}\n\n    val onOpenHazardousLaneBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            uiState = if (uiState.bottomSheetType == BottomSheetType.HazardousLane.type) {\n                collapseBottomSheet()\n                uiState.copy(bottomSheetType = null)\n            } else {\n                uiState.copy(\n                    bottomSheetType = BottomSheetType.HazardousLane.type\n                ).also {\n                    expandBottomSheet()\n                }\n            }\n        })\n    }}\n\n    val onSelectMapType = remember(key1 = state.userLocation){{ mapType: String ->\n        if(state.userLocation == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            mappingViewModel.onEvent(event = MappingVmEvent.SetMapType(mapType))\n        }\n    }}\n\n\n    val onChangeIncidentLabel = remember {\n        { incidentLabel: String ->\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\n        }\n    }\n\n    val onChangeIncidentDescription = remember {\n        { input: TextFieldValue ->\n            incidentDescription = input\n        }\n    }\n\n\n    val onClickDeleteIncident = remember{{\n\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = true\n        )\n\n    }}\n\n    val onClickEditIncidentDescription = remember{{ marker: HazardousLaneMarker ->\n        uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\n    }}\n\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker){{\n        mappingViewModel.onEvent(event = MappingVmEvent.DeleteHazardousLaneMarker(\n            id = uiState.selectedHazardousMarker!!.id\n        ))\n    }}\n\n    val discardChangesMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            discardHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n\n    val onDiscardMarkerChanges = remember{{\n        uiState = uiState.copy(currentlyEditingHazardousMarker = null)\n    }}\n\n    val onDismissIncidentDescriptionBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            collapseBottomSheet()\n        })\n    }}\n\n    val onCancelEditIncidentDescription = remember{{\n        checkIfHasEditingMarker(onDiscardMarkerChanges)\n    }}\n\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker){{ description: String, label: String ->\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.UpdateReportedIncident(\n                marker = uiState.currentlyEditingHazardousMarker!!.copy(description = description, label = label)\n            ))\n    }}\n\n    val onClickHazardousInfoGotIt = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\n        }\n    }\n\n    fun getRouteDirections(){\n        val rescueTransaction = state.rescueTransaction ?: return\n\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\n        val startingLatitude = rescueTransaction.getStartingLatitude()?: return\n        val destinationLongitude = rescueTransaction.getDestinationLongitude()?: return\n        val destinationLatitude = rescueTransaction.getDestinationLatitude()?: return\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n    }\n\n\n\n    val cancelSearchDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelSearchDialogVisible = visibility)\n    }}\n\n    val cancelOnGoingRescueDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\n    }}\n\n    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(notificationPermissionVisible = visible)\n    }}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n\n            if(hasTransaction){\n               cancelOnGoingRescueDialogVisibility(true)\n               return@checkIfHasEditingMarker\n            }\n\n            if(uiState.searchingAssistance){\n               cancelSearchDialogVisibility(true)\n               return@checkIfHasEditingMarker\n            }\n\n            collapseBottomSheet()\n        })\n    }\n\n\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap){\n        if (userLocationAvailable) {\n            val camera = cameraState\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n        }\n    }\n    LaunchedEffect(key1 = true){\n        mappingViewModel.eventFlow.distinctUntilChanged().collectLatest {\n            when(it){\n                is MappingEvent.NoInternetConnection -> {\n                   noInternetDialogVisibility(true)\n                }\n\n                else -> {}\n            }\n        }\n    }\n\n\n    LaunchedEffect(key1 = hasTransaction){\n        uiState = uiState.copy(\n            hasTransaction = hasTransaction\n        )\n    }\n\n    LaunchedEffect(key1 = isRescueCancelled){\n        uiState = uiState.copy(\n            isRescueCancelled = isRescueCancelled\n        )\n    }\n\n    LaunchedEffect(key1 = isNavigating){\n        uiState = uiState.copy(\n            isNavigating = isNavigating\n        )\n    }\n\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.collect { event ->\n            when (event) {\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    val location = state.userLocation!!\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\n                            latitude = location.latitude!!.toFloat(),\n                            longitude = location.longitude!!.toFloat()\n                        ))\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection,\n                        generateRouteFailed = false\n                    )\n                }\n\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = false,\n                        requestHelpButtonVisible = true,\n                        searchingAssistance = false,\n                        routeDirection = null,\n                        mapSelectedRescuee = null,\n                    ).also {\n                        collapseBottomSheet()\n                    }\n                    onChangeNavigatingState(false)\n\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                        isRescueRequestDialogVisible = false\n                    ).also {\n                        expandBottomSheet()\n                        rescueRequestDialogVisibility(false)\n                        rescueResultsDialogVisibility(false)\n\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type).also {\n                        expandBottomSheet()\n                    }\n\n                }\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Cannot Request\",\n                        description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                        icon = R.raw.error\n                    ))\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(\n                        bottomSheetType = event.bottomSheetType,\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\n                        .also {\n                            expandBottomSheet()\n                        }\n                }\n\n                is MappingEvent.ReportIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.ReportIncidentSuccess -> {\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.IncidentDistanceTooFar -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Exceeds Reachable Distance\",\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.SelectHazardousLaneMarker -> {\n                    uiState = uiState.copy(\n                        selectedHazardousMarker = event.marker,\n                        bottomSheetType = BottomSheetType.IncidentDescription.type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\n                }\n\n                is MappingEvent.UpdateIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n                MappingEvent.UpdateIncidentSuccess -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Incident Updated\",\n                            description = \"The incident has been updated successfully\",\n                            icon = R.raw.success\n                        )\n                    )\n                    onDiscardMarkerChanges()\n                    collapseBottomSheet()\n                }\n\n                is MappingEvent.GenerateRouteNavigationFailed -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Failed to Generate Route\",\n                        description = \"Failed to generate route to the destination due to a connection error.\",\n                    ))\n                    uiState = uiState.copy(\n                        generateRouteFailed = true\n                    )\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection ?: return@LaunchedEffect\n\n        if (route.geometry.isEmpty()) {\n            removeRouteDirection()\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = hasInternetConnection) {\n        val nearbyCyclistLoaded = state.nearbyCyclist?.users?.isNotEmpty() ?: false\n        val userLoaded = state.user.id != null\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n\n        if (dataHaveBeenLoaded.not()) {\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\n        }\n\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\n    }\n\n\n    LaunchedEffect(\n        key1 = hasInternetConnection,\n        key2 = uiState.generateRouteFailed,\n        key3 = state.rescueTransaction?.route) {\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n        if(!uiState.generateRouteFailed){\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n\n\n\n        hazardousLaneMarkers = hazardousMarkers,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        incidentDescription = incidentDescription,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(true)\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\n                is MappingUiEvent.RouteOverview -> routeOverView()\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\n                is MappingUiEvent.LocationPermission ->  locationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\n\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\n                is MappingUiEvent.SinoTrackWebViewVisibility -> sinoTrackWebViewVisibility(event.visibility)\n                is MappingUiEvent.RescueResultsDialog -> rescueResultsDialogVisibility(event.visibility)\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n                is MappingUiEvent.OpenHazardousLaneBottomSheet -> onOpenHazardousLaneBottomSheet()\n                is MappingUiEvent.OnSelectMapType -> onSelectMapType(event.mapType)\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(event.marker)\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(event.markerSnippet, event.markerId)\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(event.description, event.label)\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(event.visibility)\n                is MappingUiEvent.NotificationPermissionDialog ->  notificationPermissionDialogVisibility(event.visibility)\n            }\n        }\n    )\n\n}\n\n//on click cancel\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 0d3f4882e9f60f97193cfcbb0cf07d427adf9c35)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1694434303385)
-@@ -103,6 +103,8 @@
-         mutableStateOf(TextFieldValue())
-     }
- 
-+
-+
-     val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(
-         bottomSheetState = rememberBottomSheetState(
-             initialValue = BottomSheetValue.Collapsed,
-@@ -247,7 +249,7 @@
-         }
-     }
- 
--    val onClickRequestHelpButton = remember {
-+    val onRequestHelp = remember {
-         {
-             foregroundLocationPermissionsState.requestPermission(
-                 onGranted = {
-@@ -260,12 +262,33 @@
-         }
-     }
- 
-+    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->
-+        uiState = uiState.copy(notificationPermissionVisible = visible)
-+    }}
-+
-+    val notificationLauncher = rememberLauncherForActivityResult(
-+        contract = ActivityResultContracts.RequestPermission(),
-+        onResult = { isGranted ->
-+            if (isGranted){
-+                onRequestHelp()
-+            }
-+        }
-+    )
-+    val notificationPermissionState = rememberPermissionState(
-+        permission = Manifest.permission.POST_NOTIFICATIONS
-+    ){ permissionGranted ->
-+        if(permissionGranted){
-+            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
-+        }
-+
-+    }
-+
-+
-+
- 
-     val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {
-         {
--
-             uiState.routeDirection?.geometry?.let { geometry ->
--
-                 mapboxMap?.getStyle { style ->
-                     if (style.isFullyLoaded.not()) {
-                         return@getStyle
-@@ -786,10 +809,6 @@
-         uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)
-     }}
- 
--    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->
--        uiState = uiState.copy(notificationPermissionVisible = visible)
--    }}
--
- 
- 
- 
-@@ -1189,7 +1208,7 @@
-         incidentDescription = incidentDescription,
-         event = { event ->
-             when (event) {
--                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()
-+                is MappingUiEvent.RequestHelp -> onRequestHelp()
-                 is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()
-                 is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)
-                 is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()
-Index: firebase-export-1694437724259la8ngl/auth_export/config.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/firebase-export-1694437724259la8ngl/auth_export/config.json b/firebase-export-1694437724259la8ngl/auth_export/config.json
-new file mode 100644
---- /dev/null	(date 1694437726086)
-+++ b/firebase-export-1694437724259la8ngl/auth_export/config.json	(date 1694437726086)
-@@ -0,0 +1,1 @@
-+{"signIn":{"allowDuplicateEmails":false}}
-\ No newline at end of file
-Index: firebase-export-1694437724259la8ngl/auth_export/accounts.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/firebase-export-1694437724259la8ngl/auth_export/accounts.json b/firebase-export-1694437724259la8ngl/auth_export/accounts.json
-new file mode 100644
---- /dev/null	(date 1694437726079)
-+++ b/firebase-export-1694437724259la8ngl/auth_export/accounts.json	(date 1694437726079)
-@@ -0,0 +1,1 @@
-+{"kind":"identitytoolkit#DownloadAccountResponse","users":[{"localId":"2IkBZaUoNgyAe9GQHMN0kFdHFvLH","createdAt":"1694412829816","lastLoginAt":"1694412829816","passwordHash":"fakeHash:salt=fakeSaltuINJj4mSaK9RbNk9d9Wk:password=12341234","salt":"fakeSaltuINJj4mSaK9RbNk9d9Wk","passwordUpdatedAt":1694437724272,"providerUserInfo":[{"providerId":"password","email":"xiaomi@gmail.com","federatedId":"xiaomi@gmail.com","rawId":"xiaomi@gmail.com"}],"validSince":"1694437724","email":"xiaomi@gmail.com","emailVerified":true,"disabled":false},{"localId":"YdTQawwCjtiuly3gxgMEExa15B0N","createdAt":"1694437669118","lastLoginAt":"1694437669118","passwordHash":"fakeHash:salt=fakeSaltAvw1Ef6E9m8vQfXRLIQg:password=12341234","salt":"fakeSaltAvw1Ef6E9m8vQfXRLIQg","passwordUpdatedAt":1694437724272,"providerUserInfo":[{"providerId":"password","email":"emulator22@gmail.com","federatedId":"emulator22@gmail.com","rawId":"emulator22@gmail.com"}],"validSince":"1694437724","email":"emulator22@gmail.com","emailVerified":true,"disabled":false},{"localId":"n9cKRynztcw33K8rd5cGQASlqw3d","createdAt":"1694412850193","lastLoginAt":"1694412850193","passwordHash":"fakeHash:salt=fakeSaltId1yVrny3k6ySWvqL7jZ:password=12341234","salt":"fakeSaltId1yVrny3k6ySWvqL7jZ","passwordUpdatedAt":1694437724272,"providerUserInfo":[{"providerId":"password","email":"emulator@gmail.com","federatedId":"emulator@gmail.com","rawId":"emulator@gmail.com"}],"validSince":"1694437724","email":"emulator@gmail.com","emailVerified":true,"disabled":false}]}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport kotlinx.parcelize.Parcelize\n\n\n@Parcelize\n@StableState\ndata class MappingUiState(\n    val rescueRequestAccepted: Boolean = false,\n    val requestHelpButtonVisible: Boolean = true,\n    val searchingAssistance: Boolean = false,\n    val isNoInternetVisible: Boolean = false,\n    val mapSelectedRescuee: MapSelectedRescuee? = null,\n    val routeDirection: RouteDirection? = null,\n    val bottomSheetType: String? = null,\n    val locationPermissionDialogVisible: Boolean = false,\n    val isFabExpanded: Boolean = false,\n    val alertDialogState: AlertDialogState = AlertDialogState(),\n    val isRescueRequestDialogVisible: Boolean = false,\n    val isSinoTrackWebViewVisible: Boolean = false,\n    val isEmergencyCallDialogVisible: Boolean = false,\n    val isRescueResultsDialogVisible: Boolean = false,\n    val selectedPhoneNumber: String = \"\",\n    val lastLongPressedLocation: LatLng? = null,\n    val selectedIncidentLabel: String = \"\",\n    val selectedHazardousMarker: HazardousLaneMarker? = HazardousLaneMarker(),\n    val deleteHazardousMarkerDialogVisible: Boolean = false,\n    val discardHazardousMarkerDialogVisible: Boolean = false,\n    val currentlyEditingHazardousMarker: HazardousLaneMarker? = null,\n    val hasTransaction: Boolean = false,\n    val isRescueCancelled: Boolean = false,\n    val isNavigating: Boolean = false,\n    val generateRouteFailed: Boolean = false,\n    val cancelSearchDialogVisible: Boolean = false,\n    val cancelOnGoingRescueDialogVisible: Boolean = false,\n\n\n\n\n    ) : Parcelable\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(revision 0d3f4882e9f60f97193cfcbb0cf07d427adf9c35)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(date 1694427849932)
-@@ -40,6 +40,7 @@
-     val generateRouteFailed: Boolean = false,
-     val cancelSearchDialogVisible: Boolean = false,
-     val cancelOnGoingRescueDialogVisible: Boolean = false,
-+    val notificationPermissionVisible: Boolean = false
- 
- 
- 
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MapType\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@StableState\ndata class MappingState(\n    val isLoading: Boolean = false,\n    val userLocation: LocationModel? = null,\n    val rescueTransaction: RescueTransactionItem? = null,\n    val user: UserItem = UserItem(),\n    val rescueRequestAcceptedUser: UserItem? = null,\n    val rescuer: UserItem? = null,\n    val rescuee: UserItem? = null,\n    val profileUploaded: Boolean = false,\n    val respondedToHelp: Boolean = false,\n    val transactionLocation: LocationModel? = null,\n    val rescuerETA: String = \"\",\n    val rescuerDistance: String = \"\",\n    val newRescueRequest: NewRescueRequestsModel? = null,\n    val speedometerState: SpeedometerState = SpeedometerState(),\n    val nearbyCyclist: NearbyCyclist? = null,\n    val mapType: String = MapType.Default.type,\n    val userId: String = \"\",\n    val shouldShowHazardousStartingInfo: Boolean = false,\n) : Parcelable{\n\n\n    fun getTransactionId() = user.getTransactionId() ?: rescueTransaction?.id ?: \"\"\n    fun getTopSpeed() = speedometerState.topSpeed\n\n    fun getCurrentLocation() = user.location ?: userLocation\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(revision 0d3f4882e9f60f97193cfcbb0cf07d427adf9c35)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(date 1694368522490)
-@@ -31,6 +31,7 @@
-     val mapType: String = MapType.Default.type,
-     val userId: String = "",
-     val shouldShowHazardousStartingInfo: Boolean = false,
-+    val lastRequestNotifiedId: String = ""
- ) : Parcelable{
- 
- 
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.BottomSheetScaffoldState\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport androidx.constraintlayout.compose.Dimension\nimport com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog\nimport com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog\nimport com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission\nimport com.example.cyclistance.feature_authentication.presentation.common.visible\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.CancelledRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.banner.MappingExpandableBanner\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet.MappingBottomSheet\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RequestHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RespondToHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelOnGoingRescueDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelSearchDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DeleteHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DiscardHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.ExpandableFABSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.FloatingButtonSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestAccepted\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestCancelled\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_request.RescueRequestDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_results.RescueResultsDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.sino_track.SinoTrackWebView\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.MultiplePermissionsState\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.mapbox.mapboxsdk.maps.MapboxMap\n\n\n@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterialApi::class)\n@Composable\nfun MappingScreenContent(\n    modifier: Modifier,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    state: MappingState,\n    emergencyState: EmergencyCallState,\n    mapboxMap: MapboxMap?,\n\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    hazardousLaneMarkers: List<HazardousLaneMarker>,\n    locationPermissionState: MultiplePermissionsState = rememberMultiplePermissionsState(permissions = emptyList()),\n    event: (MappingUiEvent) -> Unit = {},\n) {\n\n    val respondentCount by remember(state.newRescueRequest?.request?.size) {\n        derivedStateOf { (state.newRescueRequest?.request)?.size ?: 0 }\n    }\n\n\n    val configuration = LocalConfiguration.current\n    val markerPostedCount by remember(hazardousLaneMarkers.size){\n        derivedStateOf {\n            hazardousLaneMarkers.count { it.idCreator == state.userId }\n        }\n    }\n\n\n    Surface(\n        modifier = modifier\n            .fillMaxSize(),\n        color = MaterialTheme.colors.background) {\n\n\n        Box {\n\n            if (uiState.isRescueRequestDialogVisible) {\n                RescueRequestDialog(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n            }\n\n\n            if(uiState.isRescueResultsDialogVisible){\n\n                RescueResultsDialog(\n                    modifier = Modifier.fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n\n            }\n\n\n            MappingBottomSheet(\n                state = state,\n                event = event,\n                bottomSheetScaffoldState = bottomSheetScaffoldState,\n                uiState = uiState,\n                incidentDescription = incidentDescription,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(horizontal = 12.dp)\n                    .align(Alignment.BottomCenter),\n                markerPostedCount = markerPostedCount) {\n\n\n                ConstraintLayout(modifier = Modifier.fillMaxSize()) {\n\n                    val (mapScreen, requestHelpButton, circularProgressbar, dialog, respondToHelpButton, fabSection, expandableFabSection) = createRefs()\n\n\n                    MappingMapsScreen(\n                        state = state,\n                        modifier = Modifier.constrainAs(mapScreen) {\n                            top.linkTo(parent.top)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                        },\n                        mapboxMap = mapboxMap,\n                        routeDirection = uiState.routeDirection,\n                        event = event,\n                        uiState = uiState,\n                        hazardousLaneMarkers = hazardousLaneMarkers\n                    )\n\n\n\n\n                    AnimatedVisibility(\n                        visible = uiState.mapSelectedRescuee != null && bottomSheetScaffoldState.bottomSheetState.isCollapsed,\n                        enter = expandVertically(expandFrom = Alignment.Top) { 20 },\n                        exit = shrinkVertically(animationSpec = tween()) { fullHeight ->\n                            fullHeight / 2\n                        },\n                    ) {\n                        if (uiState.mapSelectedRescuee != null) {\n                            MappingExpandableBanner(\n                                modifier = Modifier\n                                    .padding(all = 6.dp)\n                                    .fillMaxWidth(), banner = uiState.mapSelectedRescuee,\n                                onClickDismissButton = { event(MappingUiEvent.DismissBanner) })\n                        }\n                    }\n\n                    FloatingButtonSection(\n                        modifier = Modifier\n                            .constrainAs(fabSection) {\n                                end.linkTo(parent.end, margin = 8.dp)\n                                bottom.linkTo(\n                                    parent.bottom,\n                                    margin = (configuration.screenHeightDp / 2.5).dp)\n                                top.linkTo(parent.top, margin = 15.dp)\n                                height = Dimension.fillToConstraints\n\n                            },\n                        locationPermissionGranted = locationPermissionState.allPermissionsGranted,\n                        onClickLocateUserButton = { event(MappingUiEvent.LocateUser) },\n                        onClickRouteOverviewButton = { event(MappingUiEvent.RouteOverview) },\n                        onClickRecenterButton = { event(MappingUiEvent.RecenterRoute) },\n                        onClickOpenNavigationButton = { event(MappingUiEvent.OpenNavigation) },\n                        onClickLayerButton = { event(MappingUiEvent.OpenHazardousLaneBottomSheet) },\n                        uiState = uiState\n                    )\n\n                    ExpandableFABSection(\n                        onClickEmergencyCall = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickFamilyTracker = { event(MappingUiEvent.OpenFamilyTracker) },\n                        onClickRescueRequest = { event(MappingUiEvent.RescueRequestDialog(visibility = true)) },\n                        onClickFab = { event(MappingUiEvent.ExpandableFab(expanded = !uiState.isFabExpanded)) },\n                        onClickBikeTracker = {\n                            event(\n                                MappingUiEvent.SinoTrackWebViewVisibility(\n                                    visibility = true))\n                        },\n                        isFabExpanded = uiState.isFabExpanded,\n                        badgeCount = respondentCount,\n                        modifier = Modifier.constrainAs(expandableFabSection) {\n                            end.linkTo(parent.end, margin = 8.dp)\n                            if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) bottom.linkTo(\n                                parent.bottom,\n                                margin = 15.dp) else top.linkTo(fabSection.bottom, margin = 8.dp)\n                        }\n                    )\n\n\n                    val buttonVisible =\n                        uiState.isNavigating.not() && uiState.isFabExpanded.not() && bottomSheetScaffoldState.bottomSheetState.isCollapsed\n                    val requestHelpVisible = uiState.requestHelpButtonVisible && buttonVisible\n                    val respondToHelpVisible =\n                        uiState.requestHelpButtonVisible.not() && buttonVisible\n\n                    RequestHelpButton(\n                        modifier = Modifier.constrainAs(requestHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        }, onClickRequestHelpButton = { event(MappingUiEvent.RequestHelp) },\n                        state = state,\n                        visible = requestHelpVisible\n\n                    )\n\n                    RespondToHelpButton(\n                        modifier = Modifier.constrainAs(respondToHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        },\n                        onClickRespondButton = { event(MappingUiEvent.RespondToHelp) },\n                        state = state,\n                        visible = respondToHelpVisible\n                    )\n\n                    if (state.isLoading) {\n                        CircularProgressIndicator(\n                            modifier = Modifier.constrainAs(\n                                circularProgressbar) {\n                                top.linkTo(parent.top)\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n                    if (uiState.cancelSearchDialogVisible) {\n                        CancelSearchDialog(onDismissRequest = {\n                            event(MappingUiEvent.CancelSearchDialog(visibility = false))\n                        }, onClickOkay = {\n                            event(MappingUiEvent.SearchCancelled)\n                        }, modifier = Modifier.constrainAs(dialog) {\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                            width = Dimension.matchParent\n                            height = Dimension.wrapContent\n                            this.centerTo(parent)\n                        })\n                    }\n\n                    if (uiState.cancelOnGoingRescueDialogVisible) {\n                        CancelOnGoingRescueDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.CancelOnGoingRescueDialog(visibility = false))\n                            },\n                            onClickOkay = { event(MappingUiEvent.CancelOnGoingRescue) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n\n                    if (uiState.isEmergencyCallDialogVisible) {\n                        EmergencyCallDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.EmergencyCallDialog(visibility = false)) },\n                            emergencyCallModel = emergencyState.emergencyCallModel,\n                            onClick = {\n                                event(\n                                    MappingUiEvent.OnEmergencyCall(\n                                        it.phoneNumber\n                                    )\n                                )\n                            }, onAddContact = {\n                                event(MappingUiEvent.OnAddEmergencyContact)\n                                event(MappingUiEvent.EmergencyCallDialog(visibility = false))\n                            }\n\n                        )\n                    }\n\n                    if (uiState.deleteHazardousMarkerDialogVisible) {\n                        DeleteHazardousLaneMarkerDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(\n                                    visibility = false))\n                            },\n                            modifier = Modifier,\n                            onClickConfirmButton = {\n                                event(MappingUiEvent.OnConfirmDeleteIncident)\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(visibility = false))\n                            })\n                    }\n\n                    if (uiState.isNoInternetVisible) {\n                        NoInternetDialog(\n                            onDismiss = { event(MappingUiEvent.NoInternetDialog(visibility = false)) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n                    if (uiState.locationPermissionDialogVisible) {\n                        DialogForegroundLocationPermission(\n                            modifier = Modifier.constrainAs(\n                                dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.LocationPermission(visibility = false)) }\n                        )\n                    }\n\n\n                    \n                    if(uiState.alertDialogState.visible()){\n                        AlertDialog(\n                            alertDialog = uiState.alertDialogState,\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = { event(MappingUiEvent.AlertDialog(alertDialogState = AlertDialogState())) })\n                    }\n\n                    if (uiState.discardHazardousMarkerDialogVisible) {\n                        DiscardHazardousLaneMarkerDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                            },\n                            onClickDiscard = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                                event(MappingUiEvent.DiscardMarkerChanges)\n                            }\n                        )\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.isRescueCancelled && uiState.rescueRequestAccepted.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n\n                        val rescueTransaction = state.rescueTransaction ?: return@AnimatedVisibility\n\n                        MappingRequestCancelled(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.CancelledRescueConfirmed) },\n                            cancelledRescueModel = CancelledRescueModel(\n                                transactionID = rescueTransaction.id,\n                                rescueCancelledBy = rescueTransaction.getCancellationName(),\n                                reason = rescueTransaction.getCancellationReason(),\n                                message = rescueTransaction.getCancellationMessage()\n                            ))\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.rescueRequestAccepted && uiState.isRescueCancelled.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n                        MappingRequestAccepted(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.RescueRequestAccepted) },\n                            acceptedName = state.rescuee?.name ?: \"Name placeholder\",\n                        )\n                    }\n                }\n            }\n\n\n            if (uiState.isSinoTrackWebViewVisible) {\n                SinoTrackWebView(onDismiss = {\n                    event(\n                        MappingUiEvent.SinoTrackWebViewVisibility(\n                            visibility = false))\n                })\n            }\n\n        }\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(revision 0d3f4882e9f60f97193cfcbb0cf07d427adf9c35)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(date 1694431130312)
-@@ -26,9 +26,11 @@
- import androidx.compose.ui.unit.dp
- import androidx.constraintlayout.compose.ConstraintLayout
- import androidx.constraintlayout.compose.Dimension
-+import com.example.cyclistance.core.domain.model.AlertDialogState
- import com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog
- import com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog
- import com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission
-+import com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogNotificationPermission
- import com.example.cyclistance.feature_authentication.presentation.common.visible
- import com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog
- import com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState
-@@ -80,7 +82,7 @@
- 
- 
-     val configuration = LocalConfiguration.current
--    val markerPostedCount by remember(hazardousLaneMarkers.size){
-+    val markerPostedCount by remember(hazardousLaneMarkers.size) {
-         derivedStateOf {
-             hazardousLaneMarkers.count { it.idCreator == state.userId }
-         }
-@@ -106,7 +108,7 @@
-             }
- 
- 
--            if(uiState.isRescueResultsDialogVisible){
-+            if (uiState.isRescueResultsDialogVisible) {
- 
-                 RescueResultsDialog(
-                     modifier = Modifier.fillMaxSize(),
-@@ -351,9 +353,27 @@
-                         )
-                     }
- 
-+                    if (uiState.notificationPermissionVisible) {
-+                        DialogNotificationPermission(
-+                            modifier = Modifier.constrainAs(
-+                                dialog) {
-+                                end.linkTo(parent.end)
-+                                start.linkTo(parent.start)
-+                                bottom.linkTo(parent.bottom)
-+                                height = Dimension.wrapContent
-+                                centerTo(parent)
-+                            },
-+                            onDismiss = {
-+                                event(
-+                                    MappingUiEvent.NotificationPermissionDialog(
-+                                        visibility = false))
-+                            }
-+                        )
-+                    }
-+
- 
--                    
--                    if(uiState.alertDialogState.visible()){
-+
-+                    if (uiState.alertDialogState.visible()) {
-                         AlertDialog(
-                             alertDialog = uiState.alertDialogState,
-                             modifier = Modifier.constrainAs(dialog) {
Index: .idea/shelf/mapping-permissions/shelved.patch
===================================================================
diff --git a/.idea/shelf/mapping-permissions/shelved.patch b/.idea/shelf/mapping-permissions/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/mapping-permissions/shelved.patch	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,138 +0,0 @@
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.example.cyclistance.core.utils.contexts.shareLocation\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(\n            initialValue = BottomSheetValue.Collapsed,\n            confirmStateChange = { false })\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n                if (isNavigating) {\n\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(locationComponentOptions.build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.GPS\n\n                    }\n\n                } else {\n                    val buildLocationComponentActivationOptions =\n                        LocationComponentActivationOptions.builder(context, style)\n                            .locationComponentOptions(\n                                locationComponentOptions\n                                    .changeToNormalPuckIcon(context)\n                                    .pulseEnabled(pulsingEnabled)\n                                    .build())\n                            .build()\n                    mapboxMap?.locationComponent?.apply {\n                        activateLocationComponent(buildLocationComponentActivationOptions)\n                        isLocationComponentEnabled = userLocationAvailable\n                        cameraMode = CameraMode.NONE\n                        renderMode = RenderMode.NORMAL\n                    }\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n        }\n    }\n\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    val requestHelp = remember {\n        {\n            if (!context.hasGPSConnection()) {\n                context.checkLocationSetting(\n                    onDisabled = settingResultRequest::launch,\n                    onEnabled = {\n                        mappingViewModel.onEvent(\n                            event = MappingVmEvent.RequestHelp)\n\n                    })\n            } else {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RequestHelp)\n\n            }\n        }\n    }\n\n    val onClickRequestHelpButton = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n\n        }\n    }\n\n\n    val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not()) {\n                        return@getStyle\n                    }\n                    if(geometry.isEmpty()){\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource!!.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n\n\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(\n                            LOCATE_USER_ZOOM_LEVEL,\n                            point,\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\n\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val changeCameraMode = remember{{ mode: Int ->\n        mapboxMap?.locationComponent?.apply {\n            if (isLocationComponentActivated) {\n                cameraMode = mode\n            }\n        }\n    }}\n\n    val routeOverView = remember{{\n        changeCameraMode(CameraMode.TRACKING)\n\n    }}\n\n    val onLocateUserButton = remember(uiState.routeDirection){{\n        if(uiState.routeDirection != null) {\n            routeOverView()\n        }\n        onLocateUser()\n    }}\n\n    val recenterRoute = remember{{\n        changeCameraMode(CameraMode.TRACKING_GPS)\n    }}\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let {\n                val latitude = it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val cancelSearchingAssistance = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    DisposableEffect(key1 = true){\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target ?: LatLng(\n                 DEFAULT_LATITUDE,\n                 DEFAULT_LONGITUDE,\n            )\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(CameraState(\n                position = cameraCenter,\n                zoom = cameraZoom ?: 0.0\n            ))\n        }\n    }\n\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(route = Screens.MappingNavigation.Cancellation.passArgument(\n                cancellationType = selectionType,\n                transactionId = transactionId!!,\n                clientId = clientId!!))\n\n        }\n    }\n\n    val noInternetDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isNoInternetVisible = visibility\n        )\n    }}\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        state.getTransactionId().isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    val onClickChatButton = remember() {\n        {\n\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val expandableFab = remember{{ expanded: Boolean ->\n        uiState = uiState.copy(\n            isFabExpanded = expanded\n        )\n    }}\n\n\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit){\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\n        if(isCurrentlyEditing){\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\n            return\n        }\n        noMarkerCurrentlyEditing()\n    }\n\n\n    val onMapMarkerClick = remember {\n        { snippet: String, id: String ->\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\n                })\n            } else {\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n            }\n        }\n    }\n\n    val hazardousLaneMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n    val onMapClick = remember {\n        {\n\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\n                collapseBottomSheet()\n            }\n\n            if(uiState.bottomSheetType == BottomSheetType.IncidentDescription.type){\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    collapseBottomSheet()\n                })\n            }\n            onDismissRescueeBanner()\n            expandableFab(false)\n\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        { latLng: LatLng ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                onDismissRescueeBanner()\n                expandableFab(false)\n                uiState = uiState.copy(\n                    lastLongPressedLocation = latLng,\n                    bottomSheetType = BottomSheetType.ReportIncident.type).also {\n                    expandBottomSheet()\n                }\n            })\n\n        }\n    }\n\n    val onClickRespondToHelpButton = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val locationPermissionDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(locationPermissionDialogVisible = visibility)\n    }}\n\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        { incidentLabel: String ->\n            uiState.lastLongPressedLocation?.let { locationLatLng ->\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.ReportIncident(\n                        label = incidentLabel,\n                        latLng = locationLatLng,\n                        description = incidentDescription.text\n                    ))\n                uiState = uiState.copy(selectedIncidentLabel = \"\")\n                incidentDescription = TextFieldValue()\n            }\n        }\n    }\n\n    val emergencyCallDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(\n            isEmergencyCallDialogVisible = visible\n        )\n    }}\n\n    val changeAlertDialogState = remember{{ alertDialogState: AlertDialogState ->\n        uiState = uiState.copy(\n            alertDialogState = alertDialogState\n        )\n    }}\n\n    val rescueRequestDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueRequestDialogVisible = visibility\n        )\n    }}\n\n    val sinoTrackWebViewVisibility = remember{{visible: Boolean ->\n        uiState = uiState.copy(\n            isSinoTrackWebViewVisible = visible\n        )\n    }}\n\n    val rescueResultsDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            isRescueResultsDialogVisible = visibility\n        )\n    }}\n\n\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.EmergencyCall.passArgument(shouldOpenContactDialog = true))\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location){{\n\n        val location = state.getCurrentLocation()\n\n        if(location == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            context.shareLocation(\n                latitude = location.latitude!!,\n                longitude = location.longitude!!\n            )\n        }\n    }}\n\n    val onOpenHazardousLaneBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            uiState = if (uiState.bottomSheetType == BottomSheetType.HazardousLane.type) {\n                collapseBottomSheet()\n                uiState.copy(bottomSheetType = null)\n            } else {\n                uiState.copy(\n                    bottomSheetType = BottomSheetType.HazardousLane.type\n                ).also {\n                    expandBottomSheet()\n                }\n            }\n        })\n    }}\n\n    val onSelectMapType = remember(key1 = state.userLocation){{ mapType: String ->\n        if(state.userLocation == null){\n            Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n        }else{\n            mappingViewModel.onEvent(event = MappingVmEvent.SetMapType(mapType))\n        }\n    }}\n\n\n    val onChangeIncidentLabel = remember {\n        { incidentLabel: String ->\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\n        }\n    }\n\n    val onChangeIncidentDescription = remember {\n        { input: TextFieldValue ->\n            incidentDescription = input\n        }\n    }\n\n\n    val onClickDeleteIncident = remember{{\n\n        uiState = uiState.copy(\n            deleteHazardousMarkerDialogVisible = true\n        )\n\n    }}\n\n    val onClickEditIncidentDescription = remember{{ marker: HazardousLaneMarker ->\n        uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\n    }}\n\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker){{\n        mappingViewModel.onEvent(event = MappingVmEvent.DeleteHazardousLaneMarker(\n            id = uiState.selectedHazardousMarker!!.id\n        ))\n    }}\n\n    val discardChangesMarkerDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(\n            discardHazardousMarkerDialogVisible = visibility\n        )\n    }}\n\n\n\n    val onDiscardMarkerChanges = remember{{\n        uiState = uiState.copy(currentlyEditingHazardousMarker = null)\n    }}\n\n    val onDismissIncidentDescriptionBottomSheet = remember{{\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n            collapseBottomSheet()\n        })\n    }}\n\n    val onCancelEditIncidentDescription = remember{{\n        checkIfHasEditingMarker(onDiscardMarkerChanges)\n    }}\n\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker){{ description: String, label: String ->\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.UpdateReportedIncident(\n                marker = uiState.currentlyEditingHazardousMarker!!.copy(description = description, label = label)\n            ))\n    }}\n\n    val onClickHazardousInfoGotIt = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\n        }\n    }\n\n    fun getRouteDirections(){\n        val rescueTransaction = state.rescueTransaction ?: return\n\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\n        val startingLatitude = rescueTransaction.getStartingLatitude()?: return\n        val destinationLongitude = rescueTransaction.getDestinationLongitude()?: return\n        val destinationLatitude = rescueTransaction.getDestinationLatitude()?: return\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n    }\n\n\n\n    val cancelSearchDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelSearchDialogVisible = visibility)\n    }}\n\n    val cancelOnGoingRescueDialogVisibility = remember{{ visibility: Boolean ->\n        uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\n    }}\n\n    val notificationPermissionDialogVisibility = remember{{ visible: Boolean ->\n        uiState = uiState.copy(notificationPermissionVisible = visible)\n    }}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n\n            if(hasTransaction){\n               cancelOnGoingRescueDialogVisibility(true)\n               return@checkIfHasEditingMarker\n            }\n\n            if(uiState.searchingAssistance){\n               cancelSearchDialogVisibility(true)\n               return@checkIfHasEditingMarker\n            }\n\n            collapseBottomSheet()\n        })\n    }\n\n\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap){\n        if (userLocationAvailable) {\n            val camera = cameraState\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n        }\n    }\n    LaunchedEffect(key1 = true){\n        mappingViewModel.eventFlow.distinctUntilChanged().collectLatest {\n            when(it){\n                is MappingEvent.NoInternetConnection -> {\n                   noInternetDialogVisibility(true)\n                }\n\n                else -> {}\n            }\n        }\n    }\n\n\n    LaunchedEffect(key1 = hasTransaction){\n        uiState = uiState.copy(\n            hasTransaction = hasTransaction\n        )\n    }\n\n    LaunchedEffect(key1 = isRescueCancelled){\n        uiState = uiState.copy(\n            isRescueCancelled = isRescueCancelled\n        )\n    }\n\n    LaunchedEffect(key1 = isNavigating){\n        uiState = uiState.copy(\n            isNavigating = isNavigating\n        )\n    }\n\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.collect { event ->\n            when (event) {\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    val location = state.userLocation!!\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\n                            latitude = location.latitude!!.toFloat(),\n                            longitude = location.longitude!!.toFloat()\n                        ))\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection,\n                        generateRouteFailed = false\n                    )\n                }\n\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = false,\n                        requestHelpButtonVisible = true,\n                        searchingAssistance = false,\n                        routeDirection = null,\n                        mapSelectedRescuee = null,\n                    ).also {\n                        collapseBottomSheet()\n                    }\n                    onChangeNavigatingState(false)\n\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                        isRescueRequestDialogVisible = false\n                    ).also {\n                        expandBottomSheet()\n                        rescueRequestDialogVisibility(false)\n                        rescueResultsDialogVisibility(false)\n\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type).also {\n                        expandBottomSheet()\n                    }\n\n                }\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Cannot Request\",\n                        description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                        icon = R.raw.error\n                    ))\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(\n                        bottomSheetType = event.bottomSheetType,\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\n                        .also {\n                            expandBottomSheet()\n                        }\n                }\n\n                is MappingEvent.ReportIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.ReportIncidentSuccess -> {\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.IncidentDistanceTooFar -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Exceeds Reachable Distance\",\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.SelectHazardousLaneMarker -> {\n                    uiState = uiState.copy(\n                        selectedHazardousMarker = event.marker,\n                        bottomSheetType = BottomSheetType.IncidentDescription.type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\n                }\n\n                is MappingEvent.UpdateIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n                MappingEvent.UpdateIncidentSuccess -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Incident Updated\",\n                            description = \"The incident has been updated successfully\",\n                            icon = R.raw.success\n                        )\n                    )\n                    onDiscardMarkerChanges()\n                    collapseBottomSheet()\n                }\n\n                is MappingEvent.GenerateRouteNavigationFailed -> {\n                    changeAlertDialogState(AlertDialogState(\n                        title = \"Failed to Generate Route\",\n                        description = \"Failed to generate route to the destination due to a connection error.\",\n                    ))\n                    uiState = uiState.copy(\n                        generateRouteFailed = true\n                    )\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection ?: return@LaunchedEffect\n\n        if (route.geometry.isEmpty()) {\n            removeRouteDirection()\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = hasInternetConnection) {\n        val nearbyCyclistLoaded = state.nearbyCyclist?.users?.isNotEmpty() ?: false\n        val userLoaded = state.user.id != null\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n\n        if (dataHaveBeenLoaded.not()) {\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\n        }\n\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\n    }\n\n\n    LaunchedEffect(\n        key1 = hasInternetConnection,\n        key2 = uiState.generateRouteFailed,\n        key3 = state.rescueTransaction?.route) {\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n        if(!uiState.generateRouteFailed){\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n\n\n\n        hazardousLaneMarkers = hazardousMarkers,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        incidentDescription = incidentDescription,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(true)\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\n                is MappingUiEvent.RouteOverview -> routeOverView()\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\n                is MappingUiEvent.LocationPermission ->  locationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\n\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\n                is MappingUiEvent.SinoTrackWebViewVisibility -> sinoTrackWebViewVisibility(event.visibility)\n                is MappingUiEvent.RescueResultsDialog -> rescueResultsDialogVisibility(event.visibility)\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n                is MappingUiEvent.OpenHazardousLaneBottomSheet -> onOpenHazardousLaneBottomSheet()\n                is MappingUiEvent.OnSelectMapType -> onSelectMapType(event.mapType)\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(event.marker)\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(event.markerSnippet, event.markerId)\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(event.visibility)\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(event.description, event.label)\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(event.visibility)\n                is MappingUiEvent.NotificationPermissionDialog ->  notificationPermissionDialogVisibility(event.visibility)\n            }\n        }\n    )\n\n}\n\n//on click cancel\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1694449752238)
-@@ -247,7 +247,7 @@
-         }
-     }
- 
--    val onClickRequestHelpButton = remember {
-+    val onRequestHelp = remember {
-         {
-             foregroundLocationPermissionsState.requestPermission(
-                 onGranted = {
-@@ -263,6 +263,25 @@
-     }
- 
- 
-+
-+    val notificationLauncher = rememberLauncherForActivityResult(
-+        contract = ActivityResultContracts.RequestPermission(),
-+        onResult = { isGranted ->
-+            if (isGranted) {
-+                onRequestHelp()
-+            }
-+        }
-+    )
-+    val notificationPermissionState = rememberPermissionState(
-+        permission = Manifest.permission.POST_NOTIFICATIONS
-+    ) { permissionGranted ->
-+        if (permissionGranted) {
-+            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
-+        }
-+
-+    }
-+
-+
-     val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {
-         {
- 
-@@ -1193,7 +1212,7 @@
-         incidentDescription = incidentDescription,
-         event = { event ->
-             when (event) {
--                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()
-+                is MappingUiEvent.RequestHelp -> onRequestHelp()
-                 is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()
-                 is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)
-                 is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport kotlinx.parcelize.Parcelize\n\n\n@Parcelize\n@StableState\ndata class MappingUiState(\n    val rescueRequestAccepted: Boolean = false,\n    val requestHelpButtonVisible: Boolean = true,\n    val searchingAssistance: Boolean = false,\n    val isNoInternetVisible: Boolean = false,\n    val mapSelectedRescuee: MapSelectedRescuee? = null,\n    val routeDirection: RouteDirection? = null,\n    val bottomSheetType: String? = null,\n    val locationPermissionDialogVisible: Boolean = false,\n    val isFabExpanded: Boolean = false,\n    val alertDialogState: AlertDialogState = AlertDialogState(),\n    val isRescueRequestDialogVisible: Boolean = false,\n    val isSinoTrackWebViewVisible: Boolean = false,\n    val isEmergencyCallDialogVisible: Boolean = false,\n    val isRescueResultsDialogVisible: Boolean = false,\n    val selectedPhoneNumber: String = \"\",\n    val lastLongPressedLocation: LatLng? = null,\n    val selectedIncidentLabel: String = \"\",\n    val selectedHazardousMarker: HazardousLaneMarker? = HazardousLaneMarker(),\n    val deleteHazardousMarkerDialogVisible: Boolean = false,\n    val discardHazardousMarkerDialogVisible: Boolean = false,\n    val currentlyEditingHazardousMarker: HazardousLaneMarker? = null,\n    val hasTransaction: Boolean = false,\n    val isRescueCancelled: Boolean = false,\n    val isNavigating: Boolean = false,\n    val generateRouteFailed: Boolean = false,\n    val cancelSearchDialogVisible: Boolean = false,\n    val cancelOnGoingRescueDialogVisible: Boolean = false,\n\n\n\n\n    ) : Parcelable\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(date 1694449807525)
-@@ -40,6 +40,7 @@
-     val generateRouteFailed: Boolean = false,
-     val cancelSearchDialogVisible: Boolean = false,
-     val cancelOnGoingRescueDialogVisible: Boolean = false,
-+    val notificationPermissionVisible: Boolean = false
- 
- 
- 
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MapType\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@StableState\ndata class MappingState(\n    val isLoading: Boolean = false,\n    val userLocation: LocationModel? = null,\n    val rescueTransaction: RescueTransactionItem? = null,\n    val user: UserItem = UserItem(),\n    val rescueRequestAcceptedUser: UserItem? = null,\n    val rescuer: UserItem? = null,\n    val rescuee: UserItem? = null,\n    val profileUploaded: Boolean = false,\n    val respondedToHelp: Boolean = false,\n    val transactionLocation: LocationModel? = null,\n    val rescuerETA: String = \"\",\n    val rescuerDistance: String = \"\",\n    val newRescueRequest: NewRescueRequestsModel? = null,\n    val speedometerState: SpeedometerState = SpeedometerState(),\n    val nearbyCyclist: NearbyCyclist? = null,\n    val mapType: String = MapType.Default.type,\n    val userId: String = \"\",\n    val shouldShowHazardousStartingInfo: Boolean = false,\n) : Parcelable{\n\n\n    fun getTransactionId() = user.getTransactionId() ?: rescueTransaction?.id ?: \"\"\n    fun getTopSpeed() = speedometerState.topSpeed\n\n    fun getCurrentLocation() = user.location ?: userLocation\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(date 1694449982454)
-@@ -31,6 +31,7 @@
-     val mapType: String = MapType.Default.type,
-     val userId: String = "",
-     val shouldShowHazardousStartingInfo: Boolean = false,
-+    val lastRequestNotifiedId: String = "",
- ) : Parcelable{
- 
- 
-Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.BottomSheetScaffoldState\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport androidx.constraintlayout.compose.Dimension\nimport com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog\nimport com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog\nimport com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission\nimport com.example.cyclistance.feature_authentication.presentation.common.visible\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.CancelledRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.banner.MappingExpandableBanner\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet.MappingBottomSheet\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RequestHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RespondToHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelOnGoingRescueDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelSearchDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DeleteHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DiscardHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.ExpandableFABSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.FloatingButtonSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestAccepted\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestCancelled\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_request.RescueRequestDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_results.RescueResultsDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.sino_track.SinoTrackWebView\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.MultiplePermissionsState\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.mapbox.mapboxsdk.maps.MapboxMap\n\n\n@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterialApi::class)\n@Composable\nfun MappingScreenContent(\n    modifier: Modifier,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    state: MappingState,\n    emergencyState: EmergencyCallState,\n    mapboxMap: MapboxMap?,\n\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    hazardousLaneMarkers: List<HazardousLaneMarker>,\n    locationPermissionState: MultiplePermissionsState = rememberMultiplePermissionsState(permissions = emptyList()),\n    event: (MappingUiEvent) -> Unit = {},\n) {\n\n    val respondentCount by remember(state.newRescueRequest?.request?.size) {\n        derivedStateOf { (state.newRescueRequest?.request)?.size ?: 0 }\n    }\n\n\n    val configuration = LocalConfiguration.current\n    val markerPostedCount by remember(hazardousLaneMarkers.size){\n        derivedStateOf {\n            hazardousLaneMarkers.count { it.idCreator == state.userId }\n        }\n    }\n\n\n    Surface(\n        modifier = modifier\n            .fillMaxSize(),\n        color = MaterialTheme.colors.background) {\n\n\n        Box {\n\n            if (uiState.isRescueRequestDialogVisible) {\n                RescueRequestDialog(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n            }\n\n\n            if(uiState.isRescueResultsDialogVisible){\n\n                RescueResultsDialog(\n                    modifier = Modifier.fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n\n            }\n\n\n            MappingBottomSheet(\n                state = state,\n                event = event,\n                bottomSheetScaffoldState = bottomSheetScaffoldState,\n                uiState = uiState,\n                incidentDescription = incidentDescription,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(horizontal = 12.dp)\n                    .align(Alignment.BottomCenter),\n                markerPostedCount = markerPostedCount) {\n\n\n                ConstraintLayout(modifier = Modifier.fillMaxSize()) {\n\n                    val (mapScreen, requestHelpButton, circularProgressbar, dialog, respondToHelpButton, fabSection, expandableFabSection) = createRefs()\n\n\n                    MappingMapsScreen(\n                        state = state,\n                        modifier = Modifier.constrainAs(mapScreen) {\n                            top.linkTo(parent.top)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                        },\n                        mapboxMap = mapboxMap,\n                        routeDirection = uiState.routeDirection,\n                        event = event,\n                        uiState = uiState,\n                        hazardousLaneMarkers = hazardousLaneMarkers\n                    )\n\n\n\n\n                    AnimatedVisibility(\n                        visible = uiState.mapSelectedRescuee != null && bottomSheetScaffoldState.bottomSheetState.isCollapsed,\n                        enter = expandVertically(expandFrom = Alignment.Top) { 20 },\n                        exit = shrinkVertically(animationSpec = tween()) { fullHeight ->\n                            fullHeight / 2\n                        },\n                    ) {\n                        if (uiState.mapSelectedRescuee != null) {\n                            MappingExpandableBanner(\n                                modifier = Modifier\n                                    .padding(all = 6.dp)\n                                    .fillMaxWidth(), banner = uiState.mapSelectedRescuee,\n                                onClickDismissButton = { event(MappingUiEvent.DismissBanner) })\n                        }\n                    }\n\n                    FloatingButtonSection(\n                        modifier = Modifier\n                            .constrainAs(fabSection) {\n                                end.linkTo(parent.end, margin = 8.dp)\n                                bottom.linkTo(\n                                    parent.bottom,\n                                    margin = (configuration.screenHeightDp / 2.5).dp)\n                                top.linkTo(parent.top, margin = 15.dp)\n                                height = Dimension.fillToConstraints\n\n                            },\n                        locationPermissionGranted = locationPermissionState.allPermissionsGranted,\n                        onClickLocateUserButton = { event(MappingUiEvent.LocateUser) },\n                        onClickRouteOverviewButton = { event(MappingUiEvent.RouteOverview) },\n                        onClickRecenterButton = { event(MappingUiEvent.RecenterRoute) },\n                        onClickOpenNavigationButton = { event(MappingUiEvent.OpenNavigation) },\n                        onClickLayerButton = { event(MappingUiEvent.OpenHazardousLaneBottomSheet) },\n                        uiState = uiState\n                    )\n\n                    ExpandableFABSection(\n                        onClickEmergencyCall = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickFamilyTracker = { event(MappingUiEvent.OpenFamilyTracker) },\n                        onClickRescueRequest = { event(MappingUiEvent.RescueRequestDialog(visibility = true)) },\n                        onClickFab = { event(MappingUiEvent.ExpandableFab(expanded = !uiState.isFabExpanded)) },\n                        onClickBikeTracker = {\n                            event(\n                                MappingUiEvent.SinoTrackWebViewVisibility(\n                                    visibility = true))\n                        },\n                        isFabExpanded = uiState.isFabExpanded,\n                        badgeCount = respondentCount,\n                        modifier = Modifier.constrainAs(expandableFabSection) {\n                            end.linkTo(parent.end, margin = 8.dp)\n                            if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) bottom.linkTo(\n                                parent.bottom,\n                                margin = 15.dp) else top.linkTo(fabSection.bottom, margin = 8.dp)\n                        }\n                    )\n\n\n                    val buttonVisible =\n                        uiState.isNavigating.not() && uiState.isFabExpanded.not() && bottomSheetScaffoldState.bottomSheetState.isCollapsed\n                    val requestHelpVisible = uiState.requestHelpButtonVisible && buttonVisible\n                    val respondToHelpVisible =\n                        uiState.requestHelpButtonVisible.not() && buttonVisible\n\n                    RequestHelpButton(\n                        modifier = Modifier.constrainAs(requestHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        }, onClickRequestHelpButton = { event(MappingUiEvent.RequestHelp) },\n                        state = state,\n                        visible = requestHelpVisible\n\n                    )\n\n                    RespondToHelpButton(\n                        modifier = Modifier.constrainAs(respondToHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        },\n                        onClickRespondButton = { event(MappingUiEvent.RespondToHelp) },\n                        state = state,\n                        visible = respondToHelpVisible\n                    )\n\n                    if (state.isLoading) {\n                        CircularProgressIndicator(\n                            modifier = Modifier.constrainAs(\n                                circularProgressbar) {\n                                top.linkTo(parent.top)\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n                    if (uiState.cancelSearchDialogVisible) {\n                        CancelSearchDialog(onDismissRequest = {\n                            event(MappingUiEvent.CancelSearchDialog(visibility = false))\n                        }, onClickOkay = {\n                            event(MappingUiEvent.SearchCancelled)\n                        }, modifier = Modifier.constrainAs(dialog) {\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                            width = Dimension.matchParent\n                            height = Dimension.wrapContent\n                            this.centerTo(parent)\n                        })\n                    }\n\n                    if (uiState.cancelOnGoingRescueDialogVisible) {\n                        CancelOnGoingRescueDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.CancelOnGoingRescueDialog(visibility = false))\n                            },\n                            onClickOkay = { event(MappingUiEvent.CancelOnGoingRescue) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n\n                    if (uiState.isEmergencyCallDialogVisible) {\n                        EmergencyCallDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.EmergencyCallDialog(visibility = false)) },\n                            emergencyCallModel = emergencyState.emergencyCallModel,\n                            onClick = {\n                                event(\n                                    MappingUiEvent.OnEmergencyCall(\n                                        it.phoneNumber\n                                    )\n                                )\n                            }, onAddContact = {\n                                event(MappingUiEvent.OnAddEmergencyContact)\n                                event(MappingUiEvent.EmergencyCallDialog(visibility = false))\n                            }\n\n                        )\n                    }\n\n                    if (uiState.deleteHazardousMarkerDialogVisible) {\n                        DeleteHazardousLaneMarkerDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(\n                                    visibility = false))\n                            },\n                            modifier = Modifier,\n                            onClickConfirmButton = {\n                                event(MappingUiEvent.OnConfirmDeleteIncident)\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(visibility = false))\n                            })\n                    }\n\n                    if (uiState.isNoInternetVisible) {\n                        NoInternetDialog(\n                            onDismiss = { event(MappingUiEvent.NoInternetDialog(visibility = false)) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n                    if (uiState.locationPermissionDialogVisible) {\n                        DialogForegroundLocationPermission(\n                            modifier = Modifier.constrainAs(\n                                dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.LocationPermission(visibility = false)) }\n                        )\n                    }\n\n\n                    \n                    if(uiState.alertDialogState.visible()){\n                        AlertDialog(\n                            alertDialog = uiState.alertDialogState,\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = { event(MappingUiEvent.AlertDialog(alertDialogState = AlertDialogState())) })\n                    }\n\n                    if (uiState.discardHazardousMarkerDialogVisible) {\n                        DiscardHazardousLaneMarkerDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                            },\n                            onClickDiscard = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                                event(MappingUiEvent.DiscardMarkerChanges)\n                            }\n                        )\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.isRescueCancelled && uiState.rescueRequestAccepted.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n\n                        val rescueTransaction = state.rescueTransaction ?: return@AnimatedVisibility\n\n                        MappingRequestCancelled(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.CancelledRescueConfirmed) },\n                            cancelledRescueModel = CancelledRescueModel(\n                                transactionID = rescueTransaction.id,\n                                rescueCancelledBy = rescueTransaction.getCancellationName(),\n                                reason = rescueTransaction.getCancellationReason(),\n                                message = rescueTransaction.getCancellationMessage()\n                            ))\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.rescueRequestAccepted && uiState.isRescueCancelled.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n                        MappingRequestAccepted(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.RescueRequestAccepted) },\n                            acceptedName = state.rescuee?.name ?: \"Name placeholder\",\n                        )\n                    }\n                }\n            }\n\n\n            if (uiState.isSinoTrackWebViewVisible) {\n                SinoTrackWebView(onDismiss = {\n                    event(\n                        MappingUiEvent.SinoTrackWebViewVisibility(\n                            visibility = false))\n                })\n            }\n\n        }\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
---- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(revision a74d38b0031e52fde4ee3bb8ccbc8f19877f298e)
-+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(date 1694450331362)
-@@ -26,9 +26,11 @@
- import androidx.compose.ui.unit.dp
- import androidx.constraintlayout.compose.ConstraintLayout
- import androidx.constraintlayout.compose.Dimension
-+import com.example.cyclistance.core.domain.model.AlertDialogState
- import com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog
- import com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog
- import com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission
-+import com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogNotificationPermission
- import com.example.cyclistance.feature_authentication.presentation.common.visible
- import com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog
- import com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState
-@@ -352,6 +354,25 @@
-                     }
- 
- 
-+                    if (uiState.notificationPermissionVisible) {
-+                        DialogNotificationPermission(
-+                            modifier = Modifier.constrainAs(
-+                                dialog) {
-+                                end.linkTo(parent.end)
-+                                start.linkTo(parent.start)
-+                                bottom.linkTo(parent.bottom)
-+                                height = Dimension.wrapContent
-+                                centerTo(parent)
-+                            },
-+                            onDismiss = {
-+                                event(
-+                                    MappingUiEvent.NotificationPermissionDialog(
-+                                        visibility = false))
-+                            }
-+                        )
-+                    }
-+
-+
-                     
-                     if(uiState.alertDialogState.visible()){
-                         AlertDialog(
Index: .idea/shelf/ReportAccount/shelved.patch
===================================================================
diff --git a/.idea/shelf/ReportAccount/shelved.patch b/.idea/shelf/ReportAccount/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/ReportAccount/shelved.patch	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,810 +0,0 @@
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountDialog.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ /dev/null	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-@@ -1,116 +0,0 @@
--package com.example.cyclistance.feature_report_account.presentation
--
--import androidx.compose.runtime.Composable
--import androidx.compose.runtime.LaunchedEffect
--import androidx.compose.runtime.derivedStateOf
--import androidx.compose.runtime.getValue
--import androidx.compose.runtime.mutableStateListOf
--import androidx.compose.runtime.mutableStateOf
--import androidx.compose.runtime.remember
--import androidx.compose.runtime.saveable.rememberSaveable
--import androidx.compose.runtime.setValue
--import androidx.compose.ui.Modifier
--import androidx.compose.ui.text.input.TextFieldValue
--import androidx.compose.ui.tooling.preview.Preview
--import androidx.compose.ui.window.Dialog
--import androidx.compose.ui.window.DialogProperties
--import com.example.cyclistance.feature_report_account.domain.model.ui.AccountReport
--import com.example.cyclistance.feature_report_account.presentation.components.ReportAccountDialogContent
--import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountUiEvent
--import com.example.cyclistance.feature_report_account.presentation.state.ReportAccountUiState
--import com.example.cyclistance.theme.CyclistanceTheme
--
--@Composable
--fun ReportAccountDialog(onDismiss: () -> Unit) {
--
--    var uiState by rememberSaveable {
--        mutableStateOf(ReportAccountUiState())
--    }
--    val selectedOptions = rememberSaveable { mutableStateListOf<String>() }
--    var message by rememberSaveable(stateSaver = TextFieldValue.Saver) {
--        mutableStateOf(TextFieldValue())
--    }
--
--    val onChangeMessage = remember {
--        { _message: TextFieldValue ->
--            message = _message
--        }
--    }
--    val showReportFeedback = remember {
--        {
--            uiState = uiState.copy(shouldShowReportFeedback = true)
--        }
--    }
--    val onReasonChecked = remember {
--        { reason: String ->
--
--            selectedOptions.apply {
--                if (contains(reason)) {
--                    remove(reason)
--                    return@apply
--                }
--
--                if (uiState.isReportMaxLimitReached) {
--                    return@apply
--                }
--                selectedOptions.add(reason)
--
--            }.also {
--                uiState = uiState.copy(accountReport = AccountReport(selectedOptions = it))
--            }
--
--        }
--    }
--
--
--    val isReportMaxLimitReached by remember(uiState.accountReport) { derivedStateOf { uiState.accountReport.selectedOptions.size == 3 } }
--    val isReportButtonEnabled by remember(uiState.accountReport) { derivedStateOf { uiState.accountReport.selectedOptions.isNotEmpty() } }
--
--    LaunchedEffect(key1 = isReportButtonEnabled) {
--        uiState = uiState.copy(
--            isReportButtonEnabled = isReportButtonEnabled
--        )
--    }
--
--    LaunchedEffect(key1 = isReportMaxLimitReached){
--        uiState = uiState.copy(
--            isReportMaxLimitReached = isReportMaxLimitReached
--        )
--    }
--
--    Dialog(
--        onDismissRequest = onDismiss,
--        properties = DialogProperties(
--            usePlatformDefaultWidth = false,
--            dismissOnClickOutside = false,
--            dismissOnBackPress = true
--        )
--    ) {
--
--        ReportAccountDialogContent(
--            modifier = Modifier,
--            message = message,
--            uiState = uiState,
--            event = { event ->
--                when (event) {
--                    is ReportAccountUiEvent.DismissReportAccountDialog -> onDismiss()
--                    is ReportAccountUiEvent.ShowReportFeedback -> showReportFeedback()
--                    is ReportAccountUiEvent.OnReasonChecked -> onReasonChecked(event.reason)
--                    is ReportAccountUiEvent.OnChangeMessage -> onChangeMessage(event.message)
--                }
--
--            }
--
--        )
--    }
--
--}
--
--
--@Preview
--@Composable
--fun PreviewReportAccountDialog() {
--    CyclistanceTheme(darkTheme = true) {
--        ReportAccountDialog(onDismiss = {})
--    }
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/navigation/Screens.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.navigation\n\nimport com.example.cyclistance.core.utils.constants.EmergencyCallConstants.SHOULD_OPEN_CONTACT_DIALOG\nimport com.example.cyclistance.core.utils.constants.MessagingConstants.RECEIVER_MESSAGE_OBJ\nimport com.example.cyclistance.core.utils.constants.MessagingConstants.SENDER_MESSAGE_OBJ\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.CANCELLATION_TYPE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.CLIENT_ID\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.TRANSACTION_ID\nimport com.example.cyclistance.core.utils.constants.UserProfileConstants.USER_ID\n\nsealed class Screens {\n\n\n    open class AuthenticationNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"authentication_navigation\"\n        }\n\n        object SignIn : AuthenticationNavigation(screenRoute = \"sign_in_screen\")\n        object ForgotPassword : AuthenticationNavigation(screenRoute = \"forgot_password_screen\")\n        object ResetPassword : AuthenticationNavigation(screenRoute = \"change_password_screen\")\n        object SignUp : AuthenticationNavigation(screenRoute = \"sign_up_screen\")\n        object EmailAuth : AuthenticationNavigation(screenRoute = \"email_auth_screen\")\n    }\n\n    open class EmergencyCallNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"emergency_call_navigation\"\n        }\n\n        object EmergencyCall :\n            EmergencyCallNavigation(screenRoute = \"emergency_call_screen?$SHOULD_OPEN_CONTACT_DIALOG={$SHOULD_OPEN_CONTACT_DIALOG}\") {\n            fun passArgument(shouldOpenContactDialog: Boolean) =\n                \"emergency_call_screen?$SHOULD_OPEN_CONTACT_DIALOG=$shouldOpenContactDialog\"\n        }\n    }\n\n    open class MessagingNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"messaging_navigation\"\n        }\n\n        object Chats : MessagingNavigation(screenRoute = \"chat_screen\")\n        object SearchUser : MessagingNavigation(screenRoute = \"search_user_screen\")\n        object Conversation :\n            MessagingNavigation(screenRoute = \"conversation_screen/{$RECEIVER_MESSAGE_OBJ}/{$SENDER_MESSAGE_OBJ}\") {\n            fun passArgument(receiverMessageUser: String, senderMessageUser: String) =\n                \"conversation_screen/$receiverMessageUser/$senderMessageUser\"\n        }\n    }\n\n    open class OnBoardingNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"on_boarding_navigation\"\n        }\n\n        object IntroSlider : OnBoardingNavigation(screenRoute = \"intro_slider_screen\")\n    }\n\n    open class MappingNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"mapping_navigation\"\n        }\n\n        object SinoTrack: MappingNavigation(screenRoute = \"sino_track_screen\")\n        object RescueResults: MappingNavigation(screenRoute = \"rescue_results_screen\")\n        object RescueDetails: MappingNavigation(screenRoute = \"rescue_details_screen\")\n        object Mapping : MappingNavigation(screenRoute = \"mapping_screen\")\n        object Cancellation :\n            MappingNavigation(screenRoute = \"cancellation_screen\" + \"/{${CANCELLATION_TYPE}}/{${TRANSACTION_ID}}/{${CLIENT_ID}}\") {\n            fun passArgument(cancellationType: String, transactionId: String, clientId: String) =\n                \"cancellation_screen/$cancellationType/$transactionId/$clientId\"\n\n        }\n        object ConfirmDetails : MappingNavigation(screenRoute = \"confirm_details_screen\"+\"?${LATITUDE}={${LATITUDE}}&${LONGITUDE}={${LONGITUDE}}\"){\n            fun passArgument(latitude: Float, longitude: Float) =\n                \"confirm_details_screen\"+\"?$LATITUDE=${latitude}&$LONGITUDE=${longitude}\"\n        }\n    }\n\n    open class SettingsNavigation(val screenRoute: String = \"\") : Screens() {\n\n        companion object {\n            const val ROUTE = \"settings_navigation\"\n        }\n\n        object Setting : SettingsNavigation(screenRoute = \"setting_screen\")\n    }\n\n\n    open class RideHistoryNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"ride_history_navigation\"\n        }\n\n        object RideHistory : RideHistoryNavigation(screenRoute = \"ride_history_screen\")\n        object RideHistoryDetails :\n            RideHistoryNavigation(screenRoute = \"ride_history_details_screen\")\n    }\n\n    open class UserProfileNavigation(val screenRoute: String = \"\") : Screens() {\n        companion object {\n            const val ROUTE = \"user_profile_navigation\"\n        }\n\n        object UserProfile :\n            UserProfileNavigation(screenRoute = \"user_profile_screen/{$USER_ID}\") {\n            fun passArgument(userId: String) = \"user_profile_screen/$userId\"\n\n        }\n\n        object EditProfile : UserProfileNavigation(screenRoute = \"edit_profile_screen\")\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/navigation/Screens.kt b/app/src/main/java/com/example/cyclistance/navigation/Screens.kt
---- a/app/src/main/java/com/example/cyclistance/navigation/Screens.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/navigation/Screens.kt	(date 1694834975850)
-@@ -114,4 +114,12 @@
-         object EditProfile : UserProfileNavigation(screenRoute = "edit_profile_screen")
-     }
- 
-+    open class ReportAccountNavigation(val screenRoute: String = ""): Screens(){
-+        companion object{
-+            const val ROUTE = "report_account_navigation"
-+        }
-+
-+        object ReportAccount: ReportAccountNavigation(screenRoute = "report_account_screen")
-+    }
-+
- }
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt
-new file mode 100644
---- /dev/null	(date 1694837596863)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountVmEvent.kt	(date 1694837596863)
-@@ -0,0 +1,7 @@
-+package com.example.cyclistance.feature_report_account.presentation.event
-+
-+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
-+
-+sealed class ReportAccountVmEvent{
-+    data class ReportAccount(val reportAccountDetails: ReportAccountDetails): ReportAccountVmEvent()
-+}
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt
-new file mode 100644
---- /dev/null	(date 1694840901725)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/exceptions/ReportAccountExceptions.kt	(date 1694840901725)
-@@ -0,0 +1,5 @@
-+package com.example.cyclistance.feature_report_account.domain.exceptions
-+
-+object ReportAccountExceptions {
-+    class ReportAccountException(message: String = "Report account failed") : RuntimeException()
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/OptionsReport.kt
-rename from app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt
-rename to app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/OptionsReport.kt
---- a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/AccountReport.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ui/OptionsReport.kt	(date 1694836738938)
-@@ -6,7 +6,7 @@
- 
- @Parcelize
- @StableState
--data class AccountReport(
-+data class OptionsReport(
-     val selectedOptions: List<String> = emptyList()
- ): Parcelable
- 
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt
-new file mode 100644
---- /dev/null	(date 1694862331292)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/data/repository/ReportAccountRepositoryImpl.kt	(date 1694862331292)
-@@ -0,0 +1,34 @@
-+package com.example.cyclistance.feature_report_account.data.repository
-+
-+import com.example.cyclistance.core.utils.constants.ReportAccountConstants.REPORT_ACCOUNT_COLLECTION
-+import com.example.cyclistance.feature_report_account.domain.exceptions.ReportAccountExceptions
-+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
-+import com.example.cyclistance.feature_report_account.domain.repository.ReportAccountRepository
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FirebaseFirestore
-+import kotlinx.coroutines.suspendCancellableCoroutine
-+import kotlin.coroutines.resume
-+import kotlin.coroutines.resumeWithException
-+
-+class ReportAccountRepositoryImpl(
-+    private val firestore: FirebaseFirestore,
-+    private val auth: FirebaseAuth,
-+) : ReportAccountRepository{
-+
-+    override suspend fun reportAccount(reportAccountDetails: ReportAccountDetails) {
-+
-+        suspendCancellableCoroutine { continuation ->
-+            firestore
-+                .collection(REPORT_ACCOUNT_COLLECTION)
-+                .add(reportAccountDetails)
-+                .addOnSuccessListener {
-+                    continuation.resume(Unit)
-+                }.addOnFailureListener {
-+                    println("ReportAccountRepositoryImpl: reportAccount: failure")
-+                    continuation.resumeWithException(
-+                        ReportAccountExceptions.ReportAccountException(
-+                            it.message.toString()))
-+                }
-+        }
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountContent.kt
-rename from app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt
-rename to app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountContent.kt
---- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountDialogContent.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountContent.kt	(date 1694862670275)
-@@ -54,7 +54,7 @@
- )
- 
- @Composable
--fun ReportAccountDialogContent(
-+fun ReportAccountContent(
-     modifier: Modifier = Modifier,
-     message: TextFieldValue,
-     uiState: ReportAccountUiState,
-@@ -151,14 +151,12 @@
-                         }) {
- 
-                         reasonsToReportAccount.forEach { reason ->
--                            val isChecked by remember(uiState.accountReport) { derivedStateOf { reason in uiState.accountReport.selectedOptions } }
-+                            val isChecked by remember(uiState.optionsReport) { derivedStateOf { reason in uiState.optionsReport.selectedOptions } }
-                             ReportReasonItem(
-                                 label = reason,
-                                 isChecked = isChecked,
-                                 onReasonChecked = {
--
-                                     event(ReportAccountUiEvent.OnReasonChecked(reason = reason))
--
-                                 })
-                         }
-                     }
-@@ -229,7 +227,7 @@
- @Composable
- private fun PreviewReportAccountDialogContent() {
-     CyclistanceTheme(darkTheme = true) {
--        ReportAccountDialogContent(
-+        ReportAccountContent(
-             message = TextFieldValue(),
-             uiState = ReportAccountUiState(),
-             event = {})
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt
-new file mode 100644
---- /dev/null	(date 1694840901712)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportUseCase.kt	(date 1694840901712)
-@@ -0,0 +1,10 @@
-+package com.example.cyclistance.feature_report_account.domain.use_case
-+
-+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
-+import com.example.cyclistance.feature_report_account.domain.repository.ReportAccountRepository
-+
-+class ReportUseCase(private val repository: ReportAccountRepository) {
-+    suspend operator fun invoke(reportAccountDetails: ReportAccountDetails){
-+        repository.reportAccount(reportAccountDetails)
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_report_account.presentation.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_report_account.domain.model.ui.AccountReport\nimport kotlinx.parcelize.Parcelize\n\n\n@Parcelize\n@StableState\ndata class ReportAccountUiState(\n    val accountReport: AccountReport = AccountReport(),\n    val shouldShowReportFeedback: Boolean = false,\n    val isReportMaxLimitReached: Boolean = false,\n    val isReportButtonEnabled: Boolean = false,\n    val reportedName: String = \"\",\n    val reportedPhoto: String = \"\"\n) : Parcelable\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt
---- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountUiState.kt	(date 1694836738925)
-@@ -2,14 +2,14 @@
- 
- import android.os.Parcelable
- import com.example.cyclistance.core.utils.annotations.StableState
--import com.example.cyclistance.feature_report_account.domain.model.ui.AccountReport
-+import com.example.cyclistance.feature_report_account.domain.model.ui.OptionsReport
- import kotlinx.parcelize.Parcelize
- 
- 
- @Parcelize
- @StableState
- data class ReportAccountUiState(
--    val accountReport: AccountReport = AccountReport(),
-+    val optionsReport: OptionsReport = OptionsReport(),
-     val shouldShowReportFeedback: Boolean = false,
-     val isReportMaxLimitReached: Boolean = false,
-     val isReportButtonEnabled: Boolean = false,
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt
-new file mode 100644
---- /dev/null	(date 1694837596869)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/state/ReportAccountState.kt	(date 1694837596869)
-@@ -0,0 +1,11 @@
-+package com.example.cyclistance.feature_report_account.presentation.state
-+
-+import android.os.Parcelable
-+import kotlinx.parcelize.Parcelize
-+
-+@Parcelize
-+@com.example.cyclistance.core.utils.annotations.StableState
-+data class ReportAccountState(
-+    val isLoading: Boolean = false
-+
-+):Parcelable
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_report_account.presentation.event\n\nimport androidx.compose.ui.text.input.TextFieldValue\n\nsealed class ReportAccountUiEvent{\n    object DismissReportAccountDialog: ReportAccountUiEvent()\n    object ShowReportFeedback: ReportAccountUiEvent()\n    data class OnReasonChecked(val reason: String): ReportAccountUiEvent()\n    data class OnChangeMessage(val message: TextFieldValue): ReportAccountUiEvent()\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt
---- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountUiEvent.kt	(date 1694863751024)
-@@ -3,8 +3,8 @@
- import androidx.compose.ui.text.input.TextFieldValue
- 
- sealed class ReportAccountUiEvent{
--    object DismissReportAccountDialog: ReportAccountUiEvent()
--    object ShowReportFeedback: ReportAccountUiEvent()
-+    data object DismissReportAccountDialog: ReportAccountUiEvent()
-+    data object ReportAccount: ReportAccountUiEvent()
-     data class OnReasonChecked(val reason: String): ReportAccountUiEvent()
-     data class OnChangeMessage(val message: TextFieldValue): ReportAccountUiEvent()
- }
-Index: app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt b/app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt
-new file mode 100644
---- /dev/null	(date 1694840901739)
-+++ b/app/src/main/java/com/example/cyclistance/di/report_account/ReportAccountViewModelModule.kt	(date 1694840901739)
-@@ -0,0 +1,43 @@
-+package com.example.cyclistance.di.report_account
-+
-+import com.example.cyclistance.feature_report_account.data.repository.ReportAccountRepositoryImpl
-+import com.example.cyclistance.feature_report_account.domain.repository.ReportAccountRepository
-+import com.example.cyclistance.feature_report_account.domain.use_case.ReportAccountUseCase
-+import com.example.cyclistance.feature_report_account.domain.use_case.ReportUseCase
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FirebaseFirestore
-+import dagger.Module
-+import dagger.Provides
-+import dagger.hilt.InstallIn
-+import dagger.hilt.android.components.ViewModelComponent
-+import dagger.hilt.android.scopes.ViewModelScoped
-+
-+
-+@Module
-+@InstallIn(ViewModelComponent::class)
-+object ReportAccountViewModelModule {
-+
-+    @Provides
-+    @ViewModelScoped
-+    fun provideReportAccountRepository(
-+        fireStore: FirebaseFirestore,
-+        firebaseAuth: FirebaseAuth
-+    ): ReportAccountRepository {
-+        return ReportAccountRepositoryImpl(
-+            firestore = fireStore,
-+            auth = firebaseAuth
-+        )
-+    }
-+
-+    @Provides
-+    @ViewModelScoped
-+    fun provideReportAccountUseCase(
-+        repository: ReportAccountRepository
-+    ): ReportAccountUseCase {
-+        return ReportAccountUseCase(
-+            reportUseCase = ReportUseCase(
-+                repository = repository)
-+        )
-+    }
-+
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt
-new file mode 100644
---- /dev/null	(date 1694840901719)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/use_case/ReportAccountUseCase.kt	(date 1694840901719)
-@@ -0,0 +1,5 @@
-+package com.example.cyclistance.feature_report_account.domain.use_case
-+
-+data class ReportAccountUseCase(
-+    val reportUseCase: ReportUseCase
-+)
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt
-new file mode 100644
---- /dev/null	(date 1694841078354)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/event/ReportAccountEvent.kt	(date 1694841078354)
-@@ -0,0 +1,6 @@
-+package com.example.cyclistance.feature_report_account.presentation.event
-+
-+sealed class ReportAccountEvent{
-+    data object ReportAccountSuccess: ReportAccountEvent()
-+    data class ReportAccountFailed(val reason: String): ReportAccountEvent()
-+}
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.feature_report_account.presentation.components\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Button\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\nimport coil.request.CachePolicy\nimport coil.request.ImageRequest\nimport com.example.cyclistance.R\nimport com.example.cyclistance.theme.Black500\nimport com.example.cyclistance.theme.CyclistanceTheme\n\n@Composable\nfun ReportAccountFeedback(\n    modifier: Modifier = Modifier,\n    photo: String,\n    name: String,\n    onClickOkayButton: () -> Unit\n) {\n    Column(\n        verticalArrangement = Arrangement.Top,\n        horizontalAlignment = Alignment.CenterHorizontally, modifier = modifier.fillMaxWidth()\n    ) {\n\n\n        Image(\n            painter = painterResource(id = R.drawable.ic_report_account_feedback),\n            contentDescription = \"Report Account Feedback\",\n            modifier = Modifier.padding(vertical = 16.dp)\n        )\n\n        Text(\n            text = \"Thank you for feedback\",\n            color = MaterialTheme.colors.onBackground,\n            style = MaterialTheme.typography.body1,\n        )\n\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(\n                8.dp,\n                alignment = Alignment.CenterHorizontally\n            ),\n            modifier = Modifier\n                .padding(vertical = 16.dp)\n                .fillMaxWidth(0.9f)\n        ) {\n\n\n            AsyncImage(\n                model = ImageRequest.Builder(LocalContext.current)\n                    .data(photo)\n                    .crossfade(true)\n                    .networkCachePolicy(CachePolicy.ENABLED)\n                    .diskCachePolicy(CachePolicy.ENABLED)\n                    .memoryCachePolicy(CachePolicy.ENABLED)\n                    .build(),\n                alignment = Alignment.Center,\n                contentDescription = \"User Profile Image\",\n                modifier = Modifier\n                    .clip(CircleShape)\n                    .size(45.dp),\n                contentScale = ContentScale.Crop,\n                placeholder = painterResource(id = R.drawable.ic_empty_profile_placeholder_large),\n                error = painterResource(id = R.drawable.ic_empty_profile_placeholder_large),\n                fallback = painterResource(id = R.drawable.ic_empty_profile_placeholder_large)\n            )\n\n            Text(\n                text = name,\n                color = MaterialTheme.colors.onBackground,\n                style = MaterialTheme.typography.body1,\n                overflow = TextOverflow.Ellipsis,\n                maxLines = 1,\n                modifier = Modifier.weight(0.3f)\n\n            )\n\n\n        }\n\n        Text(\n            text = \"The reported account will be validated. The penalty will be implied once the action has been confirmed.\",\n            color = Black500,\n            style = MaterialTheme.typography.body1.copy(textAlign = TextAlign.Center),\n            modifier = Modifier\n                .fillMaxWidth(0.8f)\n                .padding(vertical = 16.dp),\n            )\n\n        Button(onClick = onClickOkayButton, shape = RoundedCornerShape(8.dp)) {\n            Text(\n                text = \"Okay\",\n                color = MaterialTheme.colors.onPrimary,\n                style = MaterialTheme.typography.button,\n                modifier = Modifier.padding(horizontal = 16.dp),\n\n                )\n        }\n    }\n}\n\n@Preview\n@Composable\nprivate fun PreviewReportAccountFeedback() {\n    CyclistanceTheme(darkTheme = true) {\n        Box(modifier = Modifier.background(MaterialTheme.colors.background)) {\n            Box(modifier = Modifier.fillMaxSize()) {\n                ReportAccountFeedback(\n                    photo = \"\",\n                    name = \"John Doe John DoeJohn DoeJohn DoeJohn DoeJohn DoeJohn DoeJohn DoeJohn Doe\",\n                    onClickOkayButton = {})\n            }\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt
---- a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/components/ReportAccountFeedback.kt	(date 1694864383026)
-@@ -25,6 +25,8 @@
- import androidx.compose.ui.text.style.TextAlign
- import androidx.compose.ui.text.style.TextOverflow
- import androidx.compose.ui.tooling.preview.Preview
-+import androidx.compose.ui.unit.TextUnit
-+import androidx.compose.ui.unit.TextUnitType
- import androidx.compose.ui.unit.dp
- import coil.compose.AsyncImage
- import coil.request.CachePolicy
-@@ -105,11 +107,13 @@
-         Text(
-             text = "The reported account will be validated. The penalty will be implied once the action has been confirmed.",
-             color = Black500,
--            style = MaterialTheme.typography.body1.copy(textAlign = TextAlign.Center),
-+            style = MaterialTheme.typography.body1.copy(
-+                textAlign = TextAlign.Justify,
-+                letterSpacing = TextUnit(0.6f, type = TextUnitType.Sp)),
-             modifier = Modifier
-                 .fillMaxWidth(0.8f)
-                 .padding(vertical = 16.dp),
--            )
-+        )
- 
-         Button(onClick = onClickOkayButton, shape = RoundedCornerShape(8.dp)) {
-             Text(
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt
-new file mode 100644
---- /dev/null	(date 1694864383033)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountScreen.kt	(date 1694864383033)
-@@ -0,0 +1,113 @@
-+package com.example.cyclistance.feature_report_account.presentation
-+
-+import androidx.compose.foundation.layout.PaddingValues
-+import androidx.compose.foundation.layout.padding
-+import androidx.compose.runtime.Composable
-+import androidx.compose.runtime.LaunchedEffect
-+import androidx.compose.runtime.derivedStateOf
-+import androidx.compose.runtime.getValue
-+import androidx.compose.runtime.mutableStateListOf
-+import androidx.compose.runtime.mutableStateOf
-+import androidx.compose.runtime.remember
-+import androidx.compose.runtime.saveable.rememberSaveable
-+import androidx.compose.runtime.setValue
-+import androidx.compose.ui.Modifier
-+import androidx.compose.ui.text.input.TextFieldValue
-+import androidx.hilt.navigation.compose.hiltViewModel
-+import androidx.navigation.NavController
-+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
-+import com.example.cyclistance.feature_report_account.domain.model.ui.OptionsReport
-+import com.example.cyclistance.feature_report_account.presentation.components.ReportAccountContent
-+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountUiEvent
-+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountVmEvent
-+import com.example.cyclistance.feature_report_account.presentation.state.ReportAccountUiState
-+import java.util.Date
-+
-+@Composable
-+fun ReportAccountScreen(
-+    paddingValues: PaddingValues,
-+    navController: NavController,
-+    viewModel: ReportAccountViewModel = hiltViewModel()) {
-+
-+    var uiState by rememberSaveable {
-+        mutableStateOf(ReportAccountUiState())
-+    }
-+    val selectedOptions = rememberSaveable { mutableStateListOf<String>() }
-+    var comment by rememberSaveable(stateSaver = TextFieldValue.Saver) {
-+        mutableStateOf(TextFieldValue())
-+    }
-+
-+    val onChangeComment = remember {
-+        { _comment: TextFieldValue ->
-+            comment = _comment
-+        }
-+    }
-+
-+    val reportAccount = remember{{
-+        viewModel.onEvent(event = ReportAccountVmEvent.ReportAccount(
-+            reportAccountDetails = ReportAccountDetails(
-+               reasons = OptionsReport(selectedOptions = selectedOptions),
-+                name = uiState.reportedName,
-+                date = Date(),
-+                comment = comment.text,
-+
-+            )
-+        ))
-+    }}
-+
-+    val onReasonChecked = remember {
-+        { reason: String ->
-+
-+            selectedOptions.apply {
-+                if (contains(reason)) {
-+                    remove(reason)
-+                    return@apply
-+                }
-+
-+                if (uiState.isReportMaxLimitReached) {
-+                    return@apply
-+                }
-+                selectedOptions.add(reason)
-+
-+            }.also {
-+                uiState = uiState.copy(optionsReport = OptionsReport(selectedOptions = it))
-+            }
-+
-+        }
-+    }
-+
-+
-+    val isReportMaxLimitReached by remember(uiState.optionsReport) { derivedStateOf { uiState.optionsReport.selectedOptions.size == 3 } }
-+    val isReportButtonEnabled by remember(uiState.optionsReport) { derivedStateOf { uiState.optionsReport.selectedOptions.isNotEmpty() } }
-+
-+    LaunchedEffect(key1 = isReportButtonEnabled) {
-+        uiState = uiState.copy(
-+            isReportButtonEnabled = isReportButtonEnabled
-+        )
-+    }
-+
-+    LaunchedEffect(key1 = isReportMaxLimitReached) {
-+        uiState = uiState.copy(
-+            isReportMaxLimitReached = isReportMaxLimitReached
-+        )
-+    }
-+
-+
-+    ReportAccountContent(
-+        modifier = Modifier.padding(paddingValues),
-+        message = comment,
-+        uiState = uiState,
-+        event = { event ->
-+            when (event) {
-+                is ReportAccountUiEvent.DismissReportAccountDialog -> navController.popBackStack()
-+                is ReportAccountUiEvent.ReportAccount -> showReportFeedback()
-+                is ReportAccountUiEvent.OnReasonChecked -> onReasonChecked(event.reason)
-+                is ReportAccountUiEvent.OnChangeMessage -> onChangeComment(event.message)
-+            }
-+
-+        }
-+
-+    )
-+
-+}
-+
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt
-new file mode 100644
---- /dev/null	(date 1694841476768)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/presentation/ReportAccountViewModel.kt	(date 1694841476768)
-@@ -0,0 +1,50 @@
-+package com.example.cyclistance.feature_report_account.presentation
-+
-+import androidx.lifecycle.SavedStateHandle
-+import androidx.lifecycle.ViewModel
-+import androidx.lifecycle.viewModelScope
-+import com.example.cyclistance.core.utils.constants.ReportAccountConstants.REPORT_ACCOUNT_VM_STATE_KEY
-+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
-+import com.example.cyclistance.feature_report_account.domain.use_case.ReportAccountUseCase
-+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountEvent
-+import com.example.cyclistance.feature_report_account.presentation.event.ReportAccountVmEvent
-+import com.example.cyclistance.feature_report_account.presentation.state.ReportAccountState
-+import dagger.hilt.android.lifecycle.HiltViewModel
-+import kotlinx.coroutines.flow.MutableSharedFlow
-+import kotlinx.coroutines.flow.MutableStateFlow
-+import kotlinx.coroutines.flow.asSharedFlow
-+import kotlinx.coroutines.flow.asStateFlow
-+import kotlinx.coroutines.launch
-+import javax.inject.Inject
-+
-+@HiltViewModel
-+class ReportAccountViewModel @Inject constructor(
-+    private val savedStateHandle: SavedStateHandle,
-+    private val reportAccountUseCase: ReportAccountUseCase
-+): ViewModel() {
-+
-+    private val _state = MutableStateFlow(ReportAccountState())
-+    val state = _state.asStateFlow()
-+
-+    private val _eventFlow = MutableSharedFlow<ReportAccountEvent>()
-+    val eventFlow = _eventFlow.asSharedFlow()
-+
-+    fun onEvent(event: ReportAccountVmEvent){
-+        when(event){
-+            is ReportAccountVmEvent.ReportAccount -> reportAccount(event.reportAccountDetails)
-+        }
-+        savedStateHandle[REPORT_ACCOUNT_VM_STATE_KEY] = state.value
-+    }
-+
-+    private fun reportAccount(reportAccountDetails: ReportAccountDetails){
-+        viewModelScope.launch {
-+            runCatching {
-+                reportAccountUseCase.reportUseCase(reportAccountDetails)
-+            }.onSuccess {
-+                _eventFlow.emit(value = ReportAccountEvent.ReportAccountSuccess)
-+            }.onFailure {
-+                _eventFlow.emit(value = ReportAccountEvent.ReportAccountFailed(reason = it.message ?: "Failed to report account"))
-+            }
-+        }
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.cyclistance.navigation.nav_graph\n\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport com.example.cyclistance.navigation.event.NavUiEvent\nimport com.example.cyclistance.navigation.state.NavUiState\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\n\n\n@ExperimentalPermissionsApi\n@Composable\nfun NavGraph(\n    navController: NavHostController,\n    paddingValues: PaddingValues,\n    uiState: NavUiState,\n    event: (NavUiEvent) -> Unit) {\n\n\n    NavHost(\n        navController = navController,\n        startDestination = uiState.startingDestination,\n        enterTransition = {\n            fadeIn(\n                animationSpec = tween(\n                    durationMillis = 300))\n        },\n        exitTransition = {\n            fadeOut(\n                animationSpec = tween(\n                    durationMillis = 300))\n        }) {\n\n\n        authenticationGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n        )\n\n        mappingGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n            hasInternetConnection = uiState.internetAvailable,\n            isNavigating = uiState.isNavigating,\n            onChangeNavigatingState = { event(NavUiEvent.OnChangeNavigation(it)) }\n        )\n\n        emergencyCallGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n        messagingGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n            isInternetAvailable = uiState.internetAvailable,\n            newConversationDetails = {\n                event(\n                    NavUiEvent.NewConversationDetails(it))\n            }\n        )\n\n        onBoardingGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n        settingGraph(\n            navController = navController,\n            paddingValues = paddingValues,\n            onToggleTheme = { event(NavUiEvent.OnToggleTheme) }\n        )\n\n        rideHistoryGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n        userProfileGraph(\n            navController = navController,\n            paddingValues = paddingValues\n        )\n\n    }\n}\n\n\nfun NavController.navigateScreenInclusively(\n    destination: String,\n    popUpToDestination: String) {\n    navigate(destination) {\n        popUpTo(popUpToDestination) {\n            inclusive = true\n        }\n        launchSingleTop = true\n    }\n\n}\n\nfun NavController.navigateScreen(\n    route: String) {\n    navigate(route) {\n        popUpTo(route) {\n            saveState = true\n\n        }\n        restoreState = true\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt
---- a/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt	(revision fc50d260eb40716200aafdb48b9a9d238944bf02)
-+++ b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/NavGraph.kt	(date 1694835094322)
-@@ -86,6 +86,11 @@
-             paddingValues = paddingValues
-         )
- 
-+        onReportAccountGraph(
-+            navController = navController,
-+            paddingValues = paddingValues
-+        )
-+
-     }
- }
- 
-Index: app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt
-new file mode 100644
---- /dev/null	(date 1694835094332)
-+++ b/app/src/main/java/com/example/cyclistance/navigation/nav_graph/ReportAccountGraph.kt	(date 1694835094332)
-@@ -0,0 +1,31 @@
-+package com.example.cyclistance.navigation.nav_graph
-+
-+import androidx.compose.foundation.layout.PaddingValues
-+import androidx.navigation.NavController
-+import androidx.navigation.NavGraphBuilder
-+import androidx.navigation.compose.composable
-+import androidx.navigation.navigation
-+import com.example.cyclistance.feature_report_account.presentation.ReportAccountScreen
-+import com.example.cyclistance.navigation.Screens
-+
-+fun NavGraphBuilder.onReportAccountGraph(
-+    navController: NavController,
-+    paddingValues: PaddingValues
-+) {
-+
-+    navigation(
-+        startDestination = Screens.ReportAccountNavigation.ReportAccount.screenRoute,
-+        route = Screens.ReportAccountNavigation.ROUTE){
-+
-+        composable(Screens.ReportAccountNavigation.ReportAccount.screenRoute){
-+            ReportAccountScreen(
-+                navController = navController,
-+                paddingValues = paddingValues
-+            )
-+        }
-+
-+    }
-+
-+
-+
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt
-new file mode 100644
---- /dev/null	(date 1694838235595)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/repository/ReportAccountRepository.kt	(date 1694838235595)
-@@ -0,0 +1,7 @@
-+package com.example.cyclistance.feature_report_account.domain.repository
-+
-+import com.example.cyclistance.feature_report_account.domain.model.ReportAccountDetails
-+
-+interface ReportAccountRepository {
-+    suspend fun reportAccount(reportAccountDetails: ReportAccountDetails)
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt
-new file mode 100644
---- /dev/null	(date 1694862545106)
-+++ b/app/src/main/java/com/example/cyclistance/feature_report_account/domain/model/ReportAccountDetails.kt	(date 1694862545106)
-@@ -0,0 +1,19 @@
-+package com.example.cyclistance.feature_report_account.domain.model
-+
-+import android.os.Parcelable
-+import com.example.cyclistance.core.utils.annotations.StableState
-+import com.example.cyclistance.feature_report_account.domain.model.ui.OptionsReport
-+import kotlinx.parcelize.Parcelize
-+import java.util.Date
-+
-+@Parcelize
-+@StableState
-+data class ReportAccountDetails(
-+    val reasons: OptionsReport = OptionsReport(),
-+    val name: String = "",
-+    val userId: String = "",
-+    val idReportBy: String = "",
-+    val comment: String = "",
-+    val date: Date? = null,
-+
-+    ):Parcelable
-Index: app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt b/app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt
-new file mode 100644
---- /dev/null	(date 1694841476758)
-+++ b/app/src/main/java/com/example/cyclistance/core/utils/constants/ReportAccountConstants.kt	(date 1694841476758)
-@@ -0,0 +1,6 @@
-+package com.example.cyclistance.core.utils.constants
-+
-+object ReportAccountConstants {
-+    const val REPORT_ACCOUNT_COLLECTION = "reportAccount"
-+    const val REPORT_ACCOUNT_VM_STATE_KEY = "reportAccountVmState"
-+}
-\ No newline at end of file
Index: .idea/shelf/Changes.xml
===================================================================
diff --git a/.idea/shelf/Changes.xml b/.idea/shelf/Changes.xml
deleted file mode 100644
--- a/.idea/shelf/Changes.xml	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,4 +0,0 @@
-<changelist name="Changes" date="1696661930713" recycled="false" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes/shelved.patch" />
-  <option name="DESCRIPTION" value="Changes" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Handling_notification_permission_in_mapping.xml
===================================================================
diff --git a/.idea/shelf/Handling_notification_permission_in_mapping.xml b/.idea/shelf/Handling_notification_permission_in_mapping.xml
deleted file mode 100644
--- a/.idea/shelf/Handling_notification_permission_in_mapping.xml	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,19 +0,0 @@
-<changelist name="Handling_notification_permission_in_mapping" date="1696661930713" recycled="false" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Handling_notification_permission_in_mapping/shelved.patch" />
-  <option name="DESCRIPTION" value="Handling notification permission in mapping" />
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="firebase-export-1694437724259la8ngl/firestore_export/all_namespaces/all_kinds/all_namespaces_all_kinds.export_metadata" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Handling_notification_permission_in_mapping/all_namespaces_all_kinds.export_metadata" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="firebase-export-1694437724259la8ngl/firestore_export/all_namespaces/all_kinds/output-0" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Handling_notification_permission_in_mapping/output-0" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" />
-    <option name="AFTER_PATH" value="firebase-export-1694437724259la8ngl/firestore_export/firestore_export.overall_export_metadata" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Handling_notification_permission_in_mapping/firestore_export.overall_export_metadata" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/mapping-permissions.xml
===================================================================
diff --git a/.idea/shelf/mapping-permissions.xml b/.idea/shelf/mapping-permissions.xml
deleted file mode 100644
--- a/.idea/shelf/mapping-permissions.xml	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,4 +0,0 @@
-<changelist name="mapping-permissions" date="1696661930713" recycled="false" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/mapping-permissions/shelved.patch" />
-  <option name="DESCRIPTION" value="mapping-permissions" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/ReportAccount.xml
===================================================================
diff --git a/.idea/shelf/ReportAccount.xml b/.idea/shelf/ReportAccount.xml
deleted file mode 100644
--- a/.idea/shelf/ReportAccount.xml	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ /dev/null	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
@@ -1,4 +0,0 @@
-<changelist name="ReportAccount" date="1696661930713" recycled="false" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/ReportAccount/shelved.patch" />
-  <option name="DESCRIPTION" value="ReportAccount" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_RADIUS\nimport com.example.cyclistance.core.utils.constants.MappingConstants.MAPPING_VM_STATE_KEY\nimport com.example.cyclistance.core.utils.constants.MappingConstants.NEAREST_METERS\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.formatToDistanceKm\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.isLocationAvailable\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\nimport com.example.cyclistance.feature_mapping.data.mapper.UserMapper.toRescueRequest\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.helper.TrackingStateHandler\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.live_location.LiveLocationSocketModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue.RescueRequestItemModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransaction\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.RescuePending\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.RescueRequest\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserAssistanceModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.createMockUsers\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport com.example.cyclistance.feature_rescue_record.domain.use_case.RescueRecordUseCase\nimport com.example.cyclistance.feature_user_profile.domain.use_case.UserProfileUseCase\nimport com.google.maps.android.SphericalUtil\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharedFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.flow.launchIn\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\nimport javax.inject.Inject\nimport com.google.android.gms.maps.model.LatLng as GoogleLatLng\n\n\n@HiltViewModel\nclass MappingViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val authUseCase: AuthenticationUseCase,\n    private val mappingUseCase: MappingUseCase,\n    private val userProfileUseCase: UserProfileUseCase,\n    private val defaultDispatcher: CoroutineDispatcher,\n    private val messagingUseCase: MessagingUseCase,\n    private val rescueRecordUseCase: RescueRecordUseCase\n) : ViewModel() {\n\n\n    private var loadDataJob: Job? = null\n    private var getUsersUpdatesJob: Job? = null\n    private var locationUpdatesJob: Job? = null\n    private var getRescueTransactionUpdatesJob: Job? = null\n    private var getTransactionLocationUpdatesJob: Job? = null\n    private var trackingHandler: TrackingStateHandler\n\n    private val _state: MutableStateFlow<MappingState> = MutableStateFlow(\n        savedStateHandle[MAPPING_VM_STATE_KEY] ?: MappingState(userId = getId())\n    )\n    val state = _state.asStateFlow()\n\n    private val _eventFlow: MutableSharedFlow<MappingEvent> = MutableSharedFlow()\n    val eventFlow: SharedFlow<MappingEvent> = _eventFlow.asSharedFlow()\n    private var travelledPath: MutableList<GoogleLatLng> = mutableStateListOf()\n\n    private val _hazardousLaneMarkers = mutableStateListOf<HazardousLaneMarker>()\n    val hazardousLaneMarkers: List<HazardousLaneMarker> = _hazardousLaneMarkers\n\n    init {\n        trackingHandler = TrackingStateHandler(state = _state, eventFlow = _eventFlow)\n        loadData()\n        observeDataChanges()\n        getMapType()\n        getShouldShowHazardousStartingInfo()\n        refreshToken()\n    }\n\n    private fun setShouldShowHazardousStartingInfo(shouldShow: Boolean) {\n        viewModelScope.launch {\n            mappingUseCase.shouldHazardousStartingInfoUseCase(shouldShow = shouldShow)\n        }\n    }\n\n    private fun getShouldShowHazardousStartingInfo() {\n        viewModelScope.launch {\n            mappingUseCase.shouldHazardousStartingInfoUseCase().catch {\n                it.handleException()\n            }.onEach { shouldShow ->\n                _state.update { it.copy(shouldShowHazardousStartingInfo = shouldShow) }\n            }.launchIn(this)\n        }\n    }\n\n\n    private fun observeDataChanges() {\n        subscribeToLocationUpdates()\n        subscribeToNearbyUsersChanges()\n        subscribeToRescueTransactionUpdates()\n        subscribeToTransactionLocationUpdates()\n        subscribeToBottomSheetTypeUpdates()\n        subscribeToHazardousLaneUpdates()\n    }\n\n    private fun getMapType() {\n        viewModelScope.launch {\n            mappingUseCase.mapTypeUseCase()\n                .distinctUntilChanged()\n                .catch {\n                    Timber.v(\"Error getting map type: ${it.message}\")\n                }.onEach { mapType ->\n                    _state.update { it.copy(mapType = mapType) }\n                }.launchIn(viewModelScope)\n\n        }\n    }\n\n    private fun subscribeToHazardousLaneUpdates() {\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.newHazardousLaneUseCase(\n                onAddedHazardousMarker = { marker ->\n\n                    _hazardousLaneMarkers.removeAll { modifiedMarker ->\n                        marker.id == modifiedMarker.id\n                    }\n                    _hazardousLaneMarkers.add(marker)\n                },\n                onModifiedHazardousMarker = { modifiedMarker ->\n                    _hazardousLaneMarkers.removeAll { marker ->\n                        marker.id == modifiedMarker.id\n                    }\n                    _hazardousLaneMarkers.add(modifiedMarker)\n                },\n                onRemovedHazardousMarker = { markerId ->\n                    _hazardousLaneMarkers.removeAll { marker ->\n                        marker.id == markerId\n                    }\n                }\n            )\n\n        }\n    }\n\n    private fun subscribeToBottomSheetTypeUpdates() {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.bottomSheetTypeUseCase().catch {\n                it.handleException()\n            }.onEach {\n                if(it.isEmpty()){\n                    return@onEach\n                }\n                _eventFlow.emit(value = MappingEvent.NewBottomSheetType(it))\n            }.launchIn(this)\n        }\n    }\n\n    private fun loadData() {\n        if (loadDataJob?.isActive == true) return\n        loadDataJob = viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n            // TODO: Remove when the backend is ready\n            createMockUpUsers()\n            getNearbyCyclist()\n            trackingHandler.updateClient()\n        }\n\n    }\n\n\n    private suspend fun loadRescueTransaction(transactionId: String) {\n        coroutineScope {\n            if (transactionId.isEmpty()) {\n                return@coroutineScope\n            }\n\n            mappingUseCase.getRescueTransactionByIdUseCase(transactionId).catch {\n                it.handleException()\n            }.onEach { rescueTransaction ->\n                _state.update { it.copy(rescueTransaction = rescueTransaction) }\n            }.launchIn(this).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private suspend fun getNearbyCyclist() {\n        val userLocation = state.value.getCurrentLocation()\n        Timber.v(\"Getting nearby cyclist $userLocation\")\n\n        val dataLoaded = state.value.user.id != null\n        userLocation?.latitude ?: return\n        userLocation.longitude ?: return\n\n        if (dataLoaded) {\n            return\n        }\n\n        coroutineScope {\n\n\n            mappingUseCase.getUsersUseCase(\n                latitude = userLocation.latitude,\n                longitude = userLocation.longitude\n            ).distinctUntilChanged().catch {\n                it.handleException()\n            }.onEach {\n                it.filterUser()\n                it.updateNearbyCyclists()\n                Timber.v(\"Receiving from getNearbyCyclist\")\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }.launchIn(this)\n\n        }\n\n    }\n\n\n    private fun acceptRescueRequest(id: String) {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            val rescuer = state.value.nearbyCyclist?.findUser(id) ?: return@launch\n            _state.update { it.copy(rescueRequestAcceptedUser = rescuer) }\n            val transactionId = trackingHandler.getTransactionId(rescuer)\n            val user = state.value.user\n\n            trackingHandler.checkCurrentTransactions(user = user, rescuer = rescuer) {\n\n                coroutineScope {\n                    runCatching {\n                        isLoading(true)\n                        trackingHandler.getAcceptedRescueRequestItem(\n                            transactionId = transactionId,\n                            rescuer = rescuer\n                        ).apply {\n                            mappingUseCase.acceptRescueRequestUseCase(rescueTransaction = this)\n                        }\n\n                    }.onSuccess { rescueTransaction ->\n                        broadcastRescueTransaction()\n                        assignRequestTransaction(\n                            rescueTransaction = rescueTransaction,\n                            user = user,\n                            rescuer = rescuer,\n                            transactionId = transactionId\n                        )\n                        user.location?.let { broadcastRescueTransactionToRespondent(it) }\n                    }.onFailure { exception ->\n                        isLoading(false)\n                        exception.handleException()\n                    }\n                }\n\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n\n            }\n        }\n    }\n\n    private fun cancelHelpRequest() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                isLoading(true)\n                cancelUserHelpRequest()\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelHelpRequestSuccess)\n                broadcastToNearbyCyclists()\n                _state.update { it.copy(rescueRequestAcceptedUser = null) }\n            }.onFailure { exception ->\n                Timber.e(\"Failed to cancel search assistance: ${exception.message}\")\n                exception.handleException()\n            }\n            isLoading(false)\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n        }\n    }\n\n\n    private fun removeAssignedTransaction() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                removeUserTransaction(id = getId())\n            }.onSuccess {\n                broadcastToNearbyCyclists()\n                broadcastRescueTransaction()\n                isLoading(false)\n                _eventFlow.emit(value = MappingEvent.RemoveAssignedTransactionSuccess)\n                trackingHandler.clearTransactionRoles()\n            }.onFailure { exception ->\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n\n    }\n\n    private fun selectRescueeMapIcon(id: String) {\n        viewModelScope.launch(context = defaultDispatcher) {\n\n            val userLocation = state.value.user.location ?: state.value.userLocation\n\n            if (!userLocation.isLocationAvailable()) {\n                viewModelScope.launch(context = defaultDispatcher) {\n                    _eventFlow.emit(value = MappingEvent.LocationNotAvailable(\"Tracking your Location\"))\n                }\n                return@launch\n            }\n\n            calculateSelectedRescueeDistance(userLocation, id)\n\n        }\n    }\n\n    private fun respondToHelp(selectedRescuee: MapSelectedRescuee) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                uploadUserProfile(onSuccess = {\n                    viewModelScope.launch(context = defaultDispatcher) {\n                        mappingUseCase.addRescueRespondentUseCase(\n                            userId = selectedRescuee.userId,\n                            respondentId = getId()\n                        )\n                    }\n                })\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.RespondToHelpSuccess())\n                broadcastToNearbyCyclists()\n                broadcastRescueTransaction()\n                _state.update { it.copy(respondedToHelp = true) }\n            }.onFailure {\n                it.handleException()\n            }\n\n        }\n    }\n\n    private fun showRouteDirection(origin: Point, destination: Point) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                mappingUseCase.getRouteDirectionsUseCase(origin = origin, destination = destination)\n            }.onSuccess { routeDirection ->\n                _eventFlow.emit(value = MappingEvent.GenerateRouteNavigationSuccess(routeDirection))\n            }.onFailure {\n                it.handleException()\n            }\n        }\n    }\n\n\n    private suspend fun broadcastRescueTransaction() {\n        runCatching {\n            mappingUseCase.broadcastRescueTransactionUseCase()\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n    private suspend fun broadcastToNearbyCyclists() {\n        val location = state.value.userLocation ?: return\n        runCatching {\n            mappingUseCase.nearbyCyclistsUseCase(\n                locationModel = LiveLocationSocketModel(\n                    latitude = location.latitude,\n                    longitude = location.longitude\n                )\n            )\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n    private fun refreshToken() {\n        viewModelScope.launch(SupervisorJob()) {\n            runCatching {\n                isLoading(true)\n                messagingUseCase.refreshTokenUseCase()\n            }.onSuccess {\n                Timber.v(\"Successfully refreshed token\")\n            }.onFailure {\n                Timber.e(\"Failed to refresh token ${it.message}\")\n            }.also {\n                isLoading(false)\n            }\n        }\n    }\n\n    private fun declineRescueRequest(id: String) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                isLoading(true)\n                mappingUseCase.deleteRescueRespondentUseCase(userId = getId(), respondentId = id)\n            }.onSuccess {\n                removeRescueRespondent(id)\n                broadcastToNearbyCyclists()\n            }.onFailure {\n                it.handleDeclineRescueRequest()\n            }\n            isLoading(false)\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n\n        }\n    }\n\n    private suspend fun removeRescueRespondent(id: String) {\n        state.value.newRescueRequest?.request?.toMutableList()?.apply {\n            val respondentRemoved = removeAll { it.id == id }\n            if (!respondentRemoved) {\n                _eventFlow.emit(value = MappingEvent.RemoveRespondentFailed())\n                return@apply\n            }\n            _state.update {\n                it.copy(\n                    newRescueRequest = NewRescueRequestsModel(this)\n                )\n            }\n        }\n    }\n\n\n    private fun requestHelp() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                uploadUserProfile(onSuccess = {\n                    viewModelScope.launch(context = defaultDispatcher) {\n                        _eventFlow.emit(MappingEvent.RequestHelpSuccess)\n                    }\n                })\n            }.onFailure {\n                it.handleException()\n            }\n        }.invokeOnCompletion {\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n        }\n    }\n\n    fun onEvent(event: MappingVmEvent) {\n        when (event) {\n\n            is MappingVmEvent.SubscribeToDataChanges -> {\n                observeDataChanges()\n            }\n\n\n            is MappingVmEvent.GetRouteDirections -> {\n                showRouteDirection(origin = event.origin, destination = event.destination)\n            }\n\n            is MappingVmEvent.RespondToHelp -> {\n                respondToHelp(event.selectedRescuee)\n            }\n\n            is MappingVmEvent.SelectRescueMapIcon -> {\n                selectRescueeMapIcon(event.id)\n            }\n\n            is MappingVmEvent.RequestHelp -> {\n                requestHelp()\n            }\n\n            is MappingVmEvent.CancelRescueTransaction -> {\n                removeAssignedTransaction()\n                clearTravelledPath()\n            }\n\n\n            is MappingVmEvent.LoadData -> {\n                loadData()\n            }\n\n\n            is MappingVmEvent.DeclineRescueRequest -> {\n                declineRescueRequest(event.id)\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.AcceptRescueRequest -> {\n                acceptRescueRequest(event.id)\n            }\n\n            is MappingVmEvent.CancelSearchingAssistance -> {\n                cancelHelpRequest()\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.ReportIncident -> {\n                calculateIncidentDistance(\n                    latLng = event.latLng,\n                    label = event.label,\n                    incidentDescription = event.description)\n            }\n\n            is MappingVmEvent.SetMapType -> {\n                setMapType(mapType = event.mapType)\n            }\n\n            is MappingVmEvent.SelectHazardousLaneMarker -> {\n                selectHazardousLaneMarker(id = event.id)\n            }\n\n            is MappingVmEvent.DeleteHazardousLaneMarker -> {\n                deleteHazardousLaneMarker(id = event.id)\n            }\n\n            is MappingVmEvent.UpdateReportedIncident -> {\n                updateReportedIncident(marker = event.marker)\n            }\n\n            is MappingVmEvent.ShouldShowHazardousStartingInfo ->\n                setShouldShowHazardousStartingInfo(event.shouldShow)\n\n            is MappingVmEvent.NotifyNewRescueRequest -> {\n                mappingUseCase.newRescueRequestNotificationUseCase(\n                    message = event.message\n                )\n            }\n            is MappingVmEvent.NotifyRequestAccepted -> {\n                mappingUseCase.requestAcceptedNotificationUseCase(\n                    message = event.message\n                )\n            }\n\n            is MappingVmEvent.CancelRespondHelp -> cancelRespondToHelp(respondentId = event.id)\n            MappingVmEvent.RescuerArrived -> rescuerArrived()\n\n        }\n        savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n    }\n\n\n    private fun rescuerArrived(){\n        viewModelScope.launch {\n            rescueRecordUseCase.rescueDetailsUseCase(details = trackingHandler.getRideDetails())\n        }\n    }\n\n    private fun cancelRespondToHelp(respondentId: String){\n        viewModelScope.launch {\n            runCatching {\n                isLoading(true)\n                mappingUseCase.cancelHelpRespondUseCase(userId = getId(), respondentId = respondentId)\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelRespondSuccess)\n                broadcastToNearbyCyclists()\n            }.onFailure {\n                it.handleException()\n            }.also {\n                isLoading(false)\n            }\n        }\n    }\n\n\n    private fun updateReportedIncident(marker: HazardousLaneMarker) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.updateHazardousLaneUseCase(\n                    hazardousLaneMarker = marker\n                )\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.UpdateIncidentSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.UpdateIncidentFailed(\n                        it.message ?: \"Failed to update incident\"))\n            }\n        }\n    }\n\n\n    private fun deleteHazardousLaneMarker(id: String) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.deleteHazardousLaneUseCase(id)\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.DeleteHazardousLaneMarkerSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.DeleteHazardousLaneMarkerFailed(\n                        it.message ?: \"Failed to delete incident marker\"))\n            }\n        }\n    }\n\n    private fun selectHazardousLaneMarker(id: String) {\n        viewModelScope.launch {\n            hazardousLaneMarkers.find { it.id == id }?.let { marker ->\n                _eventFlow.emit(value = MappingEvent.SelectHazardousLaneMarker(marker))\n            }\n        }\n    }\n\n\n    private fun calculateIncidentDistance(\n        latLng: LatLng,\n        label: String,\n        incidentDescription: String) {\n\n        viewModelScope.launch {\n            val userLocation = state.value.getCurrentLocation()\n\n            if (userLocation == null) {\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@launch\n            }\n\n            val distance = mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = userLocation,\n                destinationLocation = LocationModel(\n                    latitude = latLng.latitude,\n                    longitude = latLng.longitude\n                )\n            )\n\n            if (distance > DEFAULT_RADIUS) {\n                _eventFlow.emit(MappingEvent.IncidentDistanceTooFar)\n                return@launch\n            }\n\n            reportIncident(\n                label = label,\n                latLng = latLng,\n                incidentDescription = incidentDescription)\n\n\n        }\n\n    }\n\n    private fun setMapType(mapType: String) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.mapTypeUseCase(mapType = mapType)\n            }.onSuccess {\n                Timber.v(\"Success setting map type: $it\")\n            }.onFailure {\n                Timber.e(\"Error setting map type: ${it.message}\")\n            }\n        }\n    }\n\n    private suspend fun reportIncident(\n        label: String,\n        latLng: LatLng,\n        incidentDescription: String) {\n\n\n        coroutineScope {\n            runCatching {\n                mappingUseCase.newHazardousLaneUseCase(\n                    hazardousLaneMarker = HazardousLaneMarker(\n                        id = getId() + System.currentTimeMillis(),\n                        idCreator = getId(),\n                        latitude = latLng.latitude,\n                        longitude = latLng.longitude,\n                        label = label,\n                        description = incidentDescription,\n\n                        ))\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.ReportIncidentSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.ReportIncidentFailed(\n                        reason = it.message ?: \"Failed to report incident\"))\n            }\n        }\n    }\n\n    private suspend fun calculateSelectedRescueeDistance(userLocation: LocationModel?, id: String) {\n        val selectedRescuee = state.value.nearbyCyclist?.findUser(id) ?: return\n        val selectedRescueeLocation = selectedRescuee.location\n\n\n        runCatching {\n            isLoading(true)\n            mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = LocationModel(\n                    latitude = userLocation?.latitude,\n                    longitude = userLocation?.longitude\n                ), destinationLocation = LocationModel(\n                    latitude = selectedRescueeLocation!!.latitude,\n                    longitude = selectedRescueeLocation.longitude\n                )\n            )\n        }.onSuccess { distance ->\n            val timeRemaining = FormatterUtils.getCalculatedETA(distance)\n            trackingHandler.showSelectedRescuee(\n                selectedRescuee = selectedRescuee,\n                distance = distance,\n                timeRemaining = timeRemaining)\n        }.onFailure {\n            _eventFlow.emit(value = MappingEvent.FailedToCalculateDistance)\n        }.also {\n            isLoading(false)\n        }\n    }\n\n\n    private suspend fun removeUserTransaction(id: String) {\n        mappingUseCase.createUserUseCase(\n            user = UserItem.removeUserTransaction(id)\n        )\n    }\n\n\n    private fun subscribeToTransactionLocationUpdates() {\n        if (getTransactionLocationUpdatesJob?.isActive == true) {\n            return\n        }\n        getTransactionLocationUpdatesJob =\n            viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n                mappingUseCase.transactionLocationUseCase().distinctUntilChanged().catch {\n                    Timber.e(\"ERROR GETTING TRANSACTION LOCATION: ${it.message}\")\n                }.onEach { liveLocation ->\n                    trackingHandler.updateTransactionLocation(location = liveLocation)\n                    liveLocation.updateTransactionETA()\n                    liveLocation.updateTransactionDistance()\n                }.launchIn(this@launch)\n\n            }\n    }\n\n    private suspend fun LiveLocationSocketModel.updateTransactionDistance() {\n        coroutineScope {\n            val rescueTransaction = state.value.userLocation\n            latitude ?: return@coroutineScope\n            longitude ?: return@coroutineScope\n\n            rescueTransaction?.let { transaction ->\n\n                val distance = mappingUseCase.getCalculatedDistanceUseCase(\n                    startingLocation = LocationModel(latitude, longitude),\n                    destinationLocation = LocationModel(transaction.latitude, transaction.longitude)\n                ).toInt()\n\n\n                if (distance <= NEAREST_METERS) {\n                    _eventFlow.emit(value = MappingEvent.DestinationReached)\n                    removeAssignedTransaction()\n                    clearTravelledPath()\n                }\n\n            }\n        }\n    }\n\n\n    private fun LiveLocationSocketModel.updateTransactionETA() {\n        val userLocation = state.value.userLocation\n        userLocation ?: return\n        this.latitude ?: return\n        this.longitude ?: return\n\n        val eta = getETABetweenTwoPoints(\n            startingLocation = LocationModel(\n                latitude = this.latitude,\n                longitude = this.longitude\n            ), endLocation = userLocation\n        )\n\n        val distance = mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = LocationModel(\n                latitude = this.latitude,\n                longitude = this.longitude\n            ),\n            destinationLocation = userLocation)\n        _state.update { it.copy(rescueETA = eta, rescueDistance = distance.formatToDistanceKm()) }\n    }\n\n    private fun getETABetweenTwoPoints(\n        startingLocation: LocationModel,\n        endLocation: LocationModel\n    ): String {\n        val distance = mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = startingLocation,\n            destinationLocation = endLocation\n        )\n\n        return FormatterUtils.getCalculatedETA(distanceMeters = distance)\n    }\n\n\n    private suspend fun assignRequestTransaction(\n        rescueTransaction: RescueTransactionItem,\n        user: UserItem,\n        rescuer: UserItem,\n        transactionId: String\n    ) {\n\n        runCatching {\n\n            transactionId.assignRequestTransaction(\n                role = Role.RESCUEE.name.lowercase(),\n                id = user.id\n            )\n\n            transactionId.assignRequestTransaction(\n                role = Role.RESCUER.name.lowercase(),\n                id = rescuer.id\n            )\n\n        }.onSuccess {\n            broadcastToNearbyCyclists()\n            _eventFlow.emit(value = MappingEvent.AcceptRescueRequestSuccess)\n            delay(500)\n            updateTransactionETA(rescuer, rescueTransaction)\n            isLoading(false)\n            broadcastRescueTransaction()\n        }.onFailure { exception ->\n            isLoading(false)\n            exception.handleException()\n        }\n\n    }\n\n    private fun updateTransactionETA(rescuer: UserItem, rescueTransaction: RescueTransactionItem) {\n        val userLocation = state.value.userLocation ?: return\n\n        val estimatedTimeArrival = rescuer.location?.let {\n            getETABetweenTwoPoints(\n                startingLocation = it,\n                endLocation = userLocation\n            )\n        }\n\n        val distance = rescuer.location?.let { mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = it,\n            destinationLocation = userLocation)\n        }\n        _state.update {\n            it.copy(\n                rescueTransaction = rescueTransaction,\n                rescueETA = estimatedTimeArrival ?: \"\",\n                rescueDistance = distance?.formatToDistanceKm() ?: \"\",\n                rescuer = rescuer\n            )\n        }\n    }\n\n    private fun isLoading(loading: Boolean) {\n        _state.update { it.copy(isLoading = loading) }\n    }\n\n\n    private suspend fun String.assignRequestTransaction(role: String, id: String?) {\n        mappingUseCase.createUserUseCase(\n            user = UserItem.empty(id = id, transactionId = this, role = role)\n        )\n    }\n\n\n    private suspend fun Throwable.handleDeclineRescueRequest() {\n        when (this) {\n            is MappingExceptions.NetworkException -> {\n                _eventFlow.emit(value = MappingEvent.NoInternetConnection)\n            }\n\n            else -> {\n                Timber.d(\"Failed to update user\")\n            }\n        }\n    }\n\n\n    private suspend fun cancelUserHelpRequest() {\n\n        mappingUseCase.createUserUseCase(\n            user = UserItem.cancelUserHelpRequest(id = getId()))\n    }\n\n\n    private suspend fun NearbyCyclist.filterUser() {\n\n        runCatching {\n            getId()\n        }.onSuccess { id ->\n            findUser(id = id)?.let { user ->\n                val respondents = user.getUserRescueRespondents(this).distinctBy { it.id }\n                _state.update {\n                    it.copy(\n                        newRescueRequest = NewRescueRequestsModel(request = respondents),\n                        user = user)\n                }\n                user.getTransactionId()?.let { loadRescueTransaction(transactionId = it) }\n            }\n\n        }.onFailure {\n            Timber.e(\"Failed to get user: ${it.message}\")\n        }\n\n    }\n\n\n\n    private fun UserItem.getUserRescueRespondents(nearbyCyclist: NearbyCyclist): List<RescueRequestItemModel> {\n        val rescueRespondentsSnapShot: MutableList<RescueRequestItemModel> = mutableListOf()\n\n        rescueRequest?.respondents?.forEach { respondent ->\n            val userRespondent = nearbyCyclist.findUser(id = respondent.clientId) ?: UserItem()\n            val distance =\n                calculateDistance(startLocation = location, endLocation = userRespondent.location)\n\n            distance?.let {\n                val formattedETA = FormatterUtils.getCalculatedETA(distanceMeters = it)\n                rescueRespondentsSnapShot.add(\n                    element = userRespondent.toRescueRequest(\n                        distance = it.formatToDistanceKm(),\n                        eta = formattedETA,\n                        timestamp = respondent.timeStamp\n                    )\n                )\n            }\n        }\n\n        return rescueRespondentsSnapShot.distinct()\n    }\n\n    private fun calculateDistance(\n        startLocation: LocationModel?,\n        endLocation: LocationModel?): Double? {\n        val startLatitude = startLocation?.latitude ?: return null\n        val startLongitude = startLocation.longitude ?: return null\n        val endLatitude = endLocation?.latitude ?: return null\n        val endLongitude = endLocation.longitude ?: return null\n\n        return mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = LocationModel(latitude = startLatitude, longitude = startLongitude),\n            destinationLocation = LocationModel(latitude = endLatitude, longitude = endLongitude)\n        )\n    }\n\n    private fun NearbyCyclist.updateNearbyCyclists() {\n\n        _state.update {\n            it.copy(nearbyCyclist = NearbyCyclist())\n        }\n        _state.update {\n            it.copy(nearbyCyclist = this)\n        }\n    }\n\n    private suspend fun broadcastRescueTransactionToRespondent(location: LocationModel) {\n        val rescueTransaction = state.value.rescueTransaction ?: return\n        runCatching {\n\n            val user = state.value.user\n            mappingUseCase.transactionLocationUseCase(\n                LiveLocationSocketModel(\n                    latitude = location.latitude,\n                    longitude = location.longitude,\n                    room = rescueTransaction.id\n                ),\n                user = user,\n                rescueTransactionItem = rescueTransaction\n            )\n\n        }.onSuccess {\n            Timber.v(\"Broadcasting location to transaction success\")\n        }.onFailure {\n            Timber.v(\"Broadcasting location to transaction failed: ${it.message}\")\n        }\n    }\n\n\n    private fun unSubscribeToTransactionLocationUpdates() {\n        getTransactionLocationUpdatesJob?.cancel()\n    }\n\n    private fun removeHazardousLaneListener() {\n        mappingUseCase.removeHazardousListenerUseCase()\n    }\n\n\n    private fun subscribeToRescueTransactionUpdates() {\n        if (getRescueTransactionUpdatesJob?.isActive == true) {\n            return\n        }\n        getRescueTransactionUpdatesJob =\n            viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n                mappingUseCase.getRescueTransactionUpdatesUseCase().catch {\n                    Timber.e(\"ERROR GETTING RESCUE TRANSACTION: ${it.message}\")\n\n                }.onEach { rescueTransactions ->\n                    rescueTransactions.updateCurrentRescueTransaction()\n\n                    trackingHandler.checkRescueRequestAccepted(\n                        rescueTransaction = rescueTransactions,\n                        id = getId()\n                    )\n\n                    trackingHandler.updateClient()\n                }.launchIn(this@launch).invokeOnCompletion {\n                    savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n                }\n\n            }\n    }\n\n\n    private fun RescueTransaction.updateCurrentRescueTransaction() {\n        val rescueTransaction = trackingHandler.filterUserRescueTransaction(this)\n        _state.update { it.copy(rescueTransaction = rescueTransaction) }\n    }\n\n\n    private fun unSubscribeToRescueTransactionUpdates() {\n        getRescueTransactionUpdatesJob?.cancel()\n    }\n\n    private fun unSubscribeToNearbyUsersChanges() {\n        getUsersUpdatesJob?.cancel()\n    }\n\n    private fun subscribeToLocationUpdates() {\n        if (locationUpdatesJob?.isActive == true) {\n            return\n        }\n        locationUpdatesJob = viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.getUserLocationUseCase().catch {\n                Timber.e(\"Error Location Updates: ${it.message}\")\n            }.onEach { location ->\n                trackingHandler.updateLocation(location)\n                broadcastRescueTransactionToRespondent(location)\n                updateSpeedometer(location)\n                broadcastToNearbyCyclists()\n\n            }.launchIn(this@launch).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun updateSpeedometer(location: LocationModel) {\n        val isUserRescuer = state.value.user.isRescuer()\n        if (isUserRescuer) {\n            trackingHandler.setSpeed(location.speed)\n            trackingHandler.getTopSpeed(location.speed)\n            travelledPath.add(element = GoogleLatLng(location.latitude!!, location.longitude!!))\n            val distance = SphericalUtil.computeLength(travelledPath).formatToDistanceKm()\n            trackingHandler.setTravelledDistance(distance)\n        }\n    }\n\n\n    private fun subscribeToNearbyUsersChanges() {\n        if (getUsersUpdatesJob?.isActive == true) {\n            return\n        }\n\n        getUsersUpdatesJob = viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.nearbyCyclistsUseCase().catch {\n                Timber.e(\"ERROR GETTING USERS: ${it.message}\")\n            }.onEach {\n                it.filterUser()\n                it.updateNearbyCyclists()\n                Timber.v(\"Receiving from subscribeToNearbyUsersChanges\")\n                trackingHandler.updateClient()\n            }.launchIn(this).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun unSubscribeToLocationUpdates() {\n        locationUpdatesJob?.cancel()\n    }\n\n\n    private suspend inline fun uploadUserProfile(crossinline onSuccess: () -> Unit) {\n        coroutineScope {\n            val userLocation = state.value.userLocation\n\n            if (userLocation == null) {\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@coroutineScope\n            }\n\n            uploadProfile(location = userLocation, onSuccess = onSuccess)\n\n        }\n    }\n\n\n    private suspend inline fun uploadProfile(\n        location: LocationModel,\n        crossinline onSuccess: () -> Unit\n    ) {\n\n        val isProfileUploaded = state.value.profileUploaded\n\n        if (isProfileUploaded) {\n            onSuccess()\n            return\n        }\n\n        val fullAddress = mappingUseCase.getFullAddressUseCase(\n            latitude = location.latitude,\n            longitude = location.longitude\n        )\n\n        coroutineScope {\n\n            runCatching {\n                isLoading(true)\n                fullAddress?.let { mappingUseCase.addressUseCase(it) }\n                mappingUseCase.createUserUseCase(\n                    user = UserItem(\n                        id = getId(),\n                        name = getName(),\n                        address = fullAddress,\n                        profilePictureUrl = getPhotoUrl(),\n                        location = LocationModel(\n                            latitude = location.latitude,\n                            longitude = location.longitude\n                        ),\n                        rescueRequest = RescueRequest(),\n                        userAssistance = UserAssistanceModel(),\n                        rescuePending = RescuePending()\n                    )\n                )\n\n\n            }.onSuccess {\n                isLoading(false)\n                broadcastToNearbyCyclists()\n                onSuccess()\n                _state.update { it.copy(profileUploaded = true) }\n\n            }.onFailure { exception ->\n                Timber.e(\"Error uploading profile: ${exception.message}\")\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n\n    private suspend fun Throwable.handleException() {\n        trackingHandler.handleException(this)\n        savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n    }\n\n\n    private suspend fun createMockUpUsers() {\n        runCatching {\n            mappingUseCase.createMockUsers()\n        }.onSuccess {\n            Timber.v(\"CREATED MOCK USERS!\")\n            broadcastToNearbyCyclists()\n        }.onFailure {\n            Timber.e(\"FAILED TO CREATE MOCK USERS: ${it.message}\")\n        }\n    }\n\n    private fun removeBottomSheet() {\n        viewModelScope.launch(SupervisorJob()) {\n            mappingUseCase.bottomSheetTypeUseCase(bottomSheet = \"\")\n        }\n    }\n\n\n    override fun onCleared() {\n        super.onCleared()\n        removeBottomSheet()\n        unSubscribeToLocationUpdates()\n        unSubscribeToNearbyUsersChanges()\n        unSubscribeToRescueTransactionUpdates()\n        unSubscribeToTransactionLocationUpdates()\n        removeHazardousLaneListener()\n\n\n    }\n\n\n    private fun getId(): String = authUseCase.getIdUseCase()\n\n    private suspend fun getName(): String = userProfileUseCase.getNameUseCase()\n\n    private suspend fun getPhotoUrl() = userProfileUseCase.getPhotoUrlUseCase()\n\n    private fun clearTravelledPath() {\n        travelledPath = mutableListOf()\n    }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt	(date 1697267445874)
@@ -1048,7 +1048,9 @@
                 trackingHandler.updateLocation(location)
                 broadcastRescueTransactionToRespondent(location)
                 updateSpeedometer(location)
-                broadcastToNearbyCyclists()
+                if(state.value.nearbyCyclist == null){
+                    broadcastToNearbyCyclists()
+                }
 
             }.launchIn(this@launch).invokeOnCompletion {
                 savedStateHandle[MAPPING_VM_STATE_KEY] = state.value
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <runningDeviceTargetSelectedWithDropDown>\n      <Target>\n        <type value=\"RUNNING_DEVICE_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"SERIAL_NUMBER\" />\n            <value value=\"194a89050404\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </runningDeviceTargetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2023-10-14T05:17:48.874825266Z\" />\n    <runningDeviceTargetsSelectedWithDialog>\n      <Target>\n        <type value=\"RUNNING_DEVICE_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </runningDeviceTargetsSelectedWithDialog>\n    <targetsSelectedWithDialog>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetsSelectedWithDialog>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1697269214191)
@@ -6,20 +6,20 @@
         <type value="RUNNING_DEVICE_TARGET" />
         <deviceKey>
           <Key>
-            <type value="SERIAL_NUMBER" />
-            <value value="194a89050404" />
+            <type value="VIRTUAL_DEVICE_PATH" />
+            <value value="$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd" />
           </Key>
         </deviceKey>
       </Target>
     </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-10-14T05:17:48.874825266Z" />
+    <timeTargetWasSelectedWithDropDown value="2023-10-14T07:38:43.769059277Z" />
     <runningDeviceTargetsSelectedWithDialog>
       <Target>
         <type value="RUNNING_DEVICE_TARGET" />
         <deviceKey>
           <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$PROJECT_DIR$/../../.android/avd/Pixel_5_API_27.avd" />
+            <type value="SERIAL_NUMBER" />
+            <value value="194a89050404" />
           </Key>
         </deviceKey>
       </Target>
Index: Cyclistance_Emulator_Suite_Data/auth_export/accounts.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"kind\":\"identitytoolkit#DownloadAccountResponse\",\"users\":[{\"localId\":\"SQJ1rM3GZPfs3uYtli31tZDOBTQR\",\"displayName\":\"Johndominic Jasmin\",\"photoUrl\":\"https://lh3.googleusercontent.com/a/ACg8ocKSmNWdL8c96IQyYIiYRGAqrYIzM7MIRh6e5euoZHGg=s96-c\",\"email\":\"johndominicjasmin24@gmail.com\",\"emailVerified\":true,\"lastLoginAt\":\"1696856291674\",\"providerUserInfo\":[{\"providerId\":\"google.com\",\"rawId\":\"108059492259568767112\",\"federatedId\":\"108059492259568767112\",\"displayName\":\"Johndominic Jasmin\",\"photoUrl\":\"https://lh3.googleusercontent.com/a/ACg8ocKSmNWdL8c96IQyYIiYRGAqrYIzM7MIRh6e5euoZHGg=s96-c\",\"email\":\"johndominicjasmin24@gmail.com\"}],\"lastRefreshAt\":\"2023-10-09T16:55:17.802Z\"},{\"localId\":\"qNUs0vsFZlUSqq0XtIlbh7V1o8RF\",\"displayName\":\"Joe Doe\",\"photoUrl\":\"https://lh3.googleusercontent.com/a/ACg8ocLqR0xDnqDLkeryUtoxRX15gQOsaHkZFpsiHp4KglgzSw=s96-c\",\"email\":\"mikocabal27@gmail.com\",\"emailVerified\":true,\"lastLoginAt\":\"1696856290404\",\"providerUserInfo\":[{\"providerId\":\"google.com\",\"rawId\":\"101289874934350966368\",\"federatedId\":\"101289874934350966368\",\"displayName\":\"Joe Doe\",\"photoUrl\":\"https://lh3.googleusercontent.com/a/ACg8ocLqR0xDnqDLkeryUtoxRX15gQOsaHkZFpsiHp4KglgzSw=s96-c\",\"email\":\"mikocabal27@gmail.com\"}],\"lastRefreshAt\":\"2023-10-09T16:44:37.935Z\"}]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cyclistance_Emulator_Suite_Data/auth_export/accounts.json b/Cyclistance_Emulator_Suite_Data/auth_export/accounts.json
--- a/Cyclistance_Emulator_Suite_Data/auth_export/accounts.json	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ b/Cyclistance_Emulator_Suite_Data/auth_export/accounts.json	(date 1697268715034)
@@ -1,1 +1,1 @@
-{"kind":"identitytoolkit#DownloadAccountResponse","users":[{"localId":"SQJ1rM3GZPfs3uYtli31tZDOBTQR","displayName":"Johndominic Jasmin","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocKSmNWdL8c96IQyYIiYRGAqrYIzM7MIRh6e5euoZHGg=s96-c","email":"johndominicjasmin24@gmail.com","emailVerified":true,"lastLoginAt":"1696856291674","providerUserInfo":[{"providerId":"google.com","rawId":"108059492259568767112","federatedId":"108059492259568767112","displayName":"Johndominic Jasmin","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocKSmNWdL8c96IQyYIiYRGAqrYIzM7MIRh6e5euoZHGg=s96-c","email":"johndominicjasmin24@gmail.com"}],"lastRefreshAt":"2023-10-09T16:55:17.802Z"},{"localId":"qNUs0vsFZlUSqq0XtIlbh7V1o8RF","displayName":"Joe Doe","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLqR0xDnqDLkeryUtoxRX15gQOsaHkZFpsiHp4KglgzSw=s96-c","email":"mikocabal27@gmail.com","emailVerified":true,"lastLoginAt":"1696856290404","providerUserInfo":[{"providerId":"google.com","rawId":"101289874934350966368","federatedId":"101289874934350966368","displayName":"Joe Doe","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLqR0xDnqDLkeryUtoxRX15gQOsaHkZFpsiHp4KglgzSw=s96-c","email":"mikocabal27@gmail.com"}],"lastRefreshAt":"2023-10-09T16:44:37.935Z"}]}
\ No newline at end of file
+{"kind":"identitytoolkit#DownloadAccountResponse","users":[{"localId":"NsmvB9pAdo9ubs57AZhNZic9Aici","createdAt":"1697268679106","lastLoginAt":"1697264100451","displayName":"JOHN DOMINIC JASMIN","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocJIoPfvls6WjVDqvWp_ch-ujsW7QTpkc4iHnHUXTjYO5eo=s96-c","providerUserInfo":[{"providerId":"google.com","rawId":"105195142023165579885","federatedId":"105195142023165579885","displayName":"JOHN DOMINIC JASMIN","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocJIoPfvls6WjVDqvWp_ch-ujsW7QTpkc4iHnHUXTjYO5eo=s96-c","email":"20-60951@g.batstate-u.edu.ph"}],"validSince":"1697268679","email":"20-60951@g.batstate-u.edu.ph","emailVerified":true,"disabled":false},{"localId":"VdRvyPSQ3ezQQXYkP6oRyjvqbsYT","createdAt":"1697268679106","lastLoginAt":"1697264095851","displayName":"Joe Doe","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLqR0xDnqDLkeryUtoxRX15gQOsaHkZFpsiHp4KglgzSw=s96-c","providerUserInfo":[{"providerId":"google.com","rawId":"101289874934350966368","federatedId":"101289874934350966368","displayName":"Joe Doe","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLqR0xDnqDLkeryUtoxRX15gQOsaHkZFpsiHp4KglgzSw=s96-c","email":"mikocabal27@gmail.com"}],"validSince":"1697268679","email":"mikocabal27@gmail.com","emailVerified":true,"disabled":false}]}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MapType\nimport com.example.cyclistance.feature_messaging.domain.model.ui.chats.MessagingUserItemModel\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@StableState\ndata class MappingState(\n    val isLoading: Boolean = false,\n    val userLocation: LocationModel? = null,\n    val rescueTransaction: RescueTransactionItem? = null,\n    val user: UserItem = UserItem(),\n    val rescueRequestAcceptedUser: UserItem? = null,\n    val rescuer: UserItem? = null,\n    val rescuee: UserItem? = null,\n    val profileUploaded: Boolean = false,\n    val respondedToHelp: Boolean = false,\n    val transactionLocation: LocationModel? = null,\n    val rescueETA: String = \"\",\n    val rescueDistance: String = \"\",\n    val newRescueRequest: NewRescueRequestsModel? = null,\n    val speedometerState: SpeedometerState = SpeedometerState(),\n    val nearbyCyclist: NearbyCyclist? = null,\n    val mapType: String = MapType.Default.type,\n    val userId: String = \"\",\n    val shouldShowHazardousStartingInfo: Boolean = false,\n    val lastRequestNotifiedId: String = \"\",\n    val userReceiverMessage: MessagingUserItemModel? = null,\n    val userSenderMessage: MessagingUserItemModel? = null,\n) : Parcelable{\n\n\n    fun getTransactionId() = user.getTransactionId() ?: rescueTransaction?.id ?: \"\"\n    fun getTopSpeed() = speedometerState.topSpeed\n\n    fun getCurrentLocation() = user.location ?: userLocation\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(date 1697265615487)
@@ -8,7 +8,6 @@
 import com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem
 import com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel
 import com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MapType
-import com.example.cyclistance.feature_messaging.domain.model.ui.chats.MessagingUserItemModel
 import kotlinx.parcelize.Parcelize
 
 @Parcelize
@@ -33,8 +32,6 @@
     val userId: String = "",
     val shouldShowHazardousStartingInfo: Boolean = false,
     val lastRequestNotifiedId: String = "",
-    val userReceiverMessage: MessagingUserItemModel? = null,
-    val userSenderMessage: MessagingUserItemModel? = null,
 ) : Parcelable{
 
 
Index: firestore-debug.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Oct 11, 2023 2:53:58 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://0.0.0.0:46261\nAPI endpoint: http://0.0.0.0:9299\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=0.0.0.0:9299\n\nDev App Server is now running.\n\nOct 11, 2023 2:55:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 2:55:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 2:56:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 2:56:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 2:59:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 2:59:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:02:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:05:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:05:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:06:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:07:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:07:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:07:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:11:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:11:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:14:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:14:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:22:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:22:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:23:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:24:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:26:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:27:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:34:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:35:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:37:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:37:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:39:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:41:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:41:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:43:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:43:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:46:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 3:46:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:46:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:46:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:48:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:48:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:51:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:51:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:55:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:57:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:57:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 5:59:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:06:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:06:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:07:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:07:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:10:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:11:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:14:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:14:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:15:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:18:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:20:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:20:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:21:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:21:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:22:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:22:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:24:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:24:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:28:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:28:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:28:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:30:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:33:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:36:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:36:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:37:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:38:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:39:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:40:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:42:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:42:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:44:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:44:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:45:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:45:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:46:04 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 11, 2023 6:48:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:48:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:51:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:51:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:59:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 6:59:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:09:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:09:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:10:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:11:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:13:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:14:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:20:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:20:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:22:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:25:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:32:32 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 11, 2023 7:46:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:46:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:47:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:47:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:50:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:50:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:51:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:51:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:51:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:51:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:53:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:53:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:57:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:57:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:58:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 7:58:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:01:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:02:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:02:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:03:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:03:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:04:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:04:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:05:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:07:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:07:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:08:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:09:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:12:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:14:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:15:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:17:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:18:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:19:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:22:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:26:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:29:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:37:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 8:40:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:14:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:16:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:17:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:18:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:19:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:20:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:36:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:36:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:38:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:40:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:42:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:43:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:46:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:47:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:48:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:52:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:54:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:55:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 9:58:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:03:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:04:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:05:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:06:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:07:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:08:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:09:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:11:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:13:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:16:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:18:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:19:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:20:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:21:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:22:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:26:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:26:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:27:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:28:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:34:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:36:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:39:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:39:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:40:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:43:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 10:51:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:01:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:03:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:06:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:11:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:14:20 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 11, 2023 11:16:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:18:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:19:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:21:48 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 11, 2023 11:44:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 11, 2023 11:52:19 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 12, 2023 1:13:00 AM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 12, 2023 1:20:01 AM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 12, 2023 8:18:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:18:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:18:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:19:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:20:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:22:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:22:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:23:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:23:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:30:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:33:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:33:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:33:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:35:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:36:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:38:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:39:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:40:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:40:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:42:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:43:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:43:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:45:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:47:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:49:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:49:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:50:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:50:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:52:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:52:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:55:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:56:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:58:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 8:59:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:06:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:07:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:08:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:08:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:09:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:09:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:13:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:13:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:15:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:17:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:18:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:24:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:25:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:25:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:25:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 9:28:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:02:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:03:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:03:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:04:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:04:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:07:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:08:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:08:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:10:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:12:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:13:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:13:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:15:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:15:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:18:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:18:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:22:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:26:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nOct 12, 2023 10:26:32 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\nOct 12, 2023 10:26:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:28:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:29:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:32:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:32:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:34:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:35:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:36:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:38:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:39:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:39:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:41:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:42:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:44:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:46:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:47:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:49:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:50:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:51:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 10:51:56 AM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException\nWARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\nOct 12, 2023 10:58:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:00:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:00:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:01:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:02:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:04:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:05:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:08:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:08:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 11:09:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:09:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:10:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:11:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:11:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:13:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:14:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:16:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:20:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:22:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:22:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:22:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:23:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:26:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:28:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:31:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:34:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:40:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:43:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:46:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:50:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:53:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:56:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 12:57:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:00:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:03:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:07:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:08:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:12:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:15:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:23:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:30:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:34:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:42:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:44:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:47:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\nOct 12, 2023 1:50:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firestore-debug.log b/firestore-debug.log
--- a/firestore-debug.log	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ b/firestore-debug.log	(date 1697269122474)
@@ -1,5 +1,5 @@
-Oct 11, 2023 2:53:58 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
-INFO: Started WebSocket server on ws://0.0.0.0:46261
+Oct 14, 2023 3:35:07 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
+INFO: Started WebSocket server on ws://0.0.0.0:42009
 API endpoint: http://0.0.0.0:9299
 If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:
 
@@ -7,827 +7,123 @@
 
 Dev App Server is now running.
 
-Oct 11, 2023 2:55:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 2:55:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 2:56:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 2:56:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 2:59:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 2:59:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:02:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:05:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:05:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:06:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:07:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:07:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:07:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:11:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:11:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:14:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:14:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:22:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:22:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:23:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:24:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:26:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:27:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:34:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:35:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:37:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:37:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:39:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:41:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:41:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:43:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:43:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:46:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 3:46:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:46:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:46:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:48:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:48:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:51:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:51:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:55:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:57:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:57:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 5:59:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:06:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:06:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:07:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:07:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:10:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:11:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:14:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:14:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:15:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:18:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:20:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:20:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:21:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:21:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:22:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:22:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:24:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:24:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:28:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:28:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:28:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:30:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:33:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:36:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:36:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:37:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:38:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:39:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:40:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:42:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:42:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:44:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:44:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:45:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:45:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:46:04 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 11, 2023 6:48:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:48:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:51:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:51:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:59:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 6:59:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:09:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:09:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:10:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:11:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:13:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:14:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:20:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:20:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:22:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:25:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:32:32 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 11, 2023 7:46:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:46:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:47:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:47:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:50:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:50:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:51:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:51:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:51:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:51:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:53:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:53:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:57:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:57:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:58:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 7:58:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:01:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:02:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:02:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:03:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:03:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:04:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:04:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:05:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:07:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:07:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:08:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:09:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:12:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:14:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:15:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:17:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:18:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:19:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:22:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:26:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:29:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:37:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 8:40:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:14:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:16:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:17:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:18:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:19:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:20:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:36:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:36:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:38:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:40:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:42:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:43:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:46:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:47:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:48:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:52:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:54:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:55:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 9:58:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:03:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:04:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:05:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:06:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:07:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:08:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:09:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:11:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:13:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:16:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:18:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:19:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:20:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:21:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:22:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:26:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:26:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:27:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:28:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:34:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:36:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:39:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:39:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:40:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:43:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 10:51:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:01:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:03:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:06:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:11:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:14:20 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 11, 2023 11:16:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:18:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:19:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:21:48 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 11, 2023 11:44:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 11, 2023 11:52:19 PM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 12, 2023 1:13:00 AM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 12, 2023 1:20:01 AM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 12, 2023 8:18:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:18:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:18:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:19:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:20:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:22:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:22:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:23:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:23:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:30:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:33:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:33:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:33:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:35:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:36:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:38:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:39:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:40:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:40:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:42:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:43:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:43:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:45:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:47:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:49:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:49:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:50:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:50:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:52:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:52:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:55:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:56:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:58:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 8:59:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:06:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:07:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:08:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:08:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:09:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:09:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:13:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:13:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:15:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:17:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:18:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:24:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:25:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:25:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:25:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 9:28:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:02:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:03:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:03:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:04:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:04:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:07:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:08:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:08:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:10:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:12:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:13:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:13:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:15:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:15:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:18:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:18:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:22:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:26:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
+Oct 14, 2023 3:35:40 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
 INFO: Connected to new websocket client
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:40 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
+INFO: Connected to new websocket client
+Oct 14, 2023 3:35:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected non-HTTP/2 connection.
-Oct 12, 2023 10:26:32 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
+Oct 14, 2023 3:35:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:45 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
 INFO: Websocket client disconnected
-Oct 12, 2023 10:26:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:28:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:29:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:32:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:32:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:34:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:35:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:36:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:38:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:39:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:39:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:41:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:42:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:44:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:46:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:47:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:49:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:50:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:51:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 10:51:56 AM io.netty.channel.DefaultChannelPipeline onUnhandledInboundException
-WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
-java.net.SocketException: Connection reset
-	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
-	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
-	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
-	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)
-	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
-	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
-	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
-	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
-	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
-	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
-	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-
-Oct 12, 2023 10:58:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:00:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:00:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:01:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:02:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:04:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:05:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:08:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:08:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 11:09:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:09:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:10:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:11:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:11:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:13:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:14:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:16:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:20:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:22:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:22:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:22:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:23:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:26:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:28:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:30:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:31:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:34:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:40:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:43:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:46:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:50:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:53:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:56:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 12:57:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:00:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:03:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:06:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:07:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:08:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:12:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:15:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
-INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:23:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:35:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:35:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:36:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+INFO: Detected non-HTTP/2 connection.
+Oct 14, 2023 3:37:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:30:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:37:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:34:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:42:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:38:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:44:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:38:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:38:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:47:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:38:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
-Oct 12, 2023 1:50:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
+Oct 14, 2023 3:38:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
 INFO: Detected HTTP/2 connection.
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport com.example.cyclistance.R\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.theme.Black440\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport com.example.cyclistance.theme.Red900\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun BottomSheetOnGoingRescue(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit,\n    role: String,\n    onGoingRescueModel: OnGoingRescueModel,\n) {\n\n    val isRescuer by remember(role) {\n        derivedStateOf {\n            role == Role.RESCUER.name\n        }\n    }\n\n    Card(\n        modifier = modifier\n            .fillMaxWidth()\n            .shadow(\n                elevation = 12.dp,\n                shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),\n        shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp),\n        backgroundColor = MaterialTheme.colors.surface) {\n\n\n        ConstraintLayout(\n            modifier = Modifier\n                .fillMaxWidth()) {\n\n            val (time, roundedButtonSection, distance, etaIcon, speedometer) = createRefs()\n\n            val etaAvailable by remember(onGoingRescueModel.estimatedTime) {\n                derivedStateOf {\n                    onGoingRescueModel.estimatedTime.isNotEmpty()\n                }\n            }\n\n\n\n            if (!etaAvailable) {\n\n                Text(\n                    text = \"Calculating estimated time of arrival...\",\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier.constrainAs(time) {\n                        top.linkTo(parent.top, margin = 12.dp)\n                        start.linkTo(parent.start)\n                        end.linkTo(parent.end)\n                    }\n                )\n\n            }\n\n            if (etaAvailable) {\n\n                if (isRescuer) {\n                    SpeedometerSection(\n                        modifier = Modifier.constrainAs(speedometer) {\n                            top.linkTo(parent.top, margin = 4.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                        },\n                        currentSpeed = onGoingRescueModel.currentSpeed,\n                        distance = onGoingRescueModel.ridingDistance,\n                        maxSpeed = onGoingRescueModel.maxSpeed,\n                    )\n                }\n\n                Text(\n                    text = onGoingRescueModel.estimatedTime,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(time) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else parent.top,\n                                margin = 12.dp)\n                            end.linkTo(etaIcon.start)\n                        }\n                )\n\n\n                Image(\n                    painter = painterResource(id = R.drawable.ic_eta),\n                    contentDescription = \"ETA\",\n                    modifier = Modifier\n                        .size(20.dp)\n                        .constrainAs(etaIcon) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else parent.top,\n                                margin = 12.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                            this.centerHorizontallyTo(parent)\n                        }\n                )\n\n\n                Text(\n                    text = onGoingRescueModel.estimatedDistance,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(distance) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else parent.top,\n                                margin = 12.dp,\n                            )\n                            start.linkTo(etaIcon.end)\n                        }\n                )\n            }\n\n\n            RoundButtonSection(\n                modifier = Modifier.constrainAs(roundedButtonSection) {\n                    val anchor = if (etaAvailable) etaIcon else time\n                    top.linkTo(anchor.bottom, margin = 10.dp)\n                    end.linkTo(parent.end)\n                    start.linkTo(parent.start)\n                    bottom.linkTo(parent.bottom, margin = 10.dp)\n                },\n                onClickCallButton = onClickCallButton,\n                onClickChatButton = onClickChatButton,\n                onClickCancelButton = onClickCancelButton)\n\n\n        }\n    }\n}\n\n\n@Composable\nfun SpeedometerSection(\n    modifier: Modifier = Modifier,\n    currentSpeed: String,\n    distance: String,\n    maxSpeed: String) {\n\n    Column(\n        modifier = modifier.padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n\n        Text(\n            text = \"Current Speed\",\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize),\n            color = MaterialTheme.colors.onSurface,\n            modifier = Modifier.padding(vertical = 1.dp))\n\n        Text(color = MaterialTheme.colors.onSurface, text = buildAnnotatedString {\n            withStyle(\n                style = SpanStyle(\n                    fontSize = MaterialTheme.typography.subtitle1.fontSize,\n                    fontWeight = FontWeight.Medium)) {\n                append(currentSpeed)\n            }\n            withStyle(style = SpanStyle(fontSize = MaterialTheme.typography.overline.fontSize)) {\n                append(\" km/h\")\n            }\n        }, style = MaterialTheme.typography.subtitle1, modifier = Modifier.padding(vertical = 1.dp))\n\n\n        Column(\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally,\n            modifier = Modifier\n                .padding(vertical = 4.dp)\n                .fillMaxWidth()) {\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n\n            Row(\n                modifier = Modifier\n                    .height(IntrinsicSize.Max)\n                    .fillMaxWidth(),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.SpaceEvenly) {\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Distance\",\n                    content = distance)\n\n                Divider(\n                    color = Black440, modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp))\n\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Max Speed\",\n                    content = maxSpeed)\n            }\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n        }\n    }\n}\n\n@Composable\nfun RowScope.ItemSpeed(modifier: Modifier, title: String, content: String) {\n    Column(\n        modifier = modifier\n            .padding(vertical = 4.dp)\n            .weight(0.3f),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center) {\n        Text(\n            text = title,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize))\n\n        Text(\n            text = content,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle1.copy(\n                fontWeight = FontWeight.Medium,\n                fontSize = MaterialTheme.typography.button.fontSize))\n    }\n}\n\n@Composable\nprivate fun RoundButtonSection(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit) {\n\n\n    Row(\n        modifier = modifier\n            .background(Color.Transparent)\n            .fillMaxWidth(),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.Center) {\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_call,\n            buttonSubtitle = \"Emergency Call\", onClick = onClickCallButton)\n\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_chat,\n            buttonSubtitle = \"Chat\", onClick = onClickChatButton)\n\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = Red900,\n            contentColor = Color.White,\n            imageId = R.drawable.ic_cancel_1,\n            buttonSubtitle = \"Cancel\", onClick = onClickCancelButton)\n    }\n}\n\n\n\n@Composable\nprivate fun RoundedButtonItem(\n    modifier: Modifier = Modifier,\n    backgroundColor: Color,\n    contentColor: Color,\n    imageId: Int,\n    buttonSubtitle: String,\n    onClick: () -> Unit) {\n\n    Column(\n        modifier = modifier\n            .wrapContentSize().padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.spacedBy(\n            space = 7.dp,\n            alignment = Alignment.CenterVertically),\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n        Button(\n            modifier = Modifier\n                .size(48.dp)\n                .shadow(elevation = 2.dp, shape = CircleShape),\n            onClick = onClick,\n            shape = CircleShape,\n            colors = ButtonDefaults.buttonColors(\n                backgroundColor = backgroundColor,\n                contentColor = contentColor)) {\n\n            Icon(\n                painter = painterResource(id = imageId),\n                contentDescription = null, modifier = Modifier.fillMaxSize())\n        }\n\n        Text(\n            text = buttonSubtitle,\n            color = Black440,\n            style = MaterialTheme.typography.caption,\n            textAlign = TextAlign.Center)\n    }\n}\n\n\n\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueDark() {\n\n    CyclistanceTheme(true) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.RESCUER.name)\n        }\n    }\n}\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueLight() {\n\n    CyclistanceTheme(false) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n\n\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.RESCUEE.name)\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(revision 5f4dd85fedba165a82fa70935e397938fbcf4c66)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(date 1697267165257)
@@ -41,10 +41,8 @@
     onGoingRescueModel: OnGoingRescueModel,
 ) {
 
-    val isRescuer by remember(role) {
-        derivedStateOf {
-            role == Role.RESCUER.name
-        }
+    val isRescuer = remember(role) {
+            role == Role.RESCUER.name.lowercase()
     }
 
     Card(
