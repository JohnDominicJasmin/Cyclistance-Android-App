Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.input.TextFieldValue\nimport com.example.cyclistance.core.utils.formatter.IconFormatter.toHazardousLaneIconMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun MappingBottomSheet(\n    modifier: Modifier = Modifier,\n    state: MappingState,\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    markerPostedCount: Int,\n    event: (MappingUiEvent) -> Unit = {},\n    content: @Composable (PaddingValues) -> Unit,\n) {\n\n\n    val scope = rememberCoroutineScope()\n\n    val sheetGesturesEnabled = remember(uiState.bottomSheetType) {\n        uiState.bottomSheetType != BottomSheetType.SearchAssistance.type &&\n        uiState.bottomSheetType != BottomSheetType.OnGoingRescue.type &&\n        uiState.bottomSheetType != BottomSheetType.IncidentDescription.type\n    }\n    MappingBottomSheet(\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        sheetGesturesEnabled = sheetGesturesEnabled,\n        sheetContent = {\n            when (uiState.bottomSheetType) {\n\n                BottomSheetType.RescuerArrived.type -> {\n\n                    BottomSheetRescueArrived(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = {\n                            event(MappingUiEvent.RescueArrivedConfirmed)\n                        })\n\n                }\n\n                BottomSheetType.DestinationReached.type -> {\n\n                    BottomSheetReachedDestination(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = {\n                            event(MappingUiEvent.DestinationReachedConfirmed)\n                        })\n\n                }\n\n                BottomSheetType.ReportIncident.type -> {\n\n                    BottomSheetReportIncident(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        selectedLabel = uiState.selectedIncidentLabel,\n                        onClick = {\n                            event(MappingUiEvent.OnChangeIncidentLabel(it))\n                        }, onChangeDescription = {\n                            event(MappingUiEvent.OnChangeIncidentDescription(it))\n                        }, onClickConfirm = {\n                            event(MappingUiEvent.OnReportIncident(uiState.selectedIncidentLabel))\n                            scope.launch {\n                                bottomSheetScaffoldState.bottomSheetState.collapse()\n                            }\n                        }, incidentDescription = incidentDescription,\n                        markerPostedCount = markerPostedCount)\n\n                }\n\n                BottomSheetType.SearchAssistance.type -> {\n\n                    BottomSheetSearchingAssistance(\n                        modifier = modifier,\n                        onClickCancelSearchButton = {\n                            event(MappingUiEvent.CancelSearching)\n                        },\n                    )\n                }\n\n                BottomSheetType.OnGoingRescue.type -> {\n\n                    BottomSheetOnGoingRescue(\n                        modifier = modifier,\n                        onClickCallButton = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickChatButton = { event(MappingUiEvent.ChatRescueTransaction) },\n                        onClickCancelButton = { event(MappingUiEvent.CancelRescueTransaction) },\n                        role = state.user.transaction?.role ?: \"\",\n                        onGoingRescueModel = OnGoingRescueModel(\n                            estimatedTime = state.rescueETA,\n                            estimatedDistance = state.rescueDistance,\n                            currentSpeed = String.format(\n                                \"%.2f\",\n                                state.speedometerState.currentSpeedKph),\n                            ridingDistance = state.speedometerState.travelledDistance,\n                            maxSpeed = String.format(\"%.2f\", state.speedometerState.topSpeed)))\n\n                }\n\n                BottomSheetType.MapType.type -> {\n\n                    MapTypeBottomSheet(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        selectedMapType = state.mapType,\n                        onClickMapType = { event(MappingUiEvent.OnSelectMapType(it)) })\n\n                }\n\n                BottomSheetType.IncidentDescription.type -> {\n                    BottomSheetIncidentDescription(\n                        modifier = modifier,\n                        onDismissBottomSheet = { event(MappingUiEvent.DismissIncidentDescriptionBottomSheet) },\n                        uiState = uiState,\n                        state = state,\n                        icon = uiState.selectedHazardousMarker!!.label.toHazardousLaneIconMarker(),\n                        onClickEdit = { event(MappingUiEvent.OnClickEditIncidentDescription(uiState.selectedHazardousMarker)) },\n                        onClickDelete = { event(MappingUiEvent.OnClickDeleteIncident) },\n                        onClickCancelButton = { event(MappingUiEvent.CancelEditIncidentDescription) },\n                        onClickConfirmButton = { description, label ->\n                            event(\n                                MappingUiEvent.UpdateIncidentDescription(\n                                    label = label,\n                                    description = description))\n                        },\n                        onClickGotItButton = { event(MappingUiEvent.OnClickHazardousInfoGotIt) },\n                    )\n\n                }\n\n\n            }\n        }, content = content)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(revision 7d7b9144b66bee06653fd3bb8c3d415f8db079c9)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(date 1697619638153)
@@ -48,7 +48,7 @@
                         bottomSheetScaffoldState = bottomSheetScaffoldState,
                         modifier = modifier,
                         onClickOkButton = {
-                            event(MappingUiEvent.RescueArrivedConfirmed)
+                            event(MappingUiEvent.RescueFinished)
                         })
 
                 }
@@ -59,7 +59,7 @@
                         bottomSheetScaffoldState = bottomSheetScaffoldState,
                         modifier = modifier,
                         onClickOkButton = {
-                            event(MappingUiEvent.DestinationReachedConfirmed)
+                            event(MappingUiEvent.RescueFinished)
                         })
 
                 }
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event\n\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\n\n\nsealed class MappingVmEvent {\n\n    data object RequestHelp : MappingVmEvent()\n    data class RespondToHelp(val selectedRescuee: MapSelectedRescuee) : MappingVmEvent()\n    data class CancelRespondHelp(val id: String) : MappingVmEvent()\n    data class SelectRescueMapIcon(val id: String): MappingVmEvent()\n    data object CancelSearchingAssistance: MappingVmEvent()\n    data class DeclineRescueRequest(val id: String): MappingVmEvent()\n    data class AcceptRescueRequest(val id: String): MappingVmEvent()\n    data object SubscribeToDataChanges: MappingVmEvent()\n    data object CancelRescueTransaction: MappingVmEvent()\n    data class GetRouteDirections(val origin: Point, val destination: Point): MappingVmEvent()\n    data class ReportIncident(val label: String, val latLng: LatLng, val description: String): MappingVmEvent()\n    data class UpdateReportedIncident(val marker: HazardousLaneMarker): MappingVmEvent()\n    data class SetMapType(val mapType: String): MappingVmEvent()\n    data class SelectHazardousLaneMarker(val id: String): MappingVmEvent()\n    data class DeleteHazardousLaneMarker(val id: String): MappingVmEvent()\n    data class ShouldShowHazardousStartingInfo(val shouldShow: Boolean): MappingVmEvent()\n    data class NotifyNewRescueRequest(val message: String): MappingVmEvent()\n    data class NotifyRequestAccepted(val message: String): MappingVmEvent()\n    data object RescuerArrived: MappingVmEvent()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt	(revision 7d7b9144b66bee06653fd3bb8c3d415f8db079c9)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt	(date 1697517055307)
@@ -17,6 +17,7 @@
     data class AcceptRescueRequest(val id: String): MappingVmEvent()
     data object SubscribeToDataChanges: MappingVmEvent()
     data object CancelRescueTransaction: MappingVmEvent()
+    data object RescueFinished: MappingVmEvent()
     data class GetRouteDirections(val origin: Point, val destination: Point): MappingVmEvent()
     data class ReportIncident(val label: String, val latLng: LatLng, val description: String): MappingVmEvent()
     data class UpdateReportedIncident(val marker: HazardousLaneMarker): MappingVmEvent()
