Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\r\n\r\nimport android.os.Parcelable\r\nimport com.example.cyclistance.core.utils.annotations.StableState\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport com.example.cyclistance.feature_mapping.domain.model.api.rescue_transaction.RouteDirection\r\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\r\nimport kotlinx.parcelize.Parcelize\r\n\r\n\r\n@Parcelize\r\n@StableState\r\ndata class MappingUiState(\r\n    val rescueRequestAccepted: Boolean = false,\r\n    val requestHelpButtonVisible: Boolean = true,\r\n    val searchingAssistance: Boolean = false,\r\n    val isNoInternetVisible: Boolean = false,\r\n    val mapSelectedRescuee: MapSelectedRescuee? = null,\r\n    val routeDirection: RouteDirection? = null,\r\n    val bottomSheetType: String? = null,\r\n    val locationPermissionDialogVisible: Boolean = false,\r\n    val phonePermissionDialogVisible: Boolean = false,\r\n    val isFabExpanded: Boolean = false,\r\n    val alertDialogState: AlertDialogState = AlertDialogState(),\r\n    val isRescueRequestDialogVisible: Boolean = false,\r\n\r\n    ) : Parcelable\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(revision 14bffa0e989b24d0c9f5e99b885befb3b6466022)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingUiState.kt	(date 1687844989516)
@@ -21,6 +21,7 @@
     val locationPermissionDialogVisible: Boolean = false,
     val phonePermissionDialogVisible: Boolean = false,
     val isFabExpanded: Boolean = false,
+    val emergencyCallDialogVisible: Boolean = false,
     val alertDialogState: AlertDialogState = AlertDialogState(),
     val isRescueRequestDialogVisible: Boolean = false,
 
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity.RESULT_OK\r\nimport android.widget.Toast\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.animation.*\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\r\nimport androidx.navigation.NavController\r\nimport com.example.cyclistance.R\r\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\r\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\r\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\r\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LATITUDE\r\nimport com.example.cyclistance.core.utils.constants.NavigationConstants.LONGITUDE\r\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\r\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\r\nimport com.example.cyclistance.core.utils.permissions.requestPermission\r\nimport com.example.cyclistance.feature_dialogs.domain.model.AlertDialogState\r\nimport com.example.cyclistance.feature_mapping.domain.model.Role\r\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\r\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\r\nimport com.example.cyclistance.navigation.Screens\r\nimport com.example.cyclistance.navigation.navigateScreen\r\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\r\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\r\nimport com.google.accompanist.permissions.rememberPermissionState\r\nimport com.mapbox.core.constants.Constants.PRECISION_6\r\nimport com.mapbox.geojson.Feature\r\nimport com.mapbox.geojson.FeatureCollection\r\nimport com.mapbox.geojson.LineString\r\nimport com.mapbox.geojson.Point\r\nimport com.mapbox.mapboxsdk.geometry.LatLng\r\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\r\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\r\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\r\nimport com.mapbox.mapboxsdk.maps.MapboxMap\r\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport timber.log.Timber\r\n\r\n\r\n@SuppressLint(\"MissingPermission\")\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@ExperimentalPermissionsApi\r\n@Composable\r\nfun MappingScreen(\r\n    hasInternetConnection: Boolean,\r\n    mappingViewModel: MappingViewModel = hiltViewModel(),\r\n    paddingValues: PaddingValues,\r\n    isNavigating: Boolean,\r\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\r\n    navController: NavController) {\r\n\r\n    val context = LocalContext.current\r\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\r\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\r\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\r\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\r\n        mutableStateOf(null)\r\n    }\r\n\r\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\r\n        bottomSheetState = rememberBottomSheetState(initialValue = BottomSheetValue.Collapsed)\r\n    )\r\n\r\n    val collapseBottomSheet = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\r\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    val expandBottomSheet = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\r\n                    bottomSheetScaffoldState.bottomSheetState.expand()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\r\n        permissions = listOf(\r\n            Manifest.permission.ACCESS_FINE_LOCATION,\r\n            Manifest.permission.ACCESS_COARSE_LOCATION))\r\n\r\n\r\n    val userLocationAvailable by remember(\r\n        foregroundLocationPermissionsState.allPermissionsGranted,\r\n        state.userLocation) {\r\n        derivedStateOf {\r\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\r\n        }\r\n    }\r\n\r\n\r\n    val pulsingEnabled by remember(\r\n        uiState.searchingAssistance,\r\n        foregroundLocationPermissionsState.allPermissionsGranted\r\n    ) {\r\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\r\n    }\r\n\r\n\r\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\r\n        {\r\n            mapboxMap?.style?.let { style ->\r\n                if (isNavigating) {\r\n\r\n                    val buildLocationComponentActivationOptions =\r\n                        LocationComponentActivationOptions.builder(context, style)\r\n                            .locationComponentOptions(locationComponentOptions.build())\r\n                            .build()\r\n                    mapboxMap?.locationComponent?.apply {\r\n                        activateLocationComponent(buildLocationComponentActivationOptions)\r\n                        isLocationComponentEnabled = userLocationAvailable\r\n                        cameraMode = CameraMode.NONE\r\n                        renderMode = RenderMode.GPS\r\n\r\n                    }\r\n\r\n                } else {\r\n                    val buildLocationComponentActivationOptions =\r\n                        LocationComponentActivationOptions.builder(context, style)\r\n                            .locationComponentOptions(\r\n                                locationComponentOptions\r\n                                    .changeToNormalPuckIcon(context)\r\n                                    .pulseEnabled(pulsingEnabled)\r\n                                    .build())\r\n                            .build()\r\n                    mapboxMap?.locationComponent?.apply {\r\n                        activateLocationComponent(buildLocationComponentActivationOptions)\r\n                        isLocationComponentEnabled = userLocationAvailable\r\n                        cameraMode = CameraMode.NONE\r\n                        renderMode = RenderMode.NORMAL\r\n                    }\r\n                }\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n\r\n    val locateUser =\r\n        remember(userLocationAvailable, mapboxMap) {\r\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\r\n\r\n                val mapboxLoaded =\r\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\r\n                                                               ?: false)\r\n                if (userLocationAvailable && mapboxLoaded) {\r\n                    showUserLocation()\r\n                    mapboxMap?.animateCameraPosition(\r\n                        latLng = latLng,\r\n                        zoomLevel = zoomLevel,\r\n                        cameraAnimationDuration = cameraAnimationDuration)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    val onInitializeMapboxMap = remember(userLocationAvailable) {\r\n        { mbm: MapboxMap ->\r\n            if (mapboxMap == null) {\r\n                mapboxMap = mbm\r\n            }\r\n\r\n            if (userLocationAvailable) {\r\n                val camera = cameraState\r\n                locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val settingResultRequest = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.StartIntentSenderForResult()\r\n    ) { activityResult ->\r\n        if (activityResult.resultCode == RESULT_OK) {\r\n            context.startLocationServiceIntentAction()\r\n            Timber.d(\"GPS Setting Request Accepted\")\r\n            return@rememberLauncherForActivityResult\r\n        }\r\n        Timber.d(\"GPS Setting Request Denied\")\r\n    }\r\n\r\n    val requestHelp = remember {\r\n        {\r\n            if (!context.hasGPSConnection()) {\r\n                context.checkLocationSetting(\r\n                    onDisabled = settingResultRequest::launch,\r\n                    onEnabled = {\r\n                        mappingViewModel.onEvent(\r\n                            event = MappingVmEvent.RequestHelp)\r\n\r\n                    })\r\n            } else {\r\n                mappingViewModel.onEvent(\r\n                    event = MappingVmEvent.RequestHelp)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    val onClickRequestHelpButton = remember {\r\n        {\r\n            foregroundLocationPermissionsState.requestPermission(\r\n                onGranted = {\r\n                    context.startLocationServiceIntentAction()\r\n                    requestHelp()\r\n                }, onExplain = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    val showRouteDirection = remember(uiState.routeDirection, mapboxMap) {\r\n        {\r\n\r\n            uiState.routeDirection?.geometry?.let { geometry ->\r\n\r\n                mapboxMap?.getStyle { style ->\r\n                    if (style.isFullyLoaded.not() || geometry.isEmpty()) {\r\n                        return@getStyle\r\n                    }\r\n\r\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\r\n                    routeLineSource?.setGeoJson(\r\n                        FeatureCollection.fromFeature(\r\n                            Feature.fromGeometry(\r\n                                LineString.fromPolyline(geometry, PRECISION_6))))\r\n                }\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val removeRouteDirection = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.getStyle { style ->\r\n\r\n                if (style.isFullyLoaded.not()) {\r\n                    return@getStyle\r\n                }\r\n\r\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\r\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n\r\n    val onClickLocateUserButton = remember {\r\n        {\r\n            foregroundLocationPermissionsState.requestPermission(\r\n                onGranted = {\r\n                    if (!context.hasGPSConnection()) {\r\n                        context.checkLocationSetting(\r\n                            onDisabled = settingResultRequest::launch)\r\n                    }\r\n                    state.userLocation?.let {\r\n                        it.latitude ?: return@let\r\n                        it.longitude ?: return@let\r\n                        val point = LatLng(it.latitude, it.longitude)\r\n                        locateUser(LOCATE_USER_ZOOM_LEVEL, point, DEFAULT_CAMERA_ANIMATION_DURATION)\r\n                    }\r\n\r\n                }, onExplain = {\r\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\r\n                })\r\n        }\r\n    }\r\n\r\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\r\n        {\r\n            val route = state.rescueTransaction?.route\r\n            val location = route?.destinationLocation\r\n            location?.let {\r\n                it.latitude ?: return@let\r\n                it.longitude ?: return@let\r\n                context.openNavigationApp(latitude = it.latitude, longitude = it.longitude)\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val onClickRouteOverViewButton = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING\r\n        }\r\n    }\r\n\r\n    val onClickRecenterButton = remember(mapboxMap) {\r\n        {\r\n            mapboxMap?.locationComponent?.cameraMode = CameraMode.TRACKING_GPS\r\n        }\r\n    }\r\n\r\n    val onClickOpenNavigationButton = remember {\r\n        {\r\n            openNavigationApp()\r\n        }\r\n    }\r\n\r\n    val onClickCancelSearchButton = remember {\r\n        {\r\n            coroutineScope.launch {\r\n                collapseBottomSheet()\r\n            }.invokeOnCompletion {\r\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelRequestHelp)\r\n                uiState = uiState.copy(searchingAssistance = false)\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n\r\n    val onChangeCameraPosition = remember {\r\n        { _cameraState: CameraState ->\r\n            cameraState = _cameraState\r\n\r\n        }\r\n    }\r\n\r\n    val onClickCancelRescueButton = remember(state.rescuer, state.rescueTransaction) {\r\n        {\r\n            val role = state.user.transaction?.role\r\n            val isRescuee = role == Role.RESCUEE.name.lowercase()\r\n            val transactionId = state.rescueTransaction?.id\r\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\r\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\r\n\r\n            navController.navigateScreen(destination = \"${Screens.CancellationScreen.route}/$selectionType/$transactionId/$clientId\")\r\n\r\n        }\r\n    }\r\n\r\n    val onDismissNoInternetDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isNoInternetVisible = false\r\n            )\r\n        }\r\n    }\r\n\r\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\r\n        val transaction = state.rescueTransaction\r\n        val rescueTransactionId = state.rescueTransaction?.id ?: \"\"\r\n        val userTransactionId = state.user.transaction?.transactionId ?: \"\"\r\n        transaction != null && rescueTransactionId.isNotEmpty() && userTransactionId.isNotEmpty()\r\n    }\r\n\r\n    val isRescueCancelled =\r\n        remember(state.rescueTransaction?.cancellation?.rescueCancelled, state.rescueTransaction) {\r\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\r\n        }\r\n\r\n    val clientPhoneNumber = remember(state.rescuee, state.rescuer) {\r\n        val client = state.rescuee ?: state.rescuer\r\n        client?.contactNumber\r\n    }\r\n\r\n    val callClient = remember(clientPhoneNumber) {\r\n        {\r\n            clientPhoneNumber?.let(context::callPhoneNumber)\r\n        }\r\n    }\r\n    val phonePermissionState =\r\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\r\n            if (permissionGranted) {\r\n                callClient()\r\n            }\r\n        }\r\n    val onClickChatButton = remember(clientPhoneNumber) {\r\n        {\r\n\r\n\r\n        }\r\n    }\r\n\r\n    val onClickCallButton = remember(clientPhoneNumber) {\r\n        {\r\n            phonePermissionState.requestPermission(\r\n                onGranted = {\r\n                    callClient()\r\n                },\r\n                onExplain = {\r\n                    uiState = uiState.copy(phonePermissionDialogVisible = true)\r\n                })\r\n        }\r\n    }\r\n\r\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\r\n        {\r\n            val locationComponent = mapboxMap?.locationComponent\r\n            locationComponent?.cameraMode = CameraMode.TRACKING\r\n        }\r\n    }\r\n\r\n    val onClickOkCancelledRescue = remember {\r\n        {\r\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\r\n        }\r\n    }\r\n\r\n    val onClickRescueeMapIcon = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\r\n        }\r\n    }\r\n\r\n    val onDismissRescueeBanner = remember {\r\n        {\r\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\r\n            if (isRescueeBannerVisible) {\r\n                uiState = uiState.copy(\r\n                    mapSelectedRescuee = null,\r\n                    requestHelpButtonVisible = true\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    val onCollapseExpandableFAB = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isFabExpanded = false\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    val onToggleExpandedFAB = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isFabExpanded = !uiState.isFabExpanded\r\n            )\r\n        }\r\n    }\r\n\r\n    val onMapClick = remember {\r\n        {\r\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\r\n                collapseBottomSheet()\r\n            }\r\n            onDismissRescueeBanner()\r\n            onCollapseExpandableFAB()\r\n\r\n        }\r\n    }\r\n\r\n    val onMapLongClick = remember {\r\n        {\r\n            onDismissRescueeBanner()\r\n            onCollapseExpandableFAB()\r\n            uiState = uiState.copy(bottomSheetType = BottomSheetType.ReportIncident.type).also {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n    val onClickRespondToHelpButton = remember {\r\n        {\r\n            uiState.mapSelectedRescuee?.let {\r\n                mappingViewModel.onEvent(\r\n                    event = MappingVmEvent.RespondToHelp(\r\n                        selectedRescuee = it\r\n                    ))\r\n            }\r\n            Unit\r\n        }\r\n    }\r\n    val onClickOkAcceptedRescue = remember {\r\n        {\r\n            onChangeNavigatingState(true)\r\n            uiState = uiState.copy(\r\n                rescueRequestAccepted = false,\r\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\r\n            ).also {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n    val onDismissLocationPermissionDialog = remember {\r\n        {\r\n            uiState = uiState.copy(locationPermissionDialogVisible = false)\r\n        }\r\n    }\r\n\r\n    val onDismissPhonePermissionDialog = remember {\r\n        {\r\n            uiState = uiState.copy(phonePermissionDialogVisible = false)\r\n        }\r\n    }\r\n    val onClickCancelButton = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\r\n        }\r\n    }\r\n\r\n    val onClickConfirmButton = remember {\r\n        { id: String ->\r\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\r\n        }\r\n    }\r\n\r\n    val onClickReportIncident = remember {\r\n        {\r\n\r\n        }\r\n    }\r\n\r\n    val onDismissAlertDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                alertDialogState = AlertDialogState()\r\n            )\r\n        }\r\n    }\r\n\r\n    val onShowRescueRequestDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isRescueRequestDialogVisible = true\r\n            )\r\n        }\r\n    }\r\n\r\n    val onDismissRescueRequestDialog = remember {\r\n        {\r\n            uiState = uiState.copy(\r\n                isRescueRequestDialogVisible = false\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = true, key2 = state.userLocation) {\r\n\r\n        mappingViewModel.eventFlow.collectLatest { event ->\r\n            when (event) {\r\n\r\n\r\n                is MappingEvent.RequestHelpSuccess -> {\r\n                    navController.navigateScreen(\r\n                        Screens.ConfirmDetailsScreen.route + \"?$LATITUDE=${state.userLocation?.latitude}&$LONGITUDE=${state.userLocation?.longitude}\")\r\n                }\r\n\r\n                is MappingEvent.InsufficientUserCredential -> {\r\n                    navController.navigateScreen(\r\n                        Screens.EditProfileScreen.route)\r\n                }\r\n\r\n                is MappingEvent.LocationNotAvailable -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RescuerLocationNotAvailable -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.UnexpectedError -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.UserFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RespondToHelpSuccess -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.AddressFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.NoInternetConnection -> {\r\n                    uiState = uiState.copy(\r\n                        isNoInternetVisible = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.NewSelectedRescuee -> {\r\n                    uiState = uiState.copy(\r\n                        mapSelectedRescuee = event.selectedRescuee,\r\n                        requestHelpButtonVisible = false\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.NewRouteDirection -> {\r\n                    uiState = uiState.copy(\r\n                        routeDirection = event.routeDirection\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.RemoveAssignedTransactionSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        rescueRequestAccepted = false,\r\n                        requestHelpButtonVisible = true,\r\n                        searchingAssistance = false,\r\n                        routeDirection = null,\r\n                        mapSelectedRescuee = null,\r\n                    ).also {\r\n                        collapseBottomSheet()\r\n                    }\r\n                    onChangeNavigatingState(false)\r\n\r\n                }\r\n\r\n                is MappingEvent.RescueRequestAccepted -> {\r\n                    uiState = uiState.copy(\r\n                        rescueRequestAccepted = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.CancelHelpRequestSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        requestHelpButtonVisible = true\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.AcceptRescueRequestSuccess -> {\r\n                    uiState = uiState.copy(\r\n                        requestHelpButtonVisible = false,\r\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type\r\n                    ).also {\r\n                        expandBottomSheet()\r\n                    }\r\n                }\r\n\r\n                is MappingEvent.FailedToCalculateDistance -> {\r\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n\r\n                is MappingEvent.DestinationReached -> {\r\n                    val role = state.user.transaction?.role\r\n                    val type = if (role == Role.RESCUEE.name.lowercase()) {\r\n                        BottomSheetType.RescuerArrived.type\r\n                    } else {\r\n                        BottomSheetType.DestinationReached.type\r\n                    }\r\n                    uiState = uiState.copy(bottomSheetType = type).also {\r\n                        expandBottomSheet()\r\n                    }\r\n\r\n                }\r\n\r\n                is MappingEvent.RemoveRespondentFailed -> {\r\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                is MappingEvent.RescueHasTransaction -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Cannot Request\",\r\n                            description = \"Unfortunately the Rescuer is currently in a Rescue.\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n                is MappingEvent.UserHasCurrentTransaction -> {\r\n                    uiState = uiState.copy(\r\n                        alertDialogState = AlertDialogState(\r\n                            title = \"Cannot Request\",\r\n                            description = \"You can only have one transaction at a time\",\r\n                            icon = R.raw.error\r\n                        )\r\n                    )\r\n                }\r\n\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = uiState.routeDirection, key2 = mapboxMap) {\r\n\r\n        val route = uiState.routeDirection ?: return@LaunchedEffect\r\n\r\n        if (route.geometry.isEmpty()) {\r\n            removeRouteDirection()\r\n            return@LaunchedEffect\r\n        }\r\n        showRouteDirection()\r\n    }\r\n\r\n\r\n    LaunchedEffect(\r\n        key1 = state.rescueTransaction?.route,\r\n        key2 = hasTransaction,\r\n        key3 = isRescueCancelled) {\r\n\r\n        val transactionRoute = state.rescueTransaction?.route\r\n        val startingLocation = transactionRoute?.startingLocation\r\n        val destinationLocation = transactionRoute?.destinationLocation\r\n\r\n\r\n        if (hasTransaction.not() || isRescueCancelled) {\r\n            uiState = uiState.copy(routeDirection = null)\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        startingLocation?.longitude ?: return@LaunchedEffect\r\n        startingLocation.latitude ?: return@LaunchedEffect\r\n        destinationLocation?.longitude ?: return@LaunchedEffect\r\n        destinationLocation.latitude ?: return@LaunchedEffect\r\n\r\n        mappingViewModel.onEvent(\r\n            event = MappingVmEvent.GetRouteDirections(\r\n                origin = Point.fromLngLat(startingLocation.longitude, startingLocation.latitude),\r\n                destination = Point.fromLngLat(\r\n                    destinationLocation.longitude,\r\n                    destinationLocation.latitude)))\r\n\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = hasInternetConnection) {\r\n        val nearbyCyclistLoaded = state.nearbyCyclists != null\r\n        val userLoaded = state.user.id != null\r\n        val dataHaveBeenLoaded = userLoaded && nearbyCyclistLoaded\r\n\r\n        if (hasInternetConnection.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (dataHaveBeenLoaded.not()) {\r\n            mappingViewModel.onEvent(MappingVmEvent.LoadData)\r\n        }\r\n        mappingViewModel.onEvent(MappingVmEvent.SubscribeToDataChanges)\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\r\n        showUserLocation()\r\n    }\r\n\r\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\r\n        coroutineScope.launch {\r\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\r\n                expandBottomSheet()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\r\n\r\n        if (hasTransaction.not()) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (isRescueCancelled) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        onChangeNavigatingState(false)\r\n\r\n    }\r\n\r\n\r\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\r\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        if (!context.hasGPSConnection()) {\r\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\r\n        }\r\n\r\n        context.startLocationServiceIntentAction()\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    MappingScreenContent(\r\n        modifier = Modifier.padding(paddingValues),\r\n        state = state,\r\n        locationPermissionState = foregroundLocationPermissionsState,\r\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\r\n        hasTransaction = hasTransaction,\r\n        isRescueCancelled = isRescueCancelled,\r\n        isNavigating = isNavigating,\r\n        mapboxMap = mapboxMap,\r\n        uiState = uiState,\r\n        event = { event ->\r\n            when (event) {\r\n                is MappingUiEvent.RequestHelp -> onClickRequestHelpButton()\r\n                is MappingUiEvent.RespondToHelp -> onClickRespondToHelpButton()\r\n                is MappingUiEvent.CancelSearchConfirmed -> onClickCancelSearchButton()\r\n                is MappingUiEvent.CallRescueTransaction -> onClickCallButton()\r\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\r\n                is MappingUiEvent.CancelRescueTransaction -> onClickCancelRescueButton()\r\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\r\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\r\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\r\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\r\n                is MappingUiEvent.DismissNoInternetDialog -> onDismissNoInternetDialog()\r\n                is MappingUiEvent.RescueeMapIconSelected -> onClickRescueeMapIcon(event.id)\r\n                is MappingUiEvent.OnMapClick -> onMapClick()\r\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\r\n                is MappingUiEvent.LocateUser -> onClickLocateUserButton()\r\n                is MappingUiEvent.RouteOverview -> onClickRouteOverViewButton()\r\n                is MappingUiEvent.RecenterRoute -> onClickRecenterButton()\r\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\r\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\r\n                is MappingUiEvent.RescueArrivedConfirmed -> {}\r\n                is MappingUiEvent.DestinationReachedConfirmed -> {}\r\n                is MappingUiEvent.DismissLocationPermission -> onDismissLocationPermissionDialog()\r\n                is MappingUiEvent.DismissPhonePermission -> onDismissPhonePermissionDialog()\r\n                is MappingUiEvent.OnToggleExpandableFAB -> onToggleExpandedFAB()\r\n                is MappingUiEvent.OpenEmergencyCall -> {}\r\n                is MappingUiEvent.OpenFamilyTracker -> {}\r\n                is MappingUiEvent.ShowRescueRequestDialog -> onShowRescueRequestDialog()\r\n                is MappingUiEvent.DismissRescueRequestDialog -> onDismissRescueRequestDialog()\r\n                is MappingUiEvent.CancelRequestHelp -> onClickCancelButton(event.id)\r\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\r\n                is MappingUiEvent.DismissAlertDialog -> onDismissAlertDialog()\r\n                is MappingUiEvent.OnCollapseExpandableFAB -> onCollapseExpandableFAB()\r\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick()\r\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident()\r\n\r\n            }\r\n        }\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision 14bffa0e989b24d0c9f5e99b885befb3b6466022)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1687844989516)
@@ -475,6 +475,12 @@
         }
     }
 
+    val openEmergencyCallDialog = remember{{
+        uiState = uiState.copy(
+            emergencyCallDialogVisible = true
+        )
+    }}
+
     val onMapClick = remember {
         {
             if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {
@@ -862,7 +868,7 @@
                 is MappingUiEvent.DismissLocationPermission -> onDismissLocationPermissionDialog()
                 is MappingUiEvent.DismissPhonePermission -> onDismissPhonePermissionDialog()
                 is MappingUiEvent.OnToggleExpandableFAB -> onToggleExpandedFAB()
-                is MappingUiEvent.OpenEmergencyCall -> {}
+                is MappingUiEvent.OpenEmergencyCall -> openEmergencyCallDialog()
                 is MappingUiEvent.OpenFamilyTracker -> {}
                 is MappingUiEvent.ShowRescueRequestDialog -> onShowRescueRequestDialog()
                 is MappingUiEvent.DismissRescueRequestDialog -> onDismissRescueRequestDialog()
@@ -882,3 +888,6 @@
 }
 
 
+
+
+
