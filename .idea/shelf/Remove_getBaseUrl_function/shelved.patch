Index: app/src/main/java/com/example/cyclistance/di/MappingModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.di\n\nimport android.content.Context\nimport android.location.Geocoder\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.HEADER_CACHE_CONTROL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.HEADER_PRAGMA\nimport com.example.cyclistance.feature_mapping.data.CyclistanceApi\nimport com.example.cyclistance.feature_mapping.data.remote.websockets.RescueTransactionWSClient\nimport com.example.cyclistance.feature_mapping.data.remote.websockets.TransactionLiveLocationWSClient\nimport com.example.cyclistance.feature_mapping.data.remote.websockets.UserWSClient\nimport com.example.cyclistance.feature_mapping.data.repository.MappingRepositoryImpl\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingRepository\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.GetAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.SetAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.GetBikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.SetBikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetCalculatedDistanceUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetFullAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetUserLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.CreateRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.*\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.BroadcastTransactionLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.GetTransactionLocationUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.BroadcastRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.GetRescueTransactionUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.BroadcastToNearbyCyclists\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.GetUserUpdatesUseCase\nimport com.google.gson.GsonBuilder\nimport com.mapbox.api.optimization.v1.MapboxOptimization\nimport dagger.Module\nimport dagger.Provides\nimport dagger.hilt.InstallIn\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.hilt.components.SingletonComponent\nimport io.socket.client.IO\nimport okhttp3.Cache\nimport okhttp3.CacheControl\nimport okhttp3.Interceptor\nimport okhttp3.OkHttpClient\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport java.io.File\nimport java.util.concurrent.TimeUnit\nimport javax.inject.Singleton\n\n@Module\n@InstallIn(SingletonComponent::class)\nobject MappingModule {\n\n\n    @Provides\n    @Singleton\n    fun getBaseUrl(@ApplicationContext context: Context): String{\n        return context.getString(R.string.CyclistanceApiBaseUrl)\n    }\n\n    @Provides\n    @Singleton\n    fun provideCyclistanceApi(@ApplicationContext context: Context): CyclistanceApi {\n        val okHttpClient = providesOkhttpClient(context)\n        val gson = GsonBuilder().serializeNulls().create()\n\n        return lazy {\n            Retrofit.Builder()\n                .baseUrl(getBaseUrl(context))\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .client(okHttpClient)\n                .build()\n                .create(CyclistanceApi::class.java)\n        }.value\n\n    }\n\n\n    @Singleton\n    @Provides\n    fun providesMapOptimizationDirections(@ApplicationContext context: Context): MapboxOptimization.Builder{\n        return lazy {\n            MapboxOptimization.builder()\n                .accessToken(context.getString(R.string.MapsDownloadToken))\n        }.value\n    }\n\n\n    @Provides\n    @Singleton\n    fun provideMappingRepository(\n        @ApplicationContext context: Context,\n        api: CyclistanceApi,\n        mapboxDirections: MapboxOptimization.Builder): MappingRepository {\n\n        val socket = IO.socket(getBaseUrl(context))\n        val userWSClient = UserWSClient(socket)\n        val rescueTransactionWSClient = RescueTransactionWSClient(socket)\n        val liveLocation = TransactionLiveLocationWSClient(socket)\n        val geocoder = Geocoder(context)\n\n        return MappingRepositoryImpl(\n            api = api,\n            context = context,\n            rescueTransactionClient = rescueTransactionWSClient,\n            nearbyCyclistClient = userWSClient,\n            liveLocation = liveLocation,\n            mapboxDirections = mapboxDirections,\n            geocoder = geocoder\n        )\n    }\n\n\n    @Provides\n    @Singleton\n    fun provideMappingUseCase(repository: MappingRepository): MappingUseCase {\n        return MappingUseCase(\n\n            getUsersUseCase = GetUsersUseCase(repository),\n            getUserByIdUseCase = GetUserByIdUseCase(repository),\n            createUserUseCase = CreateUserUseCase(repository),\n            deleteUserUseCase = DeleteUserUseCase(repository),\n\n            getRescueTransactionByIdUseCase = GetRescueTransactionByIdUseCase(repository),\n            createRescueTransactionUseCase = CreateRescueTransactionUseCase(repository),\n            deleteRescueTransactionUseCase = DeleteRescueTransactionUseCase(repository),\n\n\n            getUserLocationUseCase = GetUserLocationUseCase(repository),\n            getFullAddressUseCase = GetFullAddressUseCase(repository),\n\n            getBikeTypeUseCase = GetBikeTypeUseCase(repository),\n            setBikeTypeUseCase = SetBikeTypeUseCase(repository),\n            getAddressUseCase = GetAddressUseCase(repository),\n            setAddressUseCase = SetAddressUseCase(repository),\n            broadcastRescueTransactionUseCase = BroadcastRescueTransactionUseCase(repository),\n            broadcastToNearbyCyclists = BroadcastToNearbyCyclists(repository),\n            getRescueTransactionUpdatesUseCase = GetRescueTransactionUpdatesUseCase(repository),\n            getUserUpdatesUseCase = GetUserUpdatesUseCase(repository),\n            broadcastRescueTransactionToRespondent = BroadcastTransactionLocationUseCase(repository),\n            getTransactionLocationUpdatesUseCase = GetTransactionLocationUpdatesUseCase(repository),\n            deleteRescueRespondentUseCase = DeleteRescueRespondentUseCase(repository),\n            addRescueRespondentUseCase = AddRescueRespondentUseCase(repository),\n            deleteAllRespondentsUseCase = DeleteAllRespondentsUseCase(repository),\n            confirmDetailsUseCase = ConfirmDetailsUseCase(repository),\n            confirmCancellationUseCase = ConfirmCancellationUseCase(repository),\n            getRouteDirectionsUseCase = GetRouteDirectionsUseCase(repository),\n            getCalculatedDistanceUseCase = GetCalculatedDistanceUseCase(repository),\n        )\n    }\n\n\n\n    @Provides\n    @Singleton\n    fun providesOkhttpClient(@ApplicationContext context: Context): OkHttpClient {\n        val interceptor = Interceptor { chain ->\n            var request = chain.request()\n            if (!context.hasInternetConnection()) {\n                val cacheControl = CacheControl.Builder()\n                    .maxStale(1, TimeUnit.DAYS)\n                    .build()\n\n                request = request.newBuilder()\n                    .removeHeader(HEADER_PRAGMA)\n                    .removeHeader(HEADER_CACHE_CONTROL)\n                    .cacheControl(cacheControl)\n                    .build()\n            }\n            chain.proceed(request)\n        }\n        val httpCacheDirectory = File(context.cacheDir, \"offlineCache\")\n        val cacheSize = 50 * 1024 * 1024\n        val cache = Cache(httpCacheDirectory, cacheSize.toLong())\n\n        return lazy {\n            OkHttpClient.Builder()\n                .cache(cache)\n                .addInterceptor(interceptor)\n                .build()\n        }.value\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/di/MappingModule.kt b/app/src/main/java/com/example/cyclistance/di/MappingModule.kt
--- a/app/src/main/java/com/example/cyclistance/di/MappingModule.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
+++ b/app/src/main/java/com/example/cyclistance/di/MappingModule.kt	(date 1685543298760)
@@ -55,11 +55,6 @@
 object MappingModule {
 
 
-    @Provides
-    @Singleton
-    fun getBaseUrl(@ApplicationContext context: Context): String{
-        return context.getString(R.string.CyclistanceApiBaseUrl)
-    }
 
     @Provides
     @Singleton
@@ -69,7 +64,7 @@
 
         return lazy {
             Retrofit.Builder()
-                .baseUrl(getBaseUrl(context))
+                .baseUrl(context.getString(R.string.CyclistanceApiBaseUrl))
                 .addConverterFactory(GsonConverterFactory.create(gson))
                 .client(okHttpClient)
                 .build()
@@ -96,7 +91,7 @@
         api: CyclistanceApi,
         mapboxDirections: MapboxOptimization.Builder): MappingRepository {
 
-        val socket = IO.socket(getBaseUrl(context))
+        val socket = IO.socket(context.getString(R.string.CyclistanceApiBaseUrl))
         val userWSClient = UserWSClient(socket)
         val rescueTransactionWSClient = RescueTransactionWSClient(socket)
         val liveLocation = TransactionLiveLocationWSClient(socket)
