Index: app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/manage_user/UpdateUserAvailability.kt
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/manage_user/UpdateUserAvailability.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/manage_user/UpdateUserAvailability.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/manage_user/UpdateUserAvailability.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ /dev/null	(revision 50366707d90af180195daf029935fdc8714ba190)
@@ -1,9 +0,0 @@
-package com.example.cyclistance.feature_messaging.domain.use_case.manage_user
-
-import com.example.cyclistance.feature_messaging.domain.repository.MessagingRepository
-
-class UpdateUserAvailability(private val repository: MessagingRepository) {
-    operator fun invoke(isUserAvailable: Boolean){
-        repository.updateUserAvailability(isUserAvailable)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_up/SignUpViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_authentication.presentation.auth_sign_up\n\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.domain.model.UserDetails\nimport com.example.cyclistance.core.utils.constants.AuthConstants.SIGN_UP_VM_STATE_KEY\nimport com.example.cyclistance.feature_authentication.domain.exceptions.AuthExceptions\nimport com.example.cyclistance.feature_authentication.domain.model.AuthModel\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\nimport com.example.cyclistance.feature_authentication.presentation.auth_sign_up.event.SignUpEvent\nimport com.example.cyclistance.feature_authentication.presentation.auth_sign_up.event.SignUpVmEvent\nimport com.example.cyclistance.feature_authentication.presentation.auth_sign_up.state.SignUpState\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharedFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\nimport javax.inject.Inject\n\n@HiltViewModel\nclass SignUpViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val authUseCase: AuthenticationUseCase,\n    private val messagingUseCase: MessagingUseCase,\n    private val defaultDispatcher: CoroutineDispatcher\n    ) : ViewModel() {\n\n    private val _state: MutableStateFlow<SignUpState> = MutableStateFlow(savedStateHandle[SIGN_UP_VM_STATE_KEY] ?: SignUpState())\n    val state = _state.asStateFlow()\n\n    private val _eventFlow: MutableSharedFlow<SignUpEvent> = MutableSharedFlow()\n    val eventFlow: SharedFlow<SignUpEvent> = _eventFlow.asSharedFlow()\n\n    init {\n        _state.update {\n            it.copy(\n                hasAccountSignedIn = authUseCase.hasAccountSignedInUseCase(),\n                savedAccountEmail = authUseCase.getEmailUseCase() ?: \"\",\n            )\n        }\n        savedStateHandle[SIGN_UP_VM_STATE_KEY] = state.value\n\n    }\n\n    fun onEvent(event: SignUpVmEvent) {\n        when (event) {\n\n            is SignUpVmEvent.SignUp -> {\n                signUp(\n                    email = event.email,\n                    password = event.password,\n                    confirmPassword = event.confirmPassword\n                )\n            }\n\n            is SignUpVmEvent.SignOut -> {\n                authUseCase.signOutUseCase()\n            }\n\n            is SignUpVmEvent.AgreedToPrivacyPolicy -> {\n                _state.update { it.copy(userAgreedToPrivacyPolicy = true) }\n            }\n        }\n        savedStateHandle[SIGN_UP_VM_STATE_KEY] = state.value\n    }\n\n\n    private fun signUp(\n         email: String,\n         password: String,\n         confirmPassword: String) {\n\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                _state.update { it.copy(isLoading = true) }\n                with(state.value) {\n                    authUseCase.createWithEmailAndPasswordUseCase(\n                        authModel = AuthModel(\n                            email = email.trim(),\n                            password = password.trim(),\n                            confirmPassword = confirmPassword.trim()\n                        ))\n                }\n            }.onSuccess { accountCreation ->\n                _state.update { it.copy(isLoading = false) }\n                if (accountCreation?.isSuccessful == true) {\n                    createUser(user = accountCreation.user)\n                    _eventFlow.emit(SignUpEvent.SignUpSuccess)\n                } else {\n                    _eventFlow.emit(SignUpEvent.CreateAccountFailed())\n                }\n            }.onFailure { exception ->\n                _state.update { it.copy(isLoading = false) }\n                handleException(exception)\n            }\n        }.invokeOnCompletion {\n            savedStateHandle[SIGN_UP_VM_STATE_KEY] = state.value\n        }\n    }\n\n    private fun createUser(user: UserDetails) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                _state.update { it.copy(isLoading = true) }\n                authUseCase.createUserUseCase(user)\n            }.onSuccess {\n                _state.update { it.copy(isLoading = false) }\n                messagingUseCase.updateUserAvailability(true)\n            }.onFailure { exception ->\n                _state.update { it.copy(isLoading = false) }\n                handleException(exception)\n            }\n        }.apply {\n            invokeOnCompletion {\n                savedStateHandle[SIGN_UP_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n\n    private suspend fun handleException(exception: Throwable) {\n        when (exception) {\n            is AuthExceptions.EmailException -> {\n                _eventFlow.emit(\n                    value = SignUpEvent.InvalidEmail(\n                        reason = exception.message ?: \"Invalid email. Please try again.\"))\n            }\n\n            is AuthExceptions.NewPasswordException -> {\n                _eventFlow.emit(\n                    value = SignUpEvent.InvalidPassword(\n                        reason = exception.message ?: \"Invalid password. Please try again.\"))\n            }\n            is AuthExceptions.ConfirmPasswordException -> {\n                _eventFlow.emit(value = SignUpEvent.InvalidConfirmPassword(reason = exception.message ?: \"Passwords do not match. Please try again.\"))\n            }\n            is AuthExceptions.NetworkException -> {\n                _eventFlow.emit(value = SignUpEvent.NoInternetConnection)\n            }\n            is AuthExceptions.UserAlreadyExistsException -> {\n                _eventFlow.emit(value = SignUpEvent.AccountAlreadyTaken)\n            }\n            else -> {\n                Timber.e(\"${this@SignUpViewModel.javaClass.name}: ${exception.message}\")\n            }\n        }\n        savedStateHandle[SIGN_UP_VM_STATE_KEY] = state.value\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_up/SignUpViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_up/SignUpViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_up/SignUpViewModel.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_authentication/presentation/auth_sign_up/SignUpViewModel.kt	(date 1696835883346)
@@ -112,7 +112,6 @@
                 authUseCase.createUserUseCase(user)
             }.onSuccess {
                 _state.update { it.copy(isLoading = false) }
-                messagingUseCase.updateUserAvailability(true)
             }.onFailure { exception ->
                 _state.update { it.copy(isLoading = false) }
                 handleException(exception)
Index: app/src/main/java/com/example/cyclistance/feature_messaging/presentation/common/MessageUserImage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.presentation.common\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\nimport coil.compose.rememberAsyncImagePainter\nimport coil.request.CachePolicy\nimport coil.request.ImageRequest\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.constants.MappingConstants\nimport com.example.cyclistance.theme.CyclistanceTheme\n\n@Composable\nfun MessageUserImage(\n    modifier: Modifier = Modifier,\n    isOnline: Boolean?,\n    photoUrl: String?) {\n\n    Box(modifier = Modifier.wrapContentSize()) {\n\n        AsyncImage(\n            model = ImageRequest.Builder(LocalContext.current)\n                .data(photoUrl)\n                .crossfade(true)\n                .networkCachePolicy(CachePolicy.ENABLED)\n                .diskCachePolicy(CachePolicy.ENABLED)\n                .memoryCachePolicy(CachePolicy.ENABLED)\n                .build(),\n            contentDescription = \"User Profile Image\",\n            modifier = modifier\n                .align(Alignment.Center),\n            contentScale = ContentScale.Crop,\n            placeholder = rememberAsyncImagePainter(model = R.drawable.ic_empty_profile_placeholder_large),\n            error = painterResource(id = R.drawable.ic_empty_profile_placeholder_large),\n            fallback = painterResource(id = R.drawable.ic_empty_profile_placeholder_large))\n\n\n        isOnline?.let {\n\n            OnlineIndicator(\n                isOnline = it,\n                modifier = Modifier\n                    .size(15.dp)\n                    .align(Alignment.BottomEnd))\n\n        }\n\n    }\n}\n\n@Preview\n@Composable\nfun PreviewUserImage() {\n    CyclistanceTheme(darkTheme = true) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(MaterialTheme.colors.background)) {\n            MessageUserImage(\n                modifier = Modifier\n                    .wrapContentSize()\n                    .clip(CircleShape)\n                    .size(48.dp),\n                isOnline = false,\n                photoUrl = MappingConstants.IMAGE_PLACEHOLDER_URL)\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/common/MessageUserImage.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/common/MessageUserImage.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/common/MessageUserImage.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/common/MessageUserImage.kt	(date 1696836319533)
@@ -27,7 +27,6 @@
 @Composable
 fun MessageUserImage(
     modifier: Modifier = Modifier,
-    isOnline: Boolean?,
     photoUrl: String?) {
 
     Box(modifier = Modifier.wrapContentSize()) {
@@ -49,15 +48,6 @@
             fallback = painterResource(id = R.drawable.ic_empty_profile_placeholder_large))
 
 
-        isOnline?.let {
-
-            OnlineIndicator(
-                isOnline = it,
-                modifier = Modifier
-                    .size(15.dp)
-                    .align(Alignment.BottomEnd))
-
-        }
 
     }
 }
@@ -74,7 +64,6 @@
                     .wrapContentSize()
                     .clip(CircleShape)
                     .size(48.dp),
-                isOnline = false,
                 photoUrl = MappingConstants.IMAGE_PLACEHOLDER_URL)
         }
     }
Index: app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/components/ConversationChatItem.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.presentation.conversation.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.widthIn\nimport androidx.compose.foundation.layout.wrapContentHeight\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.UserDetails\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.toReadableDateTime\nimport com.example.cyclistance.feature_messaging.domain.model.ui.chats.MessagingUserItemModel\nimport com.example.cyclistance.feature_messaging.domain.model.ui.conversation.ConversationItemModel\nimport com.example.cyclistance.feature_messaging.presentation.common.MessageUserImage\nimport com.example.cyclistance.feature_messaging.presentation.conversation.state.ConversationState\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport java.util.Date\n\n@Composable\nfun ChatItem(\n    modifier: Modifier = Modifier,\n    isInternetAvailable: Boolean,\n    conversation: ConversationItemModel,\n    isSender: Boolean,\n    state: ConversationState,\n    currentIndex: Int? = null,\n    selectedIndex: Int? = null,\n    onSelectChatMessage: (Int) -> Unit,\n    resendMessage: () -> Unit,\n    markAsSeen: (messageId: String) -> Unit,\n    contentAlignment: Alignment = Alignment.Center,\n) {\n\n    val timeStampAvailable by remember {\n        derivedStateOf {\n            conversation.messageDuration == null\n        }\n    }\n\n\n    val shouldShowNotSentIndicator = remember(conversation.isSent, isSender) {\n        conversation.isSent.not().and(!isSender)\n    }\n\n    val isSelected = remember(selectedIndex, currentIndex) { selectedIndex == currentIndex }\n    val contentColor =\n        if (isSender) MaterialTheme.colors.onSurface else MaterialTheme.colors.onPrimary\n    val backgroundColor =\n        if (isSender) MaterialTheme.colors.surface else MaterialTheme.colors.primaryVariant\n\n\n    LaunchedEffect(key1 = conversation) {\n        if (!conversation.isSeen && isSender) {\n            markAsSeen(conversation.messageId)\n        }\n    }\n\n    Box(modifier = modifier.fillMaxWidth(), contentAlignment = contentAlignment) {\n\n        val userAvailable = state.userReceiverMessage?.isUserAvailable\n\n        Column(\n            horizontalAlignment = if (isSender) Alignment.Start else Alignment.End,\n            modifier = Modifier.fillMaxWidth()) {\n\n\n            AnimatedVisibility(\n                visible = timeStampAvailable.and(isSelected),\n                enter = fadeIn() + expandVertically(animationSpec = tween(durationMillis = 320)),\n                exit = fadeOut() + shrinkVertically(animationSpec = tween(durationMillis = 300)),\n                modifier = Modifier.fillMaxWidth()) {\n\n\n                Text(\n                    text = conversation.timestamp!!,\n                    color = MaterialTheme.colors.onBackground,\n                    modifier = Modifier\n                        .wrapContentSize()\n                        .padding(vertical = 6.dp),\n                    style = MaterialTheme.typography.caption.copy(\n                        textAlign = TextAlign.Start))\n            }\n\n\n\n            Row(\n            modifier = Modifier,\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.Center) {\n\n            if (isSender) {\n                MessageUserImage(\n                    modifier = Modifier\n                        .padding(bottom = 4.dp, end = 4.dp)\n                        .clip(CircleShape)\n                        .size(36.dp),\n                    isOnline = if (!isInternetAvailable) null else userAvailable,\n                    photoUrl = state.userReceiverMessage?.getPhoto(),\n                )\n            }\n\n\n\n\n\n                Column(\n                    modifier = Modifier,\n                    horizontalAlignment = Alignment.End,\n                    verticalArrangement = Arrangement.Center) {\n\n\n                    Box(\n                        modifier = Modifier\n                            .wrapContentHeight()\n                            .widthIn(max = 270.dp)\n                            .clip(RoundedCornerShape(12.dp))\n                            .clickable {\n                                currentIndex?.let { onSelectChatMessage(it) }\n                            }\n                            .then(\n                                if (isSelected) Modifier.background(backgroundColor) else Modifier.background(\n                                    backgroundColor.copy(alpha = 0.8f)))) {\n\n                        Column(\n                            modifier = Modifier.wrapContentSize(),\n                            verticalArrangement = Arrangement.Center,\n                            horizontalAlignment = Alignment.End) {\n\n                            Text(\n                                text = conversation.message,\n                                modifier = Modifier\n                                    .padding(horizontal = 12.dp, vertical = 8.dp),\n                                style = MaterialTheme.typography.body1.copy(\n                                    color = contentColor,\n                                    textAlign = TextAlign.Start),\n                            )\n\n\n                            AnimatedVisibility(\n                                visible = !isSender,\n                                enter = fadeIn(),\n                                exit = fadeOut()) {\n\n                                Icon(\n                                    painter = painterResource(if (conversation.isSeen) R.drawable.ic_seen else R.drawable.ic_not_seen),\n                                    contentDescription = \"Arrow Forward\",\n                                    tint = contentColor,\n                                    modifier = Modifier\n                                        .padding(end = 4.dp, bottom = 8.dp)\n                                        .size(16.dp))\n                            }\n\n\n\n                        }\n                    }\n\n                    AnimatedVisibility(\n                        visible = shouldShowNotSentIndicator,\n                        modifier = Modifier.padding(top = 8.dp)) {\n                        NotSentIndicator(resendMessage = {\n                            resendMessage()\n                        })\n                    }\n                }\n\n            }\n\n            }\n        }\n    }\n\n\n@Preview\n@Composable\nfun PreviewChatItemSenderDark() {\n\n    CyclistanceTheme(darkTheme = true) {\n        Box(\n            modifier = Modifier\n                .background(MaterialTheme.colors.background)\n                .fillMaxSize()) {\n            ChatItem(\n                isSender = true,\n                state = ConversationState(\n                    userReceiverMessage = MessagingUserItemModel(userDetails = UserDetails())\n                ),\n                isInternetAvailable = true,\n                conversation = ConversationItemModel(\n                    senderId = \"1\",\n                    message = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia,\\n\" +\n                              \"molestiae quas vel sint commodi repudiandae consequuntur\",\n                    receiverId = \"2\",\n                    timestamp = Date().toReadableDateTime(pattern = \"MMM dd hh:mm a\"),\n                    messageId = \"1\",\n                ), resendMessage = {}, onSelectChatMessage = {}, markAsSeen = {})\n        }\n    }\n}\n\n\n@Preview\n@Composable\nfun PreviewChatItemSenderLight() {\n\n    CyclistanceTheme(darkTheme = false) {\n        Box(\n            modifier = Modifier\n                .background(MaterialTheme.colors.background)\n                .fillMaxSize()) {\n            ChatItem(\n                isSender = true,\n                state = ConversationState(),\n                isInternetAvailable = true,\n                conversation = ConversationItemModel(\n                    senderId = \"1\",\n                    message = \"i\",\n                    receiverId = \"2\",\n                    timestamp = Date().toReadableDateTime(pattern = \"MMM dd hh:mm a\"),\n                    messageId = \"1\",\n                    isSent = true,\n                    isSeen = true\n                ), onSelectChatMessage = {}, resendMessage = {}, markAsSeen = {}\n            )\n        }\n    }\n}\n\n\n@Preview\n@Composable\nfun PreviewChatItemRecipientDark() {\n\n    CyclistanceTheme(darkTheme = true) {\n        Box(\n            modifier = Modifier\n                .background(MaterialTheme.colors.background)\n                .fillMaxSize(),\n        ) {\n            ChatItem(\n                currentIndex = 1, selectedIndex = 1,\n                isSender = false,\n                state = ConversationState(\n\n                ),\n                isInternetAvailable = true,\n                conversation = ConversationItemModel(\n                    senderId = \"1\",\n                    message = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia,\\n\" +\n                              \"molestiae quas vel sint commodi repudiandae consequuntur\",\n                    receiverId = \"2\",\n                    timestamp = Date().toReadableDateTime(pattern = \"MMM dd hh:mm a\"),\n                    messageId = \"1\",\n                ), resendMessage = {}, onSelectChatMessage = {}, markAsSeen = {})\n        }\n    }\n}\n\n@Preview\n@Composable\nfun PreviewChatItemRecipientLight() {\n\n    CyclistanceTheme(darkTheme = false) {\n        Box(\n            modifier = Modifier\n                .background(MaterialTheme.colors.background)\n                .fillMaxSize(),\n        ) {\n            ChatItem(\n                isSender = false,\n                currentIndex = 1, selectedIndex = 1,\n                state = ConversationState(),\n                isInternetAvailable = true,\n                conversation = ConversationItemModel(\n                    senderId = \"1\",\n                    message = \"i\",\n                    receiverId = \"2\",\n                    timestamp = Date().toReadableDateTime(pattern = \"MMM dd hh:mm a\"),\n                    messageId = \"1\",\n                    isSent = true,\n                    isSeen = true\n                ), resendMessage = {}, onSelectChatMessage = {}, markAsSeen = {})\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/components/ConversationChatItem.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/components/ConversationChatItem.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/components/ConversationChatItem.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/components/ConversationChatItem.kt	(date 1696836373033)
@@ -87,7 +87,6 @@
 
     Box(modifier = modifier.fillMaxWidth(), contentAlignment = contentAlignment) {
 
-        val userAvailable = state.userReceiverMessage?.isUserAvailable
 
         Column(
             horizontalAlignment = if (isSender) Alignment.Start else Alignment.End,
@@ -124,7 +123,6 @@
                         .padding(bottom = 4.dp, end = 4.dp)
                         .clip(CircleShape)
                         .size(36.dp),
-                    isOnline = if (!isInternetAvailable) null else userAvailable,
                     photoUrl = state.userReceiverMessage?.getPhoto(),
                 )
             }
Index: app/src/main/java/com/example/cyclistance/feature_messaging/data/mapper/MessagingUserItemMapper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.data.mapper\n\nimport com.example.cyclistance.core.domain.model.UserDetails\nimport com.example.cyclistance.core.utils.constants.MappingConstants.IMAGE_PLACEHOLDER_URL\nimport com.example.cyclistance.core.utils.constants.MessagingConstants\nimport com.example.cyclistance.core.utils.constants.MessagingConstants.KEY_AVAILABILITY\nimport com.example.cyclistance.core.utils.constants.UtilConstants.KEY_EMAIL\nimport com.example.cyclistance.core.utils.constants.UtilConstants.KEY_NAME\nimport com.example.cyclistance.core.utils.constants.UtilConstants.KEY_PHOTO\nimport com.example.cyclistance.core.utils.constants.UtilConstants.KEY_UID\nimport com.example.cyclistance.feature_messaging.domain.model.ui.chats.MessagingUserItemModel\nimport com.google.firebase.firestore.DocumentSnapshot\n\nobject MessagingUserItemMapper {\n    fun DocumentSnapshot.toMessageUser(): MessagingUserItemModel {\n        return MessagingUserItemModel(\n            userDetails = UserDetails(\n                uid = this[KEY_UID].toString(),\n                name = this[KEY_NAME].toString(),\n                photo = getString(KEY_PHOTO) ?: IMAGE_PLACEHOLDER_URL,\n                email = this[KEY_EMAIL].toString(),\n            ),\n            fcmToken = this[MessagingConstants.KEY_FCM_TOKEN].toString(),\n            isUserAvailable = getBoolean(KEY_AVAILABILITY) ?: false\n\n        )\n    }\n\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/data/mapper/MessagingUserItemMapper.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/data/mapper/MessagingUserItemMapper.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/data/mapper/MessagingUserItemMapper.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/data/mapper/MessagingUserItemMapper.kt	(date 1696836064926)
@@ -3,7 +3,6 @@
 import com.example.cyclistance.core.domain.model.UserDetails
 import com.example.cyclistance.core.utils.constants.MappingConstants.IMAGE_PLACEHOLDER_URL
 import com.example.cyclistance.core.utils.constants.MessagingConstants
-import com.example.cyclistance.core.utils.constants.MessagingConstants.KEY_AVAILABILITY
 import com.example.cyclistance.core.utils.constants.UtilConstants.KEY_EMAIL
 import com.example.cyclistance.core.utils.constants.UtilConstants.KEY_NAME
 import com.example.cyclistance.core.utils.constants.UtilConstants.KEY_PHOTO
@@ -21,8 +20,6 @@
                 email = this[KEY_EMAIL].toString(),
             ),
             fcmToken = this[MessagingConstants.KEY_FCM_TOKEN].toString(),
-            isUserAvailable = getBoolean(KEY_AVAILABILITY) ?: false
-
         )
     }
 
Index: app/src/main/java/com/example/cyclistance/feature_messaging/domain/model/ui/chats/MessagingUserItemModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.domain.model.ui.chats\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.domain.model.UserDetails\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport kotlinx.parcelize.Parcelize\n\n\n@StableState\n@Parcelize\ndata class MessagingUserItemModel(\n    val userDetails: UserDetails = UserDetails(),\n    val fcmToken: String = \"\",\n    val isUserAvailable: Boolean = false\n) : Parcelable {\n\n    fun getUid() = userDetails.uid\n    fun getName() = userDetails.name\n    fun getPhoto(): String = userDetails.photo\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/domain/model/ui/chats/MessagingUserItemModel.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/domain/model/ui/chats/MessagingUserItemModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/domain/model/ui/chats/MessagingUserItemModel.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/domain/model/ui/chats/MessagingUserItemModel.kt	(date 1696835963333)
@@ -11,7 +11,6 @@
 data class MessagingUserItemModel(
     val userDetails: UserDetails = UserDetails(),
     val fcmToken: String = "",
-    val isUserAvailable: Boolean = false
 ) : Parcelable {
 
     fun getUid() = userDetails.uid
Index: app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/state/ConversationState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.presentation.conversation.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_messaging.domain.model.ui.chats.MessagingUserItemModel\nimport com.example.cyclistance.feature_messaging.domain.model.ui.conversation.ConversationsModel\nimport kotlinx.parcelize.Parcelize\n\n\n@Parcelize\n@StableState\ndata class ConversationState(\n    val userReceiverMessage: MessagingUserItemModel? = null,\n    val userSenderMessage: MessagingUserItemModel? = null,\n    val userUid: String = \"\",\n    val userName: String = \"\",\n    val conversionId: String? = null,\n    val isLoading: Boolean = false,\n    val conversationsModel: ConversationsModel? = null,\n) : Parcelable{\n    fun getReceiverId():String {\n        return userReceiverMessage?.getUid() ?: \"\"\n    }\n    fun isReceiverAvailable():Boolean {\n        return userReceiverMessage!!.isUserAvailable\n    }\n    fun getReceiverToken(): String{\n        return userReceiverMessage?.fcmToken!!\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/state/ConversationState.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/state/ConversationState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/state/ConversationState.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/state/ConversationState.kt	(date 1696835986069)
@@ -21,9 +21,7 @@
     fun getReceiverId():String {
         return userReceiverMessage?.getUid() ?: ""
     }
-    fun isReceiverAvailable():Boolean {
-        return userReceiverMessage!!.isUserAvailable
-    }
+
     fun getReceiverToken(): String{
         return userReceiverMessage?.fcmToken!!
     }
Index: app/src/main/java/com/example/cyclistance/navigation/NavViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.navigation\n\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.utils.constants.NavConstants.NAV_VM_STATE_KEY\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport com.example.cyclistance.feature_on_boarding.domain.use_case.IntroSliderUseCase\nimport com.example.cyclistance.navigation.event.NavEvent\nimport com.example.cyclistance.navigation.event.NavVmEvent\nimport com.example.cyclistance.navigation.state.NavState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.launchIn\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\nimport javax.inject.Inject\n\n@HiltViewModel\nclass NavViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val introSliderUseCase: IntroSliderUseCase,\n    private val authUseCase: AuthenticationUseCase,\n    private val messagingUseCase: MessagingUseCase\n) : ViewModel() {\n\n\n    private val _state = MutableStateFlow(savedStateHandle[NAV_VM_STATE_KEY] ?: NavState())\n    val state = _state.asStateFlow()\n\n    private val _event = MutableSharedFlow<NavEvent>()\n    val event = _event.asSharedFlow()\n\n    init {\n        getStartingDestination()\n        setUserAvailability(true)\n    }\n\n    private fun setUserAvailability(availability: Boolean){\n        viewModelScope.launch(SupervisorJob()) {\n            runCatching {\n                messagingUseCase.updateUserAvailability(availability)\n            }.onSuccess {\n                Timber.v(\"User Availability Updated Successfully\")\n            }.onFailure {\n                Timber.e(\"User Availability Update Failed: ${it.localizedMessage}\")\n            }\n        }\n    }\n\n    private fun getStartingDestination() {\n\n        introSliderUseCase.readIntroSliderUseCase().catch {\n            Timber.e(\"IntroSlider DataStore Reading Failed: ${it.localizedMessage}\")\n        }.onEach { userCompletedWalkThrough ->\n            if (!userCompletedWalkThrough) {\n                _state.update { it.copy(navigationStartingDestination = Screens.OnBoardingNavigation.ROUTE) }\n                return@onEach\n            }\n\n            if (isUserSignedIn()) {\n                _state.update { it.copy(navigationStartingDestination = Screens.MappingNavigation.ROUTE) }\n                return@onEach\n            }\n\n            _state.update { it.copy(navigationStartingDestination = Screens.AuthenticationNavigation.ROUTE) }\n        }.launchIn(viewModelScope).invokeOnCompletion {\n            savedStateHandle[NAV_VM_STATE_KEY] = state.value\n        }\n\n    }\n\n    fun onEvent(event: NavVmEvent) {\n        when (event) {\n            is NavVmEvent.DeleteMessagingToken -> deleteMessagingToken()\n        }\n    }\n\n    private fun deleteMessagingToken() {\n        viewModelScope.launch {\n            runCatching {\n                messagingUseCase.deleteTokenUseCase()\n            }.onSuccess {\n                _event.emit(value = NavEvent.DeleteMessagingTokenSuccess)\n            }.onFailure {\n                _event.emit(\n                    value = NavEvent.DeleteMessagingTokenFailure(\n                        it.message ?: \"Unknown Error\"))\n            }\n        }\n    }\n\n    private fun isUserSignedIn(): Boolean {\n        return (authUseCase.isSignedInWithProviderUseCase() == true || authUseCase.isEmailVerifiedUseCase() == true) &&\n               authUseCase.hasAccountSignedInUseCase()\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        setUserAvailability(false)\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/navigation/NavViewModel.kt b/app/src/main/java/com/example/cyclistance/navigation/NavViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/navigation/NavViewModel.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/navigation/NavViewModel.kt	(date 1696835883696)
@@ -11,7 +11,6 @@
 import com.example.cyclistance.navigation.event.NavVmEvent
 import com.example.cyclistance.navigation.state.NavState
 import dagger.hilt.android.lifecycle.HiltViewModel
-import kotlinx.coroutines.SupervisorJob
 import kotlinx.coroutines.flow.MutableSharedFlow
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.asSharedFlow
@@ -41,20 +40,9 @@
 
     init {
         getStartingDestination()
-        setUserAvailability(true)
     }
 
-    private fun setUserAvailability(availability: Boolean){
-        viewModelScope.launch(SupervisorJob()) {
-            runCatching {
-                messagingUseCase.updateUserAvailability(availability)
-            }.onSuccess {
-                Timber.v("User Availability Updated Successfully")
-            }.onFailure {
-                Timber.e("User Availability Update Failed: ${it.localizedMessage}")
-            }
-        }
-    }
+
 
     private fun getStartingDestination() {
 
@@ -105,7 +93,6 @@
 
     override fun onCleared() {
         super.onCleared()
-        setUserAvailability(false)
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/example/cyclistance/di/messaging/MessagingViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.di.messaging\n\nimport com.example.cyclistance.feature_messaging.domain.repository.MessagingRepository\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.conversion.AddConversionUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.conversion.GetConversionIdUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.conversion.UpdateConversionUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetMessagingUserUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetUidUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.manage_user.UpdateUserAvailability\nimport com.example.cyclistance.feature_messaging.domain.use_case.message.AddMessageListenerUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.message.RemoveMessageListenerUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.message.SendMessageUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.network.ReEnableNetworkSyncUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.notification.SendNotificationUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.seen.MarkAsSeenUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.token.DeleteTokenUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.token.RefreshTokenUseCase\nimport dagger.Module\nimport dagger.Provides\nimport dagger.hilt.InstallIn\nimport dagger.hilt.android.components.ViewModelComponent\nimport dagger.hilt.android.scopes.ViewModelScoped\n\n\n@Module\n@InstallIn(ViewModelComponent::class)\nobject MessagingViewModelModule {\n\n\n\n    @Provides\n    @ViewModelScoped\n    fun providesMessagingUseCase(repository: MessagingRepository): MessagingUseCase {\n        return MessagingUseCase(\n            refreshTokenUseCase = RefreshTokenUseCase(repository = repository),\n            deleteTokenUseCase = DeleteTokenUseCase(repository = repository),\n            sendMessageUseCase = SendMessageUseCase(repository = repository),\n            addMessageListenerUseCase = AddMessageListenerUseCase(repository = repository),\n            removeMessageListenerUseCase = RemoveMessageListenerUseCase(repository = repository),\n            getUidUseCase = GetUidUseCase(repository = repository),\n            getConversionIdUseCase = GetConversionIdUseCase(repository = repository),\n            addConversionUseCase = AddConversionUseCase(repository = repository),\n            updateConversionUseCase = UpdateConversionUseCase(repository = repository),\n            updateUserAvailability = UpdateUserAvailability(repository = repository),\n            sendNotificationUseCase = SendNotificationUseCase(repository = repository),\n            getMessagingUserUseCase = GetMessagingUserUseCase(repository = repository),\n            reEnableNetworkSyncUseCase = ReEnableNetworkSyncUseCase(repository = repository),\n            markAsSeenUseCase = MarkAsSeenUseCase(repository = repository)\n        )\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/di/messaging/MessagingViewModelModule.kt b/app/src/main/java/com/example/cyclistance/di/messaging/MessagingViewModelModule.kt
--- a/app/src/main/java/com/example/cyclistance/di/messaging/MessagingViewModelModule.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/di/messaging/MessagingViewModelModule.kt	(date 1696835883313)
@@ -7,7 +7,6 @@
 import com.example.cyclistance.feature_messaging.domain.use_case.conversion.UpdateConversionUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetMessagingUserUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetUidUseCase
-import com.example.cyclistance.feature_messaging.domain.use_case.manage_user.UpdateUserAvailability
 import com.example.cyclistance.feature_messaging.domain.use_case.message.AddMessageListenerUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.message.RemoveMessageListenerUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.message.SendMessageUseCase
@@ -42,7 +41,6 @@
             getConversionIdUseCase = GetConversionIdUseCase(repository = repository),
             addConversionUseCase = AddConversionUseCase(repository = repository),
             updateConversionUseCase = UpdateConversionUseCase(repository = repository),
-            updateUserAvailability = UpdateUserAvailability(repository = repository),
             sendNotificationUseCase = SendNotificationUseCase(repository = repository),
             getMessagingUserUseCase = GetMessagingUserUseCase(repository = repository),
             reEnableNetworkSyncUseCase = ReEnableNetworkSyncUseCase(repository = repository),
Index: app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.presentation.conversation\n\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.list.ListUtils\nimport com.example.cyclistance.core.utils.constants.MessagingConstants.CONVERSATION_VM_STATE_KEY\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\nimport com.example.cyclistance.feature_messaging.domain.model.SendMessageModel\nimport com.example.cyclistance.feature_messaging.domain.model.SendNotificationModel\nimport com.example.cyclistance.feature_messaging.domain.model.ui.conversation.ConversationItemModel\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport com.example.cyclistance.feature_messaging.presentation.conversation.event.ConversationEvent\nimport com.example.cyclistance.feature_messaging.presentation.conversation.event.ConversationVmEvent\nimport com.example.cyclistance.feature_messaging.presentation.conversation.state.ConversationState\nimport com.example.cyclistance.feature_user_profile.domain.use_case.UserProfileUseCase\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\nimport javax.inject.Inject\n\n@HiltViewModel\nclass ConversationViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val messagingUseCase: MessagingUseCase,\n    private val userProfileUseCase: UserProfileUseCase,\n    private val authUseCase: AuthenticationUseCase\n) : ViewModel() {\n\n\n    private val _conversationState = mutableStateListOf<ConversationItemModel>()\n    val conversationState: List<ConversationItemModel> = _conversationState\n\n    private val _state = MutableStateFlow(\n        savedStateHandle[CONVERSATION_VM_STATE_KEY] ?: ConversationState())\n\n    val state = _state.asStateFlow()\n\n    private val _eventFlow = MutableSharedFlow<ConversationEvent>()\n    val event = _eventFlow.asSharedFlow()\n\n\n    private fun initialize(\n        userReceiverId: String,\n    ) {\n        loadConversationSelected(receiverId = userReceiverId)\n        addMessageListener(receiverId = userReceiverId)\n        getConversionId(receiverId = userReceiverId)\n        getUid()\n        getName()\n        saveState()\n    }\n\n    private fun getId(): String = authUseCase.getIdUseCase()\n\n    private fun loadConversationSelected(receiverId: String) {\n        viewModelScope.launch {\n            runCatching {\n\n                val sender = async {\n                    if (state.value.userSenderMessage == null) {\n                        messagingUseCase.getMessagingUserUseCase(uid = getId())\n                    } else {\n                        state.value.userSenderMessage\n                    }\n                }.await()\n\n                val receiver = async {\n                    if (state.value.userReceiverMessage?.userDetails?.uid != receiverId) {\n                        messagingUseCase.getMessagingUserUseCase(uid = receiverId)\n                    } else {\n                        state.value.userReceiverMessage\n                    }\n                }.await()\n\n                _state.update {\n                    it.copy(\n                        userSenderMessage = sender,\n                        userReceiverMessage = receiver\n                    )\n                }\n            }.onSuccess {\n                Timber.v(\"Messaging User Success\")\n            }.onFailure {\n                Timber.e(\"Messaging User Error: ${it.localizedMessage}\")\n            }\n        }\n    }\n\n    fun onEvent(event: ConversationVmEvent) {\n        when (event) {\n            is ConversationVmEvent.SendMessage -> sendMessage(event.sendMessageModel)\n            is ConversationVmEvent.OnInitialized -> initialize(userReceiverId = event.userReceiverId)\n            ConversationVmEvent.ResendMessage -> resendMessage()\n            is ConversationVmEvent.MarkAsSeen -> markAsSeen(event.messageId)\n        }\n        saveState()\n    }\n\n\n    private fun markAsSeen(messageId: String) {\n        viewModelScope.launch {\n            state.value.conversionId?.let { conversionId ->\n                messagingUseCase.markAsSeenUseCase(\n                    messageId = messageId,\n                    conversionId = conversionId)\n            }\n        }\n    }\n\n    private fun saveState() {\n        savedStateHandle[CONVERSATION_VM_STATE_KEY] = state.value\n    }\n\n    private fun resendMessage() {\n        viewModelScope.launch {\n            runCatching {\n                messagingUseCase.reEnableNetworkSyncUseCase()\n            }.onSuccess {\n                Timber.v(\"Success to re-enable network sync\")\n            }.onFailure {\n                _eventFlow.emit(value = ConversationEvent.ResendMessageFailed(it.message!!))\n            }\n        }\n    }\n\n    private fun getName() {\n        viewModelScope.launch {\n            runCatching {\n                userProfileUseCase.getNameUseCase()\n            }.onSuccess { name ->\n                _state.update { it.copy(userName = name) }\n            }.onFailure {\n                Timber.v(\"Failed to get name: ${it.message}\")\n            }\n        }\n    }\n\n\n    private fun setConversion(message: String) {\n        if (state.value.conversionId == null) {\n            addConversion(message = message)\n            return\n        }\n        updateConversion(message = message)\n    }\n\n    private fun updateConversion(message: String) {\n        val conversionId = state.value.conversionId\n        val receiverId = state.value.getReceiverId()\n        viewModelScope.launch {\n            runCatching {\n                messagingUseCase.updateConversionUseCase(\n                    message = message,\n                    receiverId = receiverId,\n                    conversionId = conversionId!!)\n            }.onSuccess {\n                Timber.v(\"Success to update conversion\")\n            }.onFailure {\n                Timber.e(\"Failed to update conversion: ${it.message}\")\n            }\n        }\n    }\n\n    private fun addConversion(message: String) {\n        runCatching {\n            val receiverId = state.value.getReceiverId()\n            messagingUseCase.addConversionUseCase(\n                receiverId = receiverId,\n                message = message,\n                onNewConversionId = { id ->\n                    _state.update { it.copy(conversionId = id) }\n                }\n            )\n        }.onSuccess {\n            Timber.v(\"Success to add conversion\")\n        }.onFailure {\n            Timber.e(\"Failed to add conversion: ${it.message}\")\n        }\n    }\n\n\n    private fun getConversionId(receiverId: String) {\n        viewModelScope.launch {\n            runCatching {\n                messagingUseCase.getConversionIdUseCase(receiverId = receiverId)\n            }.onSuccess { id ->\n                _state.update { it.copy(conversionId = id) }\n            }.onFailure {\n                Timber.e(\"Failed to get conversation id: ${it.message}\")\n            }\n        }\n    }\n\n    private fun getUid() {\n        runCatching {\n            messagingUseCase.getUidUseCase()\n        }.onSuccess { id ->\n            _state.update { it.copy(userUid = id) }\n        }.onFailure {\n            Timber.e(\"Failed to get uid: ${it.message}\")\n        }\n    }\n\n    private fun sendMessage(model: SendMessageModel) {\n        viewModelScope.launch(SupervisorJob()) {\n            setConversion(model.message)\n            messagingUseCase.sendMessageUseCase(model)\n            sendMessageNotification(model.message)\n        }\n    }\n\n    private fun sendMessageNotification(message: String) {\n        val userReceiver = state.value\n        if (userReceiver.isReceiverAvailable()) {\n            return\n        }\n        viewModelScope.launch {\n            runCatching {\n                messagingUseCase.sendNotificationUseCase(\n                    SendNotificationModel(\n                        conversationId = state.value.userSenderMessage!!.getUid(),\n                        senderName = state.value.userName,\n                        message = message,\n                        userReceiverToken = userReceiver.getReceiverToken()\n                    ))\n            }.onSuccess {\n                Timber.v(\"Successfully send message notification\")\n            }.onFailure {\n                Timber.e(\"Failed to send message notification\")\n            }\n        }\n    }\n\n    private fun removeMessageListener() {\n        messagingUseCase.removeMessageListenerUseCase()\n    }\n\n    private fun isLoading(isLoading: Boolean) {\n        _state.update { it.copy(isLoading = isLoading) }\n    }\n\n    private fun addMessageListener(receiverId: String) {\n        viewModelScope.launch {\n            runCatching {\n                isLoading(true)\n                messagingUseCase.addMessageListenerUseCase(\n                    receiverId = receiverId,\n                    onNewMessage = { conversation ->\n                        _conversationState.updateMessages(conversation.messages)\n                        isLoading(false)\n                    })\n            }.onSuccess {\n                Timber.v(\"Success to add message listener\")\n            }.onFailure {\n                isLoading(false)\n                Timber.e(\"Failed to add message listener ${it.message}\")\n            }\n        }\n    }\n\n    private fun MutableList<ConversationItemModel>.updateMessages(apiMessage: List<ConversationItemModel>) {\n        val notEqualIndex = zip(apiMessage).indexOfLast { (n1, n2) -> n1.isSent != n2.isSent }\n\n        if (ListUtils.isEqual(first = this, second = apiMessage)) {\n            return\n        }\n\n        if (notEqualIndex == -1) {\n            clear()\n            addAll(apiMessage)\n            return\n        }\n        set(notEqualIndex, element = apiMessage[notEqualIndex])\n    }\n\n\n    override fun onCleared() {\n        super.onCleared()\n        removeMessageListener()\n        _conversationState.clear()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationViewModel.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/presentation/conversation/ConversationViewModel.kt	(date 1696836110859)
@@ -220,9 +220,6 @@
 
     private fun sendMessageNotification(message: String) {
         val userReceiver = state.value
-        if (userReceiver.isReceiverAvailable()) {
-            return
-        }
         viewModelScope.launch {
             runCatching {
                 messagingUseCase.sendNotificationUseCase(
Index: app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/MessagingUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_messaging.domain.use_case\n\nimport com.example.cyclistance.feature_messaging.domain.use_case.conversion.AddConversionUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.conversion.GetConversionIdUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.conversion.UpdateConversionUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetMessagingUserUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetUidUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.manage_user.UpdateUserAvailability\nimport com.example.cyclistance.feature_messaging.domain.use_case.message.AddMessageListenerUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.message.RemoveMessageListenerUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.message.SendMessageUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.network.ReEnableNetworkSyncUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.notification.SendNotificationUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.seen.MarkAsSeenUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.token.DeleteTokenUseCase\nimport com.example.cyclistance.feature_messaging.domain.use_case.token.RefreshTokenUseCase\n\ndata class MessagingUseCase(\n    val refreshTokenUseCase: RefreshTokenUseCase,\n    val deleteTokenUseCase: DeleteTokenUseCase,\n    val sendMessageUseCase: SendMessageUseCase,\n    val addMessageListenerUseCase: AddMessageListenerUseCase,\n    val removeMessageListenerUseCase: RemoveMessageListenerUseCase,\n    val getUidUseCase: GetUidUseCase,\n    val getConversionIdUseCase: GetConversionIdUseCase,\n    val addConversionUseCase: AddConversionUseCase,\n    val updateConversionUseCase: UpdateConversionUseCase,\n    val updateUserAvailability: UpdateUserAvailability,\n    val sendNotificationUseCase: SendNotificationUseCase,\n    val getMessagingUserUseCase: GetMessagingUserUseCase,\n    val reEnableNetworkSyncUseCase: ReEnableNetworkSyncUseCase,\n    val markAsSeenUseCase: MarkAsSeenUseCase\n)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/MessagingUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/MessagingUseCase.kt
--- a/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/MessagingUseCase.kt	(revision 50366707d90af180195daf029935fdc8714ba190)
+++ b/app/src/main/java/com/example/cyclistance/feature_messaging/domain/use_case/MessagingUseCase.kt	(date 1696835883686)
@@ -5,7 +5,6 @@
 import com.example.cyclistance.feature_messaging.domain.use_case.conversion.UpdateConversionUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetMessagingUserUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.manage_user.GetUidUseCase
-import com.example.cyclistance.feature_messaging.domain.use_case.manage_user.UpdateUserAvailability
 import com.example.cyclistance.feature_messaging.domain.use_case.message.AddMessageListenerUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.message.RemoveMessageListenerUseCase
 import com.example.cyclistance.feature_messaging.domain.use_case.message.SendMessageUseCase
@@ -25,7 +24,6 @@
     val getConversionIdUseCase: GetConversionIdUseCase,
     val addConversionUseCase: AddConversionUseCase,
     val updateConversionUseCase: UpdateConversionUseCase,
-    val updateUserAvailability: UpdateUserAvailability,
     val sendNotificationUseCase: SendNotificationUseCase,
     val getMessagingUserUseCase: GetMessagingUserUseCase,
     val reEnableNetworkSyncUseCase: ReEnableNetworkSyncUseCase,
