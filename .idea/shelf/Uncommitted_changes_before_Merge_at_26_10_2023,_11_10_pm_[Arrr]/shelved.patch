Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_RADIUS\nimport com.example.cyclistance.core.utils.constants.MappingConstants.MAPPING_VM_STATE_KEY\nimport com.example.cyclistance.core.utils.constants.MappingConstants.NEAREST_METERS\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.formatToDistanceKm\nimport com.example.cyclistance.core.utils.formatter.FormatterUtils.isLocationAvailable\nimport com.example.cyclistance.feature_authentication.domain.use_case.AuthenticationUseCase\nimport com.example.cyclistance.feature_mapping.data.mapper.UserMapper.toRescueRequest\nimport com.example.cyclistance.feature_mapping.domain.exceptions.MappingExceptions\nimport com.example.cyclistance.feature_mapping.domain.helper.TrackingStateHandler\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.live_location.LiveLocationSocketModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue.RescueRequestItemModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransaction\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.RescuePending\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.RescueRequest\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserAssistanceModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.createMockUsers\nimport com.example.cyclistance.feature_messaging.domain.use_case.MessagingUseCase\nimport com.example.cyclistance.feature_rescue_record.domain.use_case.RescueRecordUseCase\nimport com.example.cyclistance.feature_user_profile.domain.use_case.UserProfileUseCase\nimport com.google.maps.android.SphericalUtil\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharedFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.flow.launchIn\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\nimport javax.inject.Inject\nimport com.google.android.gms.maps.model.LatLng as GoogleLatLng\n\n\n@HiltViewModel\nclass MappingViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val authUseCase: AuthenticationUseCase,\n    private val mappingUseCase: MappingUseCase,\n    private val userProfileUseCase: UserProfileUseCase,\n    private val defaultDispatcher: CoroutineDispatcher,\n    private val messagingUseCase: MessagingUseCase,\n    private val rescueRecordUseCase: RescueRecordUseCase,\n) : ViewModel() {\n\n\n    private var locationUpdatesJob: Job? = null\n    private var trackingHandler: TrackingStateHandler\n\n    private val _state: MutableStateFlow<MappingState> = MutableStateFlow(\n        savedStateHandle[MAPPING_VM_STATE_KEY] ?: MappingState(userId = getId())\n    )\n    val state = _state.asStateFlow()\n\n    private val _eventFlow: MutableSharedFlow<MappingEvent> = MutableSharedFlow()\n    val eventFlow: SharedFlow<MappingEvent> = _eventFlow.asSharedFlow()\n    private var travelledPath: MutableList<GoogleLatLng> = mutableStateListOf()\n\n    private val _hazardousLaneMarkers = mutableStateListOf<HazardousLaneMarker>()\n    val hazardousLaneMarkers: List<HazardousLaneMarker> = _hazardousLaneMarkers\n\n    init {\n        trackingHandler = TrackingStateHandler(state = _state, eventFlow = _eventFlow)\n        loadData()\n        observeDataChanges()\n        getMapType()\n        getShouldShowHazardousStartingInfo()\n        refreshToken()\n    }\n\n    private fun setShouldShowHazardousStartingInfo(shouldShow: Boolean) {\n        viewModelScope.launch {\n            mappingUseCase.shouldHazardousStartingInfoUseCase(shouldShow = shouldShow)\n        }\n    }\n\n    private fun getShouldShowHazardousStartingInfo() {\n        viewModelScope.launch {\n            mappingUseCase.shouldHazardousStartingInfoUseCase().catch {\n                it.handleException()\n            }.onEach { shouldShow ->\n                _state.update { it.copy(shouldShowHazardousStartingInfo = shouldShow) }\n            }.launchIn(this)\n        }\n    }\n\n\n    private fun observeDataChanges() {\n        subscribeToLocationUpdates()\n        subscribeToNearbyUsersUpdates()\n        subscribeToRescueTransactionUpdates()\n        subscribeToTransactionLocationUpdates()\n        subscribeToBottomSheetTypeUpdates()\n        subscribeToHazardousLaneUpdates()\n    }\n\n    private fun getMapType() {\n        viewModelScope.launch {\n            mappingUseCase.mapTypeUseCase()\n                .distinctUntilChanged()\n                .catch {\n                    Timber.v(\"Error getting map type: ${it.message}\")\n                }.onEach { mapType ->\n                    _state.update { it.copy(mapType = mapType) }\n                }.launchIn(this)\n\n        }\n    }\n\n    private fun subscribeToHazardousLaneUpdates() {\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.newHazardousLaneUseCase(\n                onAddedHazardousMarker = { marker ->\n\n                    _hazardousLaneMarkers.removeAll { modifiedMarker ->\n                        marker.id == modifiedMarker.id\n                    }\n                    _hazardousLaneMarkers.add(marker)\n                },\n                onModifiedHazardousMarker = { modifiedMarker ->\n                    _hazardousLaneMarkers.removeAll { marker ->\n                        marker.id == modifiedMarker.id\n                    }\n                    _hazardousLaneMarkers.add(modifiedMarker)\n                },\n                onRemovedHazardousMarker = { markerId ->\n                    _hazardousLaneMarkers.removeAll { marker ->\n                        marker.id == markerId\n                    }\n                }\n            )\n\n        }\n    }\n\n    private fun subscribeToBottomSheetTypeUpdates() {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n            mappingUseCase.bottomSheetTypeUseCase().catch {\n                it.handleException()\n            }.onEach {\n                if (it.isEmpty()) {\n                    return@onEach\n                }\n                _eventFlow.emit(value = MappingEvent.NewBottomSheetType(it))\n            }.launchIn(this)\n        }\n    }\n\n    private fun loadData() {\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n            // TODO: Remove when the backend is ready\n            createMockUpUsers()\n            trackingHandler.updateClient()\n\n        }\n    }\n\n\n\n\n    private fun acceptRescueRequest(id: String) {\n        viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            val rescuer = state.value.nearbyCyclist?.findUser(id) ?: return@launch\n            val transactionId = trackingHandler.getTransactionId(rescuer)\n            val user = state.value.user\n\n            trackingHandler.checkCurrentTransactions(user = user, rescuer = rescuer) {\n\n                coroutineScope {\n                    runCatching {\n                        isLoading(true)\n                        trackingHandler.getAcceptedRescueRequestItem(\n                            transactionId = transactionId,\n                            rescuer = rescuer\n                        ).apply {\n                            mappingUseCase.acceptRescueRequestUseCase(rescueTransaction = this)\n                        }\n\n                    }.onSuccess { rescueTransaction ->\n                        broadcastRescueTransaction()\n                        assignRequestTransaction(\n                            rescueTransaction = rescueTransaction,\n                            user = user,\n                            rescuer = rescuer,\n                            transactionId = transactionId\n                        )\n                        user.location?.let { broadcastRescueTransactionToRespondent(it) }\n                    }.onFailure { exception ->\n                        isLoading(false)\n                        exception.handleException()\n                    }\n                }\n\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n\n            }\n        }\n    }\n\n    private fun cancelHelpRequest() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                isLoading(true)\n                cancelUserHelpRequest()\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelHelpRequestSuccess)\n                broadcastToNearbyCyclists()\n            }.onFailure { exception ->\n                Timber.e(\"Failed to cancel search assistance: ${exception.message}\")\n                exception.handleException()\n            }\n            isLoading(false)\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n        }\n    }\n\n    private fun destinationArrived() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                rescuerArrived()\n                removeUserTransaction(id = getId())\n            }.onSuccess {\n                broadcastToNearbyCyclists()\n                isLoading(false)\n                _eventFlow.emit(value = MappingEvent.RescueArrivedSuccess)\n            }.onFailure { exception ->\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n    private fun cancelRescueTransaction() {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                removeUserTransaction(id = getId())\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelRescueTransactionSuccess)\n                broadcastToNearbyCyclists()\n                isLoading(false)\n                trackingHandler.clearTransactionRoles()\n            }.onFailure { exception ->\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n    private fun selectRescueeMapIcon(id: String) {\n        viewModelScope.launch(context = defaultDispatcher) {\n\n            val userLocation = state.value.user.location ?: state.value.userLocation\n\n            if (!userLocation.isLocationAvailable()) {\n                viewModelScope.launch(context = defaultDispatcher) {\n                    _eventFlow.emit(value = MappingEvent.LocationNotAvailable(\"Tracking your Location\"))\n                }\n                return@launch\n            }\n\n            calculateSelectedRescueeDistance(userLocation, id)\n\n        }\n    }\n\n    private fun respondToHelp(selectedRescuee: MapSelectedRescuee) {\n        viewModelScope.launch(context = defaultDispatcher + SupervisorJob()) {\n                uploadUserProfile(onSuccess = {\n                    viewModelScope.launch(this.coroutineContext) {\n                        runCatching {\n                            mappingUseCase.addRescueRespondentUseCase(\n                                userId = selectedRescuee.userId,\n                                respondentId = getId()\n                            )\n                        }.onSuccess {\n                            broadcastToNearbyCyclists()\n                            broadcastRescueTransaction()\n                            _state.update { it.copy(respondedToHelp = true) }\n                            _eventFlow.emit(value = MappingEvent.RespondToHelpSuccess())\n\n                        }.onFailure {\n                            it.handleException()\n                        }\n                    }\n                })\n        }\n    }\n\n    private fun showRouteDirection(origin: Point, destination: Point) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                mappingUseCase.getRouteDirectionsUseCase(origin = origin, destination = destination)\n            }.onSuccess { routeDirection ->\n                _eventFlow.emit(value = MappingEvent.GenerateRouteNavigationSuccess(routeDirection))\n            }.onFailure {\n                it.handleException()\n            }\n        }\n    }\n\n\n    private suspend fun broadcastRescueTransaction() {\n        runCatching {\n            mappingUseCase.broadcastRescueTransactionUseCase()\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n    private suspend fun broadcastToNearbyCyclists() {\n        val location = state.value.userLocation ?: return\n        location.longitude ?: return\n        location.latitude ?: return\n\n        runCatching {\n            mappingUseCase.nearbyCyclistsUseCase(\n                locationModel = LiveLocationSocketModel(\n                    latitude = location.latitude,\n                    longitude = location.longitude\n                )\n            )\n        }.onFailure {\n            it.handleException()\n        }\n    }\n\n    private fun refreshToken() {\n        viewModelScope.launch(SupervisorJob()) {\n            runCatching {\n                isLoading(true)\n                messagingUseCase.refreshTokenUseCase()\n            }.onSuccess {\n                Timber.v(\"Successfully refreshed token\")\n            }.onFailure {\n                Timber.e(\"Failed to refresh token ${it.message}\")\n            }.also {\n                isLoading(false)\n            }\n        }\n    }\n\n    private fun declineRescueRequest(id: String) {\n        viewModelScope.launch(context = defaultDispatcher) {\n            runCatching {\n                isLoading(true)\n                mappingUseCase.deleteRescueRespondentUseCase(userId = getId(), respondentId = id)\n            }.onSuccess {\n                removeRescueRespondent(id)\n                broadcastToNearbyCyclists()\n            }.onFailure {\n                it.handleDeclineRescueRequest()\n            }\n            isLoading(false)\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n\n        }\n    }\n\n    private suspend fun removeRescueRespondent(id: String) {\n        state.value.newRescueRequest?.request?.toMutableList()?.apply {\n            val respondentRemoved = removeAll { it.id == id }\n            if (!respondentRemoved) {\n                _eventFlow.emit(value = MappingEvent.RemoveRespondentFailed())\n                return@apply\n            }\n            _state.update {\n                it.copy(\n                    newRescueRequest = NewRescueRequestsModel(this)\n                )\n            }\n        }\n    }\n\n\n    private fun requestHelp() {\n        viewModelScope.launch(context = defaultDispatcher + SupervisorJob()) {\n            runCatching {\n                uploadUserProfile(onSuccess = {\n                    viewModelScope.launch(context = defaultDispatcher) {\n                        _eventFlow.emit(MappingEvent.RequestHelpSuccess)\n                        subscribeToNearbyUsersUpdates()\n                        subscribeToRescueTransactionUpdates()\n                        subscribeToTransactionLocationUpdates()\n                    }\n                })\n            }.onFailure {\n                it.handleException()\n            }\n        }.invokeOnCompletion {\n            savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n        }\n    }\n\n    fun onEvent(event: MappingVmEvent) {\n        when (event) {\n\n\n            is MappingVmEvent.GetRouteDirections -> {\n                showRouteDirection(origin = event.origin, destination = event.destination)\n            }\n\n            is MappingVmEvent.RespondToHelp -> {\n                respondToHelp(event.selectedRescuee)\n            }\n\n            is MappingVmEvent.SelectRescueMapIcon -> {\n                selectRescueeMapIcon(event.id)\n            }\n\n            is MappingVmEvent.RequestHelp -> {\n                requestHelp()\n            }\n\n\n            is MappingVmEvent.DeclineRescueRequest -> {\n                declineRescueRequest(event.id)\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.AcceptRescueRequest -> {\n                acceptRescueRequest(event.id)\n            }\n\n            is MappingVmEvent.CancelSearchingAssistance -> {\n                cancelHelpRequest()\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.ReportIncident -> {\n                calculateIncidentDistance(\n                    latLng = event.latLng,\n                    label = event.label,\n                    incidentDescription = event.description)\n            }\n\n            is MappingVmEvent.SetMapType -> {\n                setMapType(mapType = event.mapType)\n            }\n\n            is MappingVmEvent.SelectHazardousLaneMarker -> {\n                selectHazardousLaneMarker(id = event.id)\n            }\n\n            is MappingVmEvent.DeleteHazardousLaneMarker -> {\n                deleteHazardousLaneMarker(id = event.id)\n            }\n\n            is MappingVmEvent.UpdateReportedIncident -> {\n                updateReportedIncident(marker = event.marker)\n            }\n\n            is MappingVmEvent.ShouldShowHazardousStartingInfo ->\n                setShouldShowHazardousStartingInfo(event.shouldShow)\n\n            is MappingVmEvent.NotifyNewRescueRequest -> {\n                mappingUseCase.newRescueRequestNotificationUseCase(\n                    message = event.message\n                )\n            }\n\n            is MappingVmEvent.NotifyRequestAccepted -> {\n                mappingUseCase.requestAcceptedNotificationUseCase(\n                    message = event.message\n                )\n            }\n\n            is MappingVmEvent.CancelRespondHelp -> cancelRespondToHelp(respondentId = event.id)\n\n\n            is MappingVmEvent.CancelRescueTransaction -> {\n                cancelRescueTransaction()\n                clearTravelledPath()\n            }\n\n            is MappingVmEvent.DestinationArrived -> {\n                destinationArrived()\n                clearTravelledPath()\n            }\n\n        }\n        savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n    }\n\n\n    private fun rescuerArrived() {\n        val role = state.value.user.getRole()\n        viewModelScope.launch(SupervisorJob() + defaultDispatcher) {\n            runCatching {\n                rescueRecordUseCase.rescueDetailsUseCase(details = trackingHandler.getRideDetails())\n                if (role == Role.Rescuee.name) {\n                    rescueRecordUseCase.addRescueRecordUseCase(rideDetails = trackingHandler.getRideDetails())\n                }\n            }.onSuccess {\n\n                _eventFlow.emit(value = MappingEvent.DestinationArrivedSuccess)\n                trackingHandler.clearTransactionRoles()\n            }.onFailure {\n                _eventFlow.emit(value = MappingEvent.RescueArrivedFailed(it.message ?: \"Rescuer Arrived\"))\n            }\n        }\n    }\n\n    private fun cancelRespondToHelp(respondentId: String) {\n        viewModelScope.launch {\n            runCatching {\n                isLoading(true)\n                mappingUseCase.cancelHelpRespondUseCase(\n                    userId = getId(),\n                    respondentId = respondentId)\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.CancelRespondSuccess)\n                broadcastToNearbyCyclists()\n                _state.update { it.copy(respondedToHelp = false) }\n            }.onFailure {\n                it.handleException()\n            }.also {\n                isLoading(false)\n            }\n        }\n    }\n\n\n    private fun updateReportedIncident(marker: HazardousLaneMarker) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.updateHazardousLaneUseCase(\n                    hazardousLaneMarker = marker\n                )\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.UpdateIncidentSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.UpdateIncidentFailed(\n                        it.message ?: \"Failed to update incident\"))\n            }\n        }\n    }\n\n\n    private fun deleteHazardousLaneMarker(id: String) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.deleteHazardousLaneUseCase(id)\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.DeleteHazardousLaneMarkerSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.DeleteHazardousLaneMarkerFailed(\n                        it.message ?: \"Failed to delete incident marker\"))\n            }\n        }\n    }\n\n    private fun selectHazardousLaneMarker(id: String) {\n        viewModelScope.launch {\n            hazardousLaneMarkers.find { it.id == id }?.let { marker ->\n                _eventFlow.emit(value = MappingEvent.SelectHazardousLaneMarker(marker))\n            }\n        }\n    }\n\n\n    private fun calculateIncidentDistance(\n        latLng: LatLng,\n        label: String,\n        incidentDescription: String) {\n\n        viewModelScope.launch {\n            val userLocation = state.value.getCurrentLocation()\n\n            if (userLocation == null) {\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@launch\n            }\n\n            val distance = mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = userLocation,\n                destinationLocation = LocationModel(\n                    latitude = latLng.latitude,\n                    longitude = latLng.longitude\n                )\n            )\n\n            if (distance > DEFAULT_RADIUS) {\n                _eventFlow.emit(MappingEvent.IncidentDistanceTooFar)\n                return@launch\n            }\n\n            reportIncident(\n                label = label,\n                latLng = latLng,\n                incidentDescription = incidentDescription)\n\n\n        }\n\n    }\n\n    private fun setMapType(mapType: String) {\n        viewModelScope.launch {\n            runCatching {\n                mappingUseCase.mapTypeUseCase(mapType = mapType)\n            }.onSuccess {\n                Timber.v(\"Success setting map type: $it\")\n            }.onFailure {\n                Timber.e(\"Error setting map type: ${it.message}\")\n            }\n        }\n    }\n\n    private suspend fun reportIncident(\n        label: String,\n        latLng: LatLng,\n        incidentDescription: String) {\n\n\n        coroutineScope {\n            runCatching {\n                mappingUseCase.newHazardousLaneUseCase(\n                    hazardousLaneMarker = HazardousLaneMarker(\n                        id = getId() + System.currentTimeMillis(),\n                        idCreator = getId(),\n                        latitude = latLng.latitude,\n                        longitude = latLng.longitude,\n                        label = label,\n                        description = incidentDescription,\n\n                        ))\n            }.onSuccess {\n                _eventFlow.emit(value = MappingEvent.ReportIncidentSuccess)\n            }.onFailure {\n                _eventFlow.emit(\n                    value = MappingEvent.ReportIncidentFailed(\n                        reason = it.message ?: \"Failed to report incident\"))\n            }\n        }\n    }\n\n    private suspend fun calculateSelectedRescueeDistance(userLocation: LocationModel?, id: String) {\n        val selectedRescuee = state.value.nearbyCyclist?.findUser(id) ?: return\n        val selectedRescueeLocation = selectedRescuee.location\n\n\n        runCatching {\n            isLoading(true)\n            mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = LocationModel(\n                    latitude = userLocation?.latitude,\n                    longitude = userLocation?.longitude\n                ), destinationLocation = LocationModel(\n                    latitude = selectedRescueeLocation!!.latitude,\n                    longitude = selectedRescueeLocation.longitude\n                )\n            )\n        }.onSuccess { distance ->\n            val timeRemaining = FormatterUtils.getCalculatedETA(distance)\n            trackingHandler.showSelectedRescuee(\n                selectedRescuee = selectedRescuee,\n                distance = distance,\n                timeRemaining = timeRemaining)\n        }.onFailure {\n            _eventFlow.emit(value = MappingEvent.FailedToCalculateDistance)\n        }.also {\n            isLoading(false)\n        }\n    }\n\n\n    private suspend fun removeUserTransaction(id: String) {\n        mappingUseCase.createUserUseCase(\n            user = UserItem.removeUserTransaction(id)\n        )\n    }\n\n\n    private fun subscribeToTransactionLocationUpdates() {\n\n            viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n                mappingUseCase.transactionLocationUseCase().distinctUntilChanged().catch {\n                    Timber.e(\"ERROR GETTING TRANSACTION LOCATION: ${it.message}\")\n                }.onEach { liveLocation ->\n                    trackingHandler.updateTransactionLocation(location = liveLocation)\n                    liveLocation.updateTransactionETA()\n                    liveLocation.updateTransactionDistance()\n                }.launchIn(this@launch)\n\n            }\n    }\n\n    private suspend fun LiveLocationSocketModel.updateTransactionDistance() {\n        coroutineScope {\n            val transaction = state.value.user.transaction\n            val rescueLocation = state.value.userLocation\n\n\n            if (transaction?.transactionId?.isEmpty() == true) {\n                return@coroutineScope\n            }\n\n            latitude ?: return@coroutineScope\n            longitude ?: return@coroutineScope\n\n            rescueLocation?.let { location ->\n\n                val distance = mappingUseCase.getCalculatedDistanceUseCase(\n                    startingLocation = LocationModel(latitude, longitude),\n                    destinationLocation = LocationModel(location.latitude, location.longitude)\n                ).toInt()\n\n\n                if (distance <= NEAREST_METERS) {\n                    _eventFlow.emit(value = MappingEvent.DestinationReached)\n                }\n\n            }\n        }\n    }\n\n\n    private fun LiveLocationSocketModel.updateTransactionETA() {\n        val userLocation = state.value.userLocation\n        userLocation ?: return\n        this.latitude ?: return\n        this.longitude ?: return\n\n        val eta = getETABetweenTwoPoints(\n            startingLocation = LocationModel(\n                latitude = this.latitude,\n                longitude = this.longitude\n            ), endLocation = userLocation\n        )\n\n        val distance = mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = LocationModel(\n                latitude = this.latitude,\n                longitude = this.longitude\n            ),\n            destinationLocation = userLocation)\n        _state.update { it.copy(rescueETA = eta, rescueDistance = distance.formatToDistanceKm()) }\n    }\n\n    private fun getETABetweenTwoPoints(\n        startingLocation: LocationModel,\n        endLocation: LocationModel\n    ): String {\n        val distance = mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = startingLocation,\n            destinationLocation = endLocation\n        )\n\n        return FormatterUtils.getCalculatedETA(distanceMeters = distance)\n    }\n\n\n    private suspend fun assignRequestTransaction(\n        rescueTransaction: RescueTransactionItem,\n        user: UserItem,\n        rescuer: UserItem,\n        transactionId: String\n    ) {\n\n        runCatching {\n\n            user.assignRequestTransaction(role = Role.Rescuee.name, transactionId = transactionId)\n            rescuer.assignRequestTransaction(role = Role.Rescuer.name, transactionId = transactionId)\n\n        }.onSuccess {\n            broadcastToNearbyCyclists()\n            _eventFlow.emit(value = MappingEvent.AcceptRescueRequestSuccess)\n            delay(500)\n            updateTransactionETA(rescuer, rescueTransaction)\n            isLoading(false)\n            broadcastRescueTransaction()\n        }.onFailure { exception ->\n            isLoading(false)\n            exception.handleException()\n        }\n\n    }\n\n    private fun updateTransactionETA(rescuer: UserItem, rescueTransaction: RescueTransactionItem) {\n        val userLocation = state.value.userLocation ?: return\n\n        val estimatedTimeArrival = rescuer.location?.let {\n            getETABetweenTwoPoints(\n                startingLocation = it,\n                endLocation = userLocation\n            )\n        }\n\n        val distance = rescuer.location?.let {\n            mappingUseCase.getCalculatedDistanceUseCase(\n                startingLocation = it,\n                destinationLocation = userLocation)\n        }\n        _state.update {\n            it.copy(\n                rescueTransaction = rescueTransaction,\n                rescueETA = estimatedTimeArrival ?: \"\",\n                rescueDistance = distance?.formatToDistanceKm() ?: \"\",\n                rescuer = rescuer\n            )\n        }\n    }\n\n    private fun isLoading(loading: Boolean) {\n        _state.update { it.copy(isLoading = loading) }\n    }\n\n\n    private suspend fun UserItem.assignRequestTransaction(role: String, transactionId: String?) {\n        mappingUseCase.createUserUseCase(\n            user = this.assignTransaction(transactionId = transactionId!!, role = role)\n        )\n    }\n\n\n    private suspend fun Throwable.handleDeclineRescueRequest() {\n        when (this) {\n            is MappingExceptions.NetworkException -> {\n                _eventFlow.emit(value = MappingEvent.NoInternetConnection)\n            }\n\n            else -> {\n                Timber.d(\"Failed to update user\")\n            }\n        }\n    }\n\n\n    private suspend fun cancelUserHelpRequest() {\n\n        mappingUseCase.createUserUseCase(\n            user = UserItem.cancelUserHelpRequest(id = getId()))\n    }\n\n\n    private fun NearbyCyclist.filterUser() {\n\n        runCatching {\n            getId()\n        }.onSuccess { id ->\n            findUser(id = id)?.let { user ->\n                val respondents = user.getUserRescueRespondents(this).distinctBy { it.id }\n                _state.update {\n                    it.copy(\n                        newRescueRequest = NewRescueRequestsModel(request = respondents),\n                        user = user)\n                }\n            }\n        }.onFailure {\n            Timber.e(\"Failed to get user: ${it.message}\")\n        }\n\n    }\n\n\n    private fun UserItem.getUserRescueRespondents(nearbyCyclist: NearbyCyclist): List<RescueRequestItemModel> {\n        val rescueRespondentsSnapShot: MutableList<RescueRequestItemModel> = mutableListOf()\n\n        rescueRequest?.respondents?.forEach { respondent ->\n            val userRespondent = nearbyCyclist.findUser(id = respondent.clientId) ?: UserItem()\n            val distance =\n                calculateDistance(startLocation = location, endLocation = userRespondent.location)\n\n            distance?.let {\n                val formattedETA = FormatterUtils.getCalculatedETA(distanceMeters = it)\n                rescueRespondentsSnapShot.add(\n                    element = userRespondent.toRescueRequest(\n                        distance = it.formatToDistanceKm(),\n                        eta = formattedETA,\n                        timestamp = respondent.timeStamp\n                    )\n                )\n            }\n        }\n\n        return rescueRespondentsSnapShot.distinct()\n    }\n\n    private fun calculateDistance(\n        startLocation: LocationModel?,\n        endLocation: LocationModel?): Double? {\n        val startLatitude = startLocation?.latitude ?: return null\n        val startLongitude = startLocation.longitude ?: return null\n        val endLatitude = endLocation?.latitude ?: return null\n        val endLongitude = endLocation.longitude ?: return null\n\n        return mappingUseCase.getCalculatedDistanceUseCase(\n            startingLocation = LocationModel(latitude = startLatitude, longitude = startLongitude),\n            destinationLocation = LocationModel(latitude = endLatitude, longitude = endLongitude)\n        )\n    }\n\n    private fun NearbyCyclist.updateNearbyCyclists() {\n\n        _state.update {\n            it.copy(nearbyCyclist = NearbyCyclist())\n        }\n        _state.update {\n            it.copy(nearbyCyclist = this)\n        }\n    }\n\n    private suspend fun broadcastRescueTransactionToRespondent(location: LocationModel) {\n        val rescueTransaction = state.value.rescueTransaction ?: return\n        runCatching {\n\n            val transaction = state.value.user.transaction\n            val user = state.value.user\n\n            if (transaction?.transactionId?.isEmpty() == true) {\n                return@runCatching\n            }\n\n            mappingUseCase.transactionLocationUseCase(\n                LiveLocationSocketModel(\n                    latitude = location.latitude,\n                    longitude = location.longitude,\n                    room = rescueTransaction.id\n                ),\n                user = user,\n                rescueTransactionItem = rescueTransaction\n            )\n\n        }.onSuccess {\n            Timber.v(\"Broadcasting location to transaction success\")\n        }.onFailure {\n            Timber.v(\"Broadcasting location to transaction failed: ${it.message}\")\n        }\n    }\n\n\n\n\n    private fun removeHazardousLaneListener() {\n        mappingUseCase.removeHazardousListenerUseCase()\n    }\n\n\n    private fun subscribeToRescueTransactionUpdates() {\n\n            viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n                mappingUseCase.getRescueTransactionUpdatesUseCase().catch {\n                    Timber.e(\"ERROR GETTING RESCUE TRANSACTION: ${it.message}\")\n\n                }.onEach { rescueTransactions ->\n                    rescueTransactions.updateCurrentRescueTransaction()\n\n                    trackingHandler.filterRescueRequestAccepted(\n                        rescueTransaction = rescueTransactions,\n                        id = getId()\n                    )\n\n                    trackingHandler.updateClient()\n                }.launchIn(this@launch).invokeOnCompletion {\n                    savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n                }\n\n            }\n    }\n\n\n    private fun RescueTransaction.updateCurrentRescueTransaction() {\n        val rescueTransaction = trackingHandler.filterUserRescueTransaction(this)\n        _state.update { it.copy(rescueTransaction = rescueTransaction) }\n    }\n\n\n    private fun subscribeToLocationUpdates() {\n        if (locationUpdatesJob?.isActive == true) {\n            return\n        }\n        locationUpdatesJob = viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.getUserLocationUseCase().catch {\n                Timber.e(\"Error Location Updates: ${it.message}\")\n            }.onEach { location ->\n                trackingHandler.updateLocation(location)\n                broadcastRescueTransactionToRespondent(location)\n                updateSpeedometer(location)\n                if (state.value.nearbyCyclist == null) {\n                    broadcastToNearbyCyclists()\n                }\n\n            }.launchIn(this@launch).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun updateSpeedometer(location: LocationModel) {\n        val isUserRescuer = state.value.user.isRescuer()\n        if (isUserRescuer) {\n            trackingHandler.setSpeed(location.speed)\n            trackingHandler.getTopSpeed(location.speed)\n            travelledPath.add(element = GoogleLatLng(location.latitude!!, location.longitude!!))\n            val distance = SphericalUtil.computeLength(travelledPath).formatToDistanceKm()\n            trackingHandler.setTravelledDistance(distance)\n        }\n    }\n\n\n    private fun subscribeToNearbyUsersUpdates() {\n      viewModelScope.launch(context = SupervisorJob() + defaultDispatcher) {\n\n            mappingUseCase.nearbyCyclistsUseCase().catch {\n                Timber.e(\"ERROR GETTING USERS: ${it.message}\")\n            }.onEach {\n                it.filterUser()\n                it.updateNearbyCyclists()\n                Timber.v(\"Receiving from subscribeToNearbyUsersChanges\")\n                trackingHandler.updateClient()\n            }.launchIn(this).invokeOnCompletion {\n                savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n            }\n        }\n    }\n\n    private fun unSubscribeToLocationUpdates() {\n        locationUpdatesJob?.cancel()\n    }\n\n\n    private suspend inline fun uploadUserProfile(crossinline onSuccess: () -> Unit) {\n        coroutineScope {\n            val userLocation = state.value.userLocation\n\n\n            if (userLocation == null) {\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@coroutineScope\n            }\n\n            if(userLocation.longitude == null && userLocation.latitude == null){\n                _eventFlow.emit(MappingEvent.LocationNotAvailable(reason = \"Searching for GPS\"))\n                return@coroutineScope\n            }\n\n\n\n            uploadProfile(location = userLocation, onSuccess = onSuccess)\n\n        }\n    }\n\n\n    private suspend inline fun uploadProfile(\n        location: LocationModel,\n        crossinline onSuccess: () -> Unit\n    ) {\n\n        val isProfileUploaded = state.value.profileUploaded\n\n        if (isProfileUploaded) {\n            onSuccess()\n            return\n        }\n\n        val fullAddress = mappingUseCase.getFullAddressUseCase(\n            latitude = location.latitude,\n            longitude = location.longitude\n        )\n\n        coroutineScope {\n\n            runCatching {\n                isLoading(true)\n                fullAddress?.let { mappingUseCase.addressUseCase(it) }\n                mappingUseCase.createUserUseCase(\n                    user = UserItem(\n                        id = getId(),\n                        name = getName(),\n                        address = fullAddress,\n                        profilePictureUrl = getPhotoUrl(),\n                        location = LocationModel(\n                            latitude = location.latitude,\n                            longitude = location.longitude\n                        ),\n                        rescueRequest = RescueRequest(),\n                        userAssistance = UserAssistanceModel(),\n                        rescuePending = RescuePending()\n                    )\n                )\n\n\n            }.onSuccess {\n                isLoading(false)\n                broadcastToNearbyCyclists()\n                onSuccess()\n                _state.update { it.copy(profileUploaded = true) }\n\n            }.onFailure { exception ->\n                Timber.e(\"Error uploading profile: ${exception.message}\")\n                isLoading(false)\n                exception.handleException()\n            }\n        }\n    }\n\n\n    private suspend fun Throwable.handleException() {\n        trackingHandler.handleException(this)\n        savedStateHandle[MAPPING_VM_STATE_KEY] = state.value\n    }\n\n\n    private suspend fun createMockUpUsers() {\n        runCatching {\n            mappingUseCase.createMockUsers()\n        }.onSuccess {\n            Timber.v(\"CREATED MOCK USERS!\")\n            broadcastToNearbyCyclists()\n        }.onFailure {\n            Timber.e(\"FAILED TO CREATE MOCK USERS: ${it.message}\")\n        }\n    }\n\n    private fun removeBottomSheet() {\n        viewModelScope.launch(SupervisorJob()) {\n            mappingUseCase.bottomSheetTypeUseCase(bottomSheet = \"\")\n        }\n    }\n\n\n    override fun onCleared() {\n        super.onCleared()\n        removeBottomSheet()\n        unSubscribeToLocationUpdates()\n        removeHazardousLaneListener()\n\n\n    }\n\n\n    private fun getId(): String = authUseCase.getIdUseCase()\n\n    private suspend fun getName(): String = userProfileUseCase.getNameUseCase()\n\n    private suspend fun getPhotoUrl() = userProfileUseCase.getPhotoUrlUseCase()\n\n    private fun clearTravelledPath() {\n        travelledPath = mutableListOf()\n    }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingViewModel.kt	(date 1698333040664)
@@ -6,7 +6,6 @@
 import androidx.lifecycle.viewModelScope
 import com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_RADIUS
 import com.example.cyclistance.core.utils.constants.MappingConstants.MAPPING_VM_STATE_KEY
-import com.example.cyclistance.core.utils.constants.MappingConstants.NEAREST_METERS
 import com.example.cyclistance.core.utils.formatter.FormatterUtils
 import com.example.cyclistance.core.utils.formatter.FormatterUtils.formatToDistanceKm
 import com.example.cyclistance.core.utils.formatter.FormatterUtils.isLocationAvailable
@@ -41,6 +40,7 @@
 import com.mapbox.mapboxsdk.geometry.LatLng
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.CoroutineDispatcher
+import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.Job
 import kotlinx.coroutines.SupervisorJob
 import kotlinx.coroutines.coroutineScope
@@ -178,8 +178,7 @@
 
     private fun loadData() {
         viewModelScope.launch(SupervisorJob() + defaultDispatcher) {
-            // TODO: Remove when the backend is ready
-            createMockUpUsers()
+//            createMockUpUsers()
             trackingHandler.updateClient()
 
         }
@@ -200,12 +199,13 @@
                 coroutineScope {
                     runCatching {
                         isLoading(true)
-                        trackingHandler.getAcceptedRescueRequestItem(
+
+                        mappingUseCase.acceptRescueRequestUseCase(
                             transactionId = transactionId,
-                            rescuer = rescuer
-                        ).apply {
-                            mappingUseCase.acceptRescueRequestUseCase(rescueTransaction = this)
-                        }
+                            rescuer = rescuer,
+                            user = state.value.user
+                        )
+
 
                     }.onSuccess { rescueTransaction ->
                         broadcastRescueTransaction()
@@ -508,11 +508,29 @@
                 clearTravelledPath()
             }
 
+            MappingVmEvent.ArrivedAtLocation -> {
+                arrivedAtLocation()
+            }
         }
         savedStateHandle[MAPPING_VM_STATE_KEY] = state.value
     }
 
 
+    private fun arrivedAtLocation(){
+        viewModelScope.launch(Dispatchers.IO){
+            runCatching {
+                val transactionId = state.value.getTransactionId()
+                mappingUseCase.rescueFinishUseCase(transactionId = transactionId)
+            }.onSuccess {
+                Timber.v("Successfully finished rescue transaction")
+                broadcastRescueTransaction()
+            }.onFailure {
+                Timber.e("Failed to finish rescue transaction ${it.message}")
+                it.handleException()
+            }
+        }
+    }
+
     private fun rescuerArrived() {
         val role = state.value.user.getRole()
         viewModelScope.launch(SupervisorJob() + defaultDispatcher) {
@@ -718,34 +736,6 @@
             }
     }
 
-    private suspend fun LiveLocationSocketModel.updateTransactionDistance() {
-        coroutineScope {
-            val transaction = state.value.user.transaction
-            val rescueLocation = state.value.userLocation
-
-
-            if (transaction?.transactionId?.isEmpty() == true) {
-                return@coroutineScope
-            }
-
-            latitude ?: return@coroutineScope
-            longitude ?: return@coroutineScope
-
-            rescueLocation?.let { location ->
-
-                val distance = mappingUseCase.getCalculatedDistanceUseCase(
-                    startingLocation = LocationModel(latitude, longitude),
-                    destinationLocation = LocationModel(location.latitude, location.longitude)
-                ).toInt()
-
-
-                if (distance <= NEAREST_METERS) {
-                    _eventFlow.emit(value = MappingEvent.DestinationReached)
-                }
-
-            }
-        }
-    }
 
 
     private fun LiveLocationSocketModel.updateTransactionETA() {
@@ -767,7 +757,7 @@
                 longitude = this.longitude
             ),
             destinationLocation = userLocation)
-        _state.update { it.copy(rescueETA = eta, rescueDistance = distance.formatToDistanceKm()) }
+        _state.update { it.copy(rescueETA = eta, rescueDistance = distance) }
     }
 
     private fun getETABetweenTwoPoints(
@@ -828,7 +818,7 @@
             it.copy(
                 rescueTransaction = rescueTransaction,
                 rescueETA = estimatedTimeArrival ?: "",
-                rescueDistance = distance?.formatToDistanceKm() ?: "",
+                rescueDistance = distance ?: 0.0,
                 rescuer = rescuer
             )
         }
@@ -1023,13 +1013,18 @@
 
     private fun updateSpeedometer(location: LocationModel) {
         val isUserRescuer = state.value.user.isRescuer()
-        if (isUserRescuer) {
-            trackingHandler.setSpeed(location.speed)
-            trackingHandler.getTopSpeed(location.speed)
-            travelledPath.add(element = GoogleLatLng(location.latitude!!, location.longitude!!))
-            val distance = SphericalUtil.computeLength(travelledPath).formatToDistanceKm()
-            trackingHandler.setTravelledDistance(distance)
-        }
+        if (!isUserRescuer) {
+            return
+        }
+
+        val distance = SphericalUtil.computeLength(travelledPath)
+
+
+        trackingHandler.setSpeed(location.speed)
+        trackingHandler.getTopSpeed(location.speed)
+        travelledPath.add(element = GoogleLatLng(location.latitude!!, location.longitude!!))
+
+        trackingHandler.setTravelledDistance(distance.formatToDistanceKm())
     }
 
 
@@ -1089,15 +1084,16 @@
             return
         }
 
-        val fullAddress = mappingUseCase.getFullAddressUseCase(
-            latitude = location.latitude,
-            longitude = location.longitude
-        )
+        coroutineScope {
+
+            runCatching {
+                isLoading(true)
+
+                val fullAddress = mappingUseCase.getFullAddressUseCase(
+                    latitude = location.latitude,
+                    longitude = location.longitude
+                )
 
-        coroutineScope {
-
-            runCatching {
-                isLoading(true)
                 fullAddress?.let { mappingUseCase.addressUseCase(it) }
                 mappingUseCase.createUserUseCase(
                     user = UserItem(
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.use_case\n\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.AddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.BikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bottom_sheet_type.BottomSheetTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.DeleteHazardousLaneUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.NewHazardousLaneUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.RemoveHazardousListenerUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.ShouldHazardousStartingInfoUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.UpdateHazardousLaneUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.intent_action.IntentActionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetCalculatedDistanceUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetFullAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetUserLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.map_type.MapTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.notification.NewRescueRequestNotificationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.notification.RequestAcceptedNotificationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.AcceptRescueRequestUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.AddRescueRespondentUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.CancelHelpRespondUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.ConfirmDetailsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.CreateUserUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteAllRespondentsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteRescueRespondentUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteUserUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.GetUserByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.TransactionLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.BroadcastRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.GetRescueTransactionUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.NearbyCyclistsUseCase\n\ndata class MappingUseCase(\n\n\n\n    val getUserByIdUseCase: GetUserByIdUseCase,\n    val createUserUseCase: CreateUserUseCase,\n    val confirmDetailsUseCase: ConfirmDetailsUseCase,\n    val deleteUserUseCase: DeleteUserUseCase,\n    val deleteRescueRespondentUseCase: DeleteRescueRespondentUseCase,\n    val addRescueRespondentUseCase: AddRescueRespondentUseCase,\n    val deleteAllRespondentsUseCase: DeleteAllRespondentsUseCase,\n    val cancelHelpRespondUseCase: CancelHelpRespondUseCase,\n\n    val getRescueTransactionByIdUseCase: GetRescueTransactionByIdUseCase,\n    val acceptRescueRequestUseCase: AcceptRescueRequestUseCase,\n    val deleteRescueTransactionUseCase: DeleteRescueTransactionUseCase,\n    val confirmCancellationUseCase: ConfirmCancellationUseCase,\n\n    val getUserLocationUseCase: GetUserLocationUseCase,\n    val getFullAddressUseCase: GetFullAddressUseCase,\n\n\n    val bikeTypeUseCase: BikeTypeUseCase,\n    val addressUseCase: AddressUseCase,\n    val bottomSheetTypeUseCase: BottomSheetTypeUseCase,\n\n    val broadcastRescueTransactionUseCase: BroadcastRescueTransactionUseCase,\n    val nearbyCyclistsUseCase: NearbyCyclistsUseCase,\n    val transactionLocationUseCase: TransactionLocationUseCase,\n    val getRescueTransactionUpdatesUseCase: GetRescueTransactionUpdatesUseCase,\n    val getRouteDirectionsUseCase: GetRouteDirectionsUseCase,\n    val getCalculatedDistanceUseCase: GetCalculatedDistanceUseCase,\n    val newHazardousLaneUseCase: NewHazardousLaneUseCase,\n    val removeHazardousListenerUseCase: RemoveHazardousListenerUseCase,\n    val updateHazardousLaneUseCase: UpdateHazardousLaneUseCase,\n    val deleteHazardousLaneUseCase: DeleteHazardousLaneUseCase,\n\n    val shouldHazardousStartingInfoUseCase: ShouldHazardousStartingInfoUseCase,\n\n    val mapTypeUseCase: MapTypeUseCase,\n\n    val newRescueRequestNotificationUseCase: NewRescueRequestNotificationUseCase,\n    val requestAcceptedNotificationUseCase: RequestAcceptedNotificationUseCase,\n    val intentActionUseCase: IntentActionUseCase\n    )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/use_case/MappingUseCase.kt	(date 1698333040664)
@@ -19,6 +19,7 @@
 import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase
+import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.RescueFinishUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.user.AddRescueRespondentUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.user.CancelHelpRespondUseCase
@@ -50,6 +51,7 @@
     val acceptRescueRequestUseCase: AcceptRescueRequestUseCase,
     val deleteRescueTransactionUseCase: DeleteRescueTransactionUseCase,
     val confirmCancellationUseCase: ConfirmCancellationUseCase,
+    val rescueFinishUseCase: RescueFinishUseCase,
 
     val getUserLocationUseCase: GetUserLocationUseCase,
     val getFullAddressUseCase: GetFullAddressUseCase,
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingUiEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event\n\nimport androidx.compose.ui.text.input.TextFieldValue\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.maps.MapboxMap\n\nsealed class MappingUiEvent {\n\n    // General Events\n    data object RequestHelp : MappingUiEvent()\n    data object RespondToHelp : MappingUiEvent()\n    data object CancelRespondHelp : MappingUiEvent()\n    data object DestinationArrived : MappingUiEvent()\n    data object CancelSearching : MappingUiEvent()\n    data object SearchCancelled : MappingUiEvent()\n    data object ChatRescueTransaction : MappingUiEvent()\n    data object CancelRescueTransaction : MappingUiEvent()\n    data object CancelledRescueConfirmed : MappingUiEvent()\n\n    data object OnMapClick : MappingUiEvent()\n    data object DismissBanner : MappingUiEvent()\n    data object LocateUser : MappingUiEvent()\n    data object RouteOverview : MappingUiEvent()\n    data object RecenterRoute : MappingUiEvent()\n    data object OpenNavigation : MappingUiEvent()\n    data object OpenSinoTrack : MappingUiEvent()\n    data object OnRequestNavigationCameraToOverview : MappingUiEvent()\n\n    data object OpenFamilyTracker : MappingUiEvent()\n\n    data object DiscardMarkerChanges : MappingUiEvent()\n    data object CancelEditIncidentDescription : MappingUiEvent()\n    data object OnAddEmergencyContact : MappingUiEvent()\n    data object OnClickDeleteIncident : MappingUiEvent()\n    data object OnConfirmDeleteIncident : MappingUiEvent()\n    data object OnClickHazardousInfoGotIt : MappingUiEvent()\n    data object DismissIncidentDescriptionBottomSheet : MappingUiEvent()\n    data object RescueRequestAccepted : MappingUiEvent()\n    data object CancelOnGoingRescue : MappingUiEvent()\n    data class  MapTypeBottomSheet(val visibility: Boolean) : MappingUiEvent()\n\n    // Events with Parameters\n\n    data class NotifyNewRescueRequest(val message: String) : MappingUiEvent()\n    data class NotifyRequestAccepted(val message: String) : MappingUiEvent()\n    data class HazardousLaneMarkerDialog(val visibility: Boolean) : MappingUiEvent()\n    data class DiscardChangesMarkerDialog(val visibility: Boolean) : MappingUiEvent()\n    data class CancelSearchDialog(val visibility: Boolean) : MappingUiEvent()\n    data class CancelOnGoingRescueDialog(val visibility: Boolean) : MappingUiEvent()\n    data class NoInternetDialog(val visibility: Boolean) : MappingUiEvent()\n    data class LocationPermission(val visibility: Boolean) : MappingUiEvent()\n    data class ExpandableFab(val expanded: Boolean) : MappingUiEvent()\n    data class EmergencyCallDialog(val visibility: Boolean) : MappingUiEvent()\n    data class RescueRequestDialog(val visibility: Boolean) : MappingUiEvent()\n    data class AlertDialog(val alertDialogState: AlertDialogState = AlertDialogState()): MappingUiEvent()\n    data class NotificationPermissionDialog(val visibility: Boolean) : MappingUiEvent()\n    data class OnInitializeMap(val mapboxMap: MapboxMap) : MappingUiEvent()\n    data class OnMapLongClick(val latLng: LatLng) : MappingUiEvent()\n    data class OnReportIncident(val labelIncident: String) : MappingUiEvent()\n    data class OnEmergencyCall(val phoneNumber: String) : MappingUiEvent()\n    data class OnSelectMapType(val mapType: String) : MappingUiEvent()\n    data class DeclineRequestHelp(val id: String) : MappingUiEvent()\n    data class ConfirmRequestHelp(val id: String) : MappingUiEvent()\n    data class ViewProfile(val id: String) : MappingUiEvent()\n    data class UpdateIncidentDescription(val label: String, val description: String) :\n        MappingUiEvent()\n\n    data class OnChangeIncidentDescription(val description: TextFieldValue) : MappingUiEvent()\n    data class OnChangeIncidentLabel(val label: String) : MappingUiEvent()\n    data class OnClickEditIncidentDescription(val marker: HazardousLaneMarker) : MappingUiEvent()\n    data class OnClickMapMarker(val markerSnippet: String, val markerId: String) : MappingUiEvent()\n    data class OnChangeCameraState(val cameraState: CameraState) : MappingUiEvent()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingUiEvent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingUiEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingUiEvent.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingUiEvent.kt	(date 1698333040664)
@@ -13,7 +13,8 @@
     data object RequestHelp : MappingUiEvent()
     data object RespondToHelp : MappingUiEvent()
     data object CancelRespondHelp : MappingUiEvent()
-    data object DestinationArrived : MappingUiEvent()
+    data object ConfirmedDestinationArrived : MappingUiEvent()
+    data object ArrivedAtLocation : MappingUiEvent()
     data object CancelSearching : MappingUiEvent()
     data object SearchCancelled : MappingUiEvent()
     data object ChatRescueTransaction : MappingUiEvent()
Index: app/src/main/java/com/example/cyclistance/di/mapping/MappingViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.di.mapping\n\nimport androidx.core.app.NotificationCompat\nimport androidx.core.app.NotificationManagerCompat\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingRepository\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingSocketRepository\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingUiStoreRepository\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.AddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.BikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bottom_sheet_type.BottomSheetTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.DeleteHazardousLaneUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.NewHazardousLaneUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.RemoveHazardousListenerUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.ShouldHazardousStartingInfoUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.hazardous_lane.UpdateHazardousLaneUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.intent_action.IntentActionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetCalculatedDistanceUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetFullAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetUserLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.map_type.MapTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.notification.NewRescueRequestNotificationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.notification.RequestAcceptedNotificationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.AcceptRescueRequestUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.AddRescueRespondentUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.CancelHelpRespondUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.ConfirmDetailsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.CreateUserUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteAllRespondentsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteRescueRespondentUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.DeleteUserUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.GetUserByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.TransactionLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.BroadcastRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.GetRescueTransactionUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.NearbyCyclistsUseCase\nimport dagger.Module\nimport dagger.Provides\nimport dagger.hilt.InstallIn\nimport dagger.hilt.android.components.ViewModelComponent\nimport dagger.hilt.android.scopes.ViewModelScoped\nimport javax.inject.Named\n\n\n@Module\n@InstallIn(ViewModelComponent::class)\nobject MappingViewModelModule {\n\n\n    @Provides\n    @ViewModelScoped\n    fun provideMappingUseCase(\n        mappingRepository: MappingRepository,\n        mappingUiStoreRepository: MappingUiStoreRepository,\n        mappingSocketRepository: MappingSocketRepository,\n        notificationManagerCompat: NotificationManagerCompat,\n        @Named(\"newRescueNotification\") newRescueNotification: NotificationCompat.Builder,\n        @Named(\"requestAcceptedNotification\") requestAcceptedNotification: NotificationCompat.Builder,\n\n    ): MappingUseCase {\n        return MappingUseCase(\n\n            getUserByIdUseCase = GetUserByIdUseCase(mappingRepository),\n            createUserUseCase = CreateUserUseCase(mappingRepository),\n            deleteUserUseCase = DeleteUserUseCase(mappingRepository),\n\n            getRescueTransactionByIdUseCase = GetRescueTransactionByIdUseCase(mappingRepository),\n            acceptRescueRequestUseCase = AcceptRescueRequestUseCase(mappingRepository),\n            deleteRescueTransactionUseCase = DeleteRescueTransactionUseCase(mappingRepository),\n\n\n            getUserLocationUseCase = GetUserLocationUseCase(mappingRepository),\n            getFullAddressUseCase = GetFullAddressUseCase(mappingRepository),\n\n            bikeTypeUseCase = BikeTypeUseCase(mappingUiStoreRepository),\n            addressUseCase = AddressUseCase(mappingUiStoreRepository),\n            broadcastRescueTransactionUseCase = BroadcastRescueTransactionUseCase(\n                mappingSocketRepository),\n            nearbyCyclistsUseCase = NearbyCyclistsUseCase(mappingSocketRepository),\n            getRescueTransactionUpdatesUseCase = GetRescueTransactionUpdatesUseCase(\n                mappingSocketRepository),\n            transactionLocationUseCase = TransactionLocationUseCase(\n                mappingSocketRepository),\n            deleteRescueRespondentUseCase = DeleteRescueRespondentUseCase(mappingRepository),\n            addRescueRespondentUseCase = AddRescueRespondentUseCase(mappingRepository),\n            deleteAllRespondentsUseCase = DeleteAllRespondentsUseCase(mappingRepository),\n            confirmDetailsUseCase = ConfirmDetailsUseCase(mappingRepository),\n            confirmCancellationUseCase = ConfirmCancellationUseCase(mappingRepository),\n            getRouteDirectionsUseCase = GetRouteDirectionsUseCase(mappingRepository),\n            getCalculatedDistanceUseCase = GetCalculatedDistanceUseCase(mappingRepository),\n            bottomSheetTypeUseCase = BottomSheetTypeUseCase(mappingUiStoreRepository),\n            newHazardousLaneUseCase = NewHazardousLaneUseCase(mappingRepository),\n            deleteHazardousLaneUseCase = DeleteHazardousLaneUseCase(mappingRepository),\n            mapTypeUseCase = MapTypeUseCase(mappingUiStoreRepository),\n            removeHazardousListenerUseCase = RemoveHazardousListenerUseCase(mappingRepository),\n            updateHazardousLaneUseCase = UpdateHazardousLaneUseCase(mappingRepository),\n            shouldHazardousStartingInfoUseCase = ShouldHazardousStartingInfoUseCase(\n                mappingUiStoreRepository),\n            newRescueRequestNotificationUseCase = NewRescueRequestNotificationUseCase(\n                notificationManagerCompat = notificationManagerCompat,\n                notificationBuilder = newRescueNotification\n            ),\n            requestAcceptedNotificationUseCase = RequestAcceptedNotificationUseCase(\n                notificationManagerCompat = notificationManagerCompat,\n                notificationBuilder = requestAcceptedNotification\n            ),\n            cancelHelpRespondUseCase = CancelHelpRespondUseCase(mappingRepository),\n            intentActionUseCase = IntentActionUseCase(mappingUiStoreRepository)\n        )\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/di/mapping/MappingViewModelModule.kt b/app/src/main/java/com/example/cyclistance/di/mapping/MappingViewModelModule.kt
--- a/app/src/main/java/com/example/cyclistance/di/mapping/MappingViewModelModule.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/di/mapping/MappingViewModelModule.kt	(date 1698333040664)
@@ -25,6 +25,7 @@
 import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase
+import com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.RescueFinishUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.user.AddRescueRespondentUseCase
 import com.example.cyclistance.feature_mapping.domain.use_case.user.CancelHelpRespondUseCase
@@ -109,7 +110,8 @@
                 notificationBuilder = requestAcceptedNotification
             ),
             cancelHelpRespondUseCase = CancelHelpRespondUseCase(mappingRepository),
-            intentActionUseCase = IntentActionUseCase(mappingUiStoreRepository)
+            intentActionUseCase = IntentActionUseCase(mappingUiStoreRepository),
+            rescueFinishUseCase = RescueFinishUseCase(mappingRepository)
         )
 
     }
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport com.example.cyclistance.core.utils.formatter.IconFormatter.toHazardousLaneIconMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun MappingBottomSheet(\n    modifier: Modifier = Modifier,\n    state: MappingState,\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    markerPostedCount: Int,\n    event: (MappingUiEvent) -> Unit = {},\n    content: @Composable (PaddingValues) -> Unit,\n) {\n\n\n    val scope = rememberCoroutineScope()\n\n    val sheetGesturesEnabled = remember(uiState.bottomSheetType) {\n        uiState.bottomSheetType != BottomSheetType.SearchAssistance.type &&\n        uiState.bottomSheetType != BottomSheetType.DestinationReached.type &&\n        uiState.bottomSheetType != BottomSheetType.RescuerArrived.type &&\n        uiState.bottomSheetType != BottomSheetType.IncidentDescription.type\n    }\n\n    MappingBottomSheet(\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        sheetGesturesEnabled = sheetGesturesEnabled,\n        sheetPeekHeight = if(uiState.bottomSheetType == BottomSheetType.OnGoingRescue.type) 60.dp else 0.dp,\n        sheetContent = {\n\n            when (uiState.bottomSheetType) {\n\n                BottomSheetType.RescuerArrived.type -> {\n\n                    BottomSheetRescueArrived(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = {\n                            event(MappingUiEvent.DestinationArrived)\n                        })\n\n                }\n\n                BottomSheetType.DestinationReached.type -> {\n\n                    BottomSheetReachedDestination(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        onClickOkButton = {\n                            event(MappingUiEvent.DestinationArrived)\n                        })\n\n                }\n\n                BottomSheetType.ReportIncident.type -> {\n\n                    BottomSheetReportIncident(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        selectedLabel = uiState.selectedIncidentLabel,\n                        onClick = {\n                            event(MappingUiEvent.OnChangeIncidentLabel(it))\n                        }, onChangeDescription = {\n                            event(MappingUiEvent.OnChangeIncidentDescription(it))\n                        }, onClickConfirm = {\n                            event(MappingUiEvent.OnReportIncident(uiState.selectedIncidentLabel))\n                            scope.launch {\n                                bottomSheetScaffoldState.bottomSheetState.collapse()\n                            }\n                        }, incidentDescription = incidentDescription,\n                        markerPostedCount = markerPostedCount)\n\n                }\n\n                BottomSheetType.SearchAssistance.type -> {\n\n                    BottomSheetSearchingAssistance(\n                        modifier = modifier,\n                        onClickCancelSearchButton = {\n                            event(MappingUiEvent.CancelSearching)\n                        },\n                    )\n                }\n\n                BottomSheetType.OnGoingRescue.type -> {\n\n                    BottomSheetOnGoingRescue(\n                        modifier = modifier,\n                        onClickCallButton = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickChatButton = { event(MappingUiEvent.ChatRescueTransaction) },\n                        onClickCancelButton = { event(MappingUiEvent.CancelRescueTransaction) },\n                        role = state.user.transaction?.role ?: \"\",\n                        onGoingRescueModel = OnGoingRescueModel(\n                            estimatedTime = state.rescueETA,\n                            estimatedDistance = state.rescueDistance,\n                            currentSpeed = String.format(\n                                \"%.2f\",\n                                state.speedometerState.currentSpeedKph),\n                            ridingDistance = state.speedometerState.travelledDistance,\n                            maxSpeed = String.format(\"%.2f\", state.speedometerState.topSpeed)))\n\n                }\n\n                BottomSheetType.MapType.type -> {\n\n                    MapTypeBottomSheet(\n                        bottomSheetScaffoldState = bottomSheetScaffoldState,\n                        modifier = modifier,\n                        selectedMapType = state.mapType,\n                        onClickMapType = { event(MappingUiEvent.OnSelectMapType(it)) })\n\n                }\n\n                BottomSheetType.IncidentDescription.type -> {\n                    BottomSheetIncidentDescription(\n                        modifier = modifier,\n                        onDismissBottomSheet = { event(MappingUiEvent.DismissIncidentDescriptionBottomSheet) },\n                        uiState = uiState,\n                        state = state,\n                        icon = uiState.selectedHazardousMarker!!.label.toHazardousLaneIconMarker(),\n                        onClickEdit = { event(MappingUiEvent.OnClickEditIncidentDescription(uiState.selectedHazardousMarker)) },\n                        onClickDelete = { event(MappingUiEvent.OnClickDeleteIncident) },\n                        onClickCancelButton = { event(MappingUiEvent.CancelEditIncidentDescription) },\n                        onClickConfirmButton = { description, label ->\n                            event(\n                                MappingUiEvent.UpdateIncidentDescription(\n                                    label = label,\n                                    description = description))\n                        },\n                        onClickGotItButton = { event(MappingUiEvent.OnClickHazardousInfoGotIt) },\n                    )\n\n                }\n\n\n            }\n        }, content = content)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/MappingBottomSheet.kt	(date 1698333040664)
@@ -53,7 +53,7 @@
                         bottomSheetScaffoldState = bottomSheetScaffoldState,
                         modifier = modifier,
                         onClickOkButton = {
-                            event(MappingUiEvent.DestinationArrived)
+                            event(MappingUiEvent.ConfirmedDestinationArrived)
                         })
 
                 }
@@ -64,7 +64,7 @@
                         bottomSheetScaffoldState = bottomSheetScaffoldState,
                         modifier = modifier,
                         onClickOkButton = {
-                            event(MappingUiEvent.DestinationArrived)
+                            event(MappingUiEvent.ConfirmedDestinationArrived)
                         })
 
                 }
@@ -101,19 +101,25 @@
 
                 BottomSheetType.OnGoingRescue.type -> {
 
+                    val shouldShowArrivedLocation = remember(state.rescueDistance){
+                        state.rescueDistance != null && state.rescueDistance <= MappingConstants.DISTANCE_MIN
+                    }
+
                     BottomSheetOnGoingRescue(
                         modifier = modifier,
+                        shouldShowArrivedLocation = shouldShowArrivedLocation,
                         onClickCallButton = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },
                         onClickChatButton = { event(MappingUiEvent.ChatRescueTransaction) },
                         onClickCancelButton = { event(MappingUiEvent.CancelRescueTransaction) },
+                        onClickArrivedLocation = { event(MappingUiEvent.ArrivedAtLocation) },
                         role = state.user.transaction?.role ?: "",
                         onGoingRescueModel = OnGoingRescueModel(
                             estimatedTime = state.rescueETA,
-                            estimatedDistance = state.rescueDistance,
+                            estimatedDistance = state.rescueDistance?.formatToDistanceKm(),
                             currentSpeed = String.format(
                                 "%.2f",
                                 state.speedometerState.currentSpeedKph),
-                            ridingDistance = state.speedometerState.travelledDistance,
+                            ridingDistance = state.speedometerState.travelledDistance.formatToDistanceKm(),
                             maxSpeed = String.format("%.2f", state.speedometerState.topSpeed)))
 
                 }
Index: app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/ui/bottomSheet/OnGoingRescueModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport kotlinx.parcelize.Parcelize\n\n@StableState\n@Parcelize\ndata class OnGoingRescueModel(\n    val currentSpeed: String = \"\",\n    val ridingDistance: String = \"\",\n    val maxSpeed: String = \"\",\n    val estimatedTime: String = \"\",\n    val estimatedDistance: String = \"\",\n\n    ) : Parcelable\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/ui/bottomSheet/OnGoingRescueModel.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/ui/bottomSheet/OnGoingRescueModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/ui/bottomSheet/OnGoingRescueModel.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/domain/model/ui/bottomSheet/OnGoingRescueModel.kt	(date 1698333040664)
@@ -11,6 +11,6 @@
     val ridingDistance: String = "",
     val maxSpeed: String = "",
     val estimatedTime: String = "",
-    val estimatedDistance: String = "",
+    val estimatedDistance: String? = "",
 
     ) : Parcelable
Index: app/src/main/java/com/example/cyclistance/feature_rescue_record/presentation/rescue_results/RescueResultViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_rescue_record.presentation.rescue_results\n\nimport androidx.lifecycle.SavedStateHandle\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.cyclistance.core.utils.constants.RescueRecordConstants.RESCUE_RESULT_VM_STATE_KEY\nimport com.example.cyclistance.feature_rescue_record.domain.use_case.RescueRecordUseCase\nimport com.example.cyclistance.feature_rescue_record.presentation.rescue_results.event.RescueResultEvent\nimport com.example.cyclistance.feature_rescue_record.presentation.rescue_results.event.RescueResultVmEvent\nimport com.example.cyclistance.feature_rescue_record.presentation.rescue_results.state.RescueResultState\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport javax.inject.Inject\n\n@HiltViewModel\nclass RescueResultViewModel @Inject constructor(\n    private val savedStateHandle: SavedStateHandle,\n    private val rescueRecordUseCase: RescueRecordUseCase\n\n): ViewModel() {\n\n    private val _state = MutableStateFlow(\n        savedStateHandle[RESCUE_RESULT_VM_STATE_KEY] ?: RescueResultState())\n    val state = _state.asStateFlow()\n\n    private val _eventFlow = MutableSharedFlow<RescueResultEvent>()\n    val eventFlow = _eventFlow.asSharedFlow()\n\n\n\n    init {\n        loadRideDetails()\n    }\n\n    private fun loadRideDetails(){\n        viewModelScope.launch {\n            rescueRecordUseCase.rescueDetailsUseCase().collect{ rideDetails ->\n                _state.update { it.copy(rideDetails = rideDetails) }\n            }\n            saveState()\n        }\n    }\n\n    private fun saveState(){\n        savedStateHandle[RESCUE_RESULT_VM_STATE_KEY] = state.value\n    }\n    fun onEvent(event: RescueResultVmEvent){\n        when(event){\n            is RescueResultVmEvent.RateRescuer -> {\n                rateRescuer(event.rating)\n            }\n        }\n        saveState()\n    }\n\n    private fun rateRescuer(rating: Float) {\n        viewModelScope.launch(SupervisorJob() + Dispatchers.IO) {\n            runCatching {\n                val validRating = rating.coerceIn(1f, 5f)\n\n                val rideDetails = state.value.rideDetails\n\n                rescueRecordUseCase.rateRescueUseCase(\n                    rescueId = rideDetails.rideId,\n                    rating = validRating.toDouble(),\n                    ratingText = ratingToDescription(validRating)\n                )\n            }.onSuccess {\n                _eventFlow.emit(value = RescueResultEvent.RatingSuccess)\n            }.onFailure {\n                _eventFlow.emit(value = RescueResultEvent.RatingFailed(message = it.message!!))\n            }\n\n        }\n    }\n    private fun ratingToDescription(rating: Float): String {\n        return when (rating) {\n            in 0.0f..1.0f -> \"Poor\"\n            in 1.1f..2.0f -> \"Bad\"\n            in 2.1f..3.0f -> \"Fair\"\n            in 3.1f..4.0f -> \"Good\"\n            in 4.1f..5.0f -> \"Excellent\"\n            else -> \"Good\"\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_rescue_record/presentation/rescue_results/RescueResultViewModel.kt b/app/src/main/java/com/example/cyclistance/feature_rescue_record/presentation/rescue_results/RescueResultViewModel.kt
--- a/app/src/main/java/com/example/cyclistance/feature_rescue_record/presentation/rescue_results/RescueResultViewModel.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_rescue_record/presentation/rescue_results/RescueResultViewModel.kt	(date 1698333040664)
@@ -77,7 +77,7 @@
             }.onFailure {
                 _eventFlow.emit(value = RescueResultEvent.RatingFailed(message = it.message!!))
             }
-
+            saveState()
         }
     }
     private fun ratingToDescription(rating: Float): String {
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.Activity.RESULT_OK\nimport android.os.Build\nimport android.view.WindowManager\nimport android.widget.Toast\nimport androidx.activity.compose.BackHandler\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.animation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavController\nimport com.example.cyclistance.MainViewModel\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.utils.app.AppUtils\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.checkLocationSetting\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasGPSConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ACTION_START_FOREGROUND\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ACTION_STOP_FOREGROUND\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_ACTION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LATITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.DEFAULT_LONGITUDE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.FAST_CAMERA_ANIMATION_DURATION\nimport com.example.cyclistance.core.utils.constants.MappingConstants.LOCATE_USER_ZOOM_LEVEL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.ROUTE_SOURCE_ID\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUEE_TYPE\nimport com.example.cyclistance.core.utils.constants.MappingConstants.SELECTION_RESCUER_TYPE\nimport com.example.cyclistance.core.utils.contexts.callPhoneNumber\nimport com.example.cyclistance.core.utils.contexts.shareLocation\nimport com.example.cyclistance.core.utils.contexts.startLocationServiceIntentAction\nimport com.example.cyclistance.core.utils.permissions.requestPermission\nimport com.example.cyclistance.feature_authentication.domain.util.findActivity\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.EmergencyCallViewModel\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.event.EmergencyCallVmEvent\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.camera.CameraState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.*\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingVmEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.animateCameraPosition\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.changeToNormalPuckIcon\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MappingUtils.openNavigationApp\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MarkerSnippet\nimport com.example.cyclistance.navigation.Screens\nimport com.example.cyclistance.navigation.nav_graph.navigateScreen\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.isGranted\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.google.accompanist.permissions.rememberPermissionState\nimport com.mapbox.core.constants.Constants.PRECISION_6\nimport com.mapbox.geojson.Feature\nimport com.mapbox.geojson.FeatureCollection\nimport com.mapbox.geojson.LineString\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.location.LocationComponentActivationOptions\nimport com.mapbox.mapboxsdk.location.modes.CameraMode\nimport com.mapbox.mapboxsdk.location.modes.RenderMode\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.style.sources.GeoJsonSource\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.launch\nimport timber.log.Timber\n\n\n@SuppressLint(\"MissingPermission\")\n@OptIn(ExperimentalMaterialApi::class)\n@ExperimentalPermissionsApi\n@Composable\nfun MappingScreen(\n    hasInternetConnection: Boolean,\n    mappingViewModel: MappingViewModel = hiltViewModel(),\n    emergencyViewModel: EmergencyCallViewModel = hiltViewModel(),\n    mainViewModel: MainViewModel = hiltViewModel(),\n    paddingValues: PaddingValues,\n    isNavigating: Boolean,\n    onChangeNavigatingState: (isNavigating: Boolean) -> Unit,\n    navController: NavController) {\n\n\n    val context = LocalContext.current\n    val state by mappingViewModel.state.collectAsStateWithLifecycle()\n    val mainState by mainViewModel.state.collectAsStateWithLifecycle()\n    val hazardousMarkers = mappingViewModel.hazardousLaneMarkers\n    val emergencyState by emergencyViewModel.state.collectAsStateWithLifecycle()\n    val coroutineScope = rememberCoroutineScope()\n\n    var uiState by rememberSaveable { mutableStateOf(MappingUiState()) }\n    var cameraState by rememberSaveable { mutableStateOf(CameraState()) }\n    val locationComponentOptions = MappingUtils.rememberLocationComponentOptions()\n    var mapboxMap by remember<MutableState<MapboxMap?>> {\n        mutableStateOf(null)\n    }\n\n    var incidentDescription by rememberSaveable(stateSaver = TextFieldValue.Saver) {\n        mutableStateOf(TextFieldValue())\n    }\n\n    val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n        bottomSheetState = rememberBottomSheetState(\n            initialValue = BottomSheetValue.Collapsed,\n            confirmStateChange = { false })\n    )\n\n    val collapseBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n                    bottomSheetScaffoldState.bottomSheetState.collapse()\n                }\n            }\n        }\n    }\n\n    val expandBottomSheet = remember {\n        {\n            coroutineScope.launch {\n                if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) {\n                    bottomSheetScaffoldState.bottomSheetState.expand()\n                }\n            }\n        }\n    }\n\n    val settingResultRequest = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.StartIntentSenderForResult()\n    ) { activityResult ->\n        if (activityResult.resultCode == RESULT_OK) {\n            context.startLocationServiceIntentAction()\n            Timber.d(\"GPS Setting Request Accepted\")\n            return@rememberLauncherForActivityResult\n        }\n        Timber.d(\"GPS Setting Request Denied\")\n    }\n\n    fun requestHelp() {\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(\n                onDisabled = settingResultRequest::launch,\n                onEnabled = {\n                    mappingViewModel.onEvent(\n                        event = MappingVmEvent.RequestHelp)\n\n                })\n        } else {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.RequestHelp)\n\n        }\n    }\n\n    val foregroundLocationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            Manifest.permission.ACCESS_FINE_LOCATION,\n            Manifest.permission.ACCESS_COARSE_LOCATION))\n\n\n    val userLocationAvailable by remember(\n        foregroundLocationPermissionsState.allPermissionsGranted,\n        state.userLocation) {\n        derivedStateOf {\n            foregroundLocationPermissionsState.allPermissionsGranted.and(state.userLocation != null)\n        }\n    }\n\n\n    val pulsingEnabled by remember(\n        uiState.searchingAssistance,\n        foregroundLocationPermissionsState.allPermissionsGranted\n    ) {\n        derivedStateOf { uiState.searchingAssistance.and(foregroundLocationPermissionsState.allPermissionsGranted) }\n    }\n\n\n    val showUserLocation = remember(mapboxMap, isNavigating, userLocationAvailable) {\n        {\n            mapboxMap?.style?.let { style ->\n\n                val buildLocationComponentActivationOptions =\n                    LocationComponentActivationOptions.builder(context, style)\n                        .locationComponentOptions(\n                            locationComponentOptions\n                                .changeToNormalPuckIcon(context)\n                                .pulseEnabled(pulsingEnabled)\n                                .build())\n                        .build()\n                mapboxMap?.locationComponent?.apply {\n                    activateLocationComponent(buildLocationComponentActivationOptions)\n                    isLocationComponentEnabled = userLocationAvailable\n                    cameraMode = CameraMode.NONE\n                    renderMode = RenderMode.NORMAL\n                }\n            }\n            Unit\n        }\n    }\n\n\n    val locateUser =\n        remember(userLocationAvailable, mapboxMap) {\n            { zoomLevel: Double, latLng: LatLng, cameraAnimationDuration: Int ->\n\n                val mapboxLoaded =\n                    (mapboxMap?.locationComponent != null) && (mapboxMap?.style?.isFullyLoaded\n                                                               ?: false)\n                if (userLocationAvailable && mapboxLoaded) {\n                    showUserLocation()\n                    mapboxMap?.animateCameraPosition(\n                        latLng = latLng,\n                        zoomLevel = zoomLevel,\n                        cameraAnimationDuration = cameraAnimationDuration)\n                }\n            }\n        }\n\n\n    val onInitializeMapboxMap = remember {\n        { mbm: MapboxMap ->\n            if (mapboxMap == null) {\n                mapboxMap = mbm\n            }\n        }\n    }\n\n\n    val onRequestHelp = remember {\n        {\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    context.startLocationServiceIntentAction()\n                    requestHelp()\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n\n    val notificationPermissionDialogVisibility = remember {\n        { visible: Boolean ->\n            uiState = uiState.copy(notificationPermissionVisible = visible)\n        }\n    }\n\n    val respondToHelp = remember {\n        {\n            uiState.mapSelectedRescuee?.let {\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.RespondToHelp(\n                        selectedRescuee = it\n                    ))\n            }\n            Unit\n        }\n    }\n    val notificationLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission(),\n        onResult = {\n            if (uiState.mapSelectedRescuee == null) {\n                onRequestHelp()\n            } else {\n                respondToHelp()\n            }\n        }\n    )\n    val notificationPermissionState = rememberPermissionState(\n        permission = Manifest.permission.POST_NOTIFICATIONS\n    ) { permissionGranted ->\n        if (permissionGranted) {\n            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n        }\n\n    }\n\n    val startRequestingHelp = remember {\n        {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                notificationPermissionState.requestPermission(onGranted = {\n                    notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n                }, onExplain = {\n                    notificationPermissionDialogVisibility(true)\n                }, onDenied = {\n                    onRequestHelp()\n                })\n            } else {\n                onRequestHelp()\n            }\n        }\n    }\n\n\n    val showRouteDirection = remember(uiState.routeDirection?.geometry, mapboxMap) {\n        {\n\n            uiState.routeDirection?.geometry?.let { geometry ->\n\n                mapboxMap?.getStyle { style ->\n                    if (style.isFullyLoaded.not()) {\n                        return@getStyle\n                    }\n                    if (geometry.isEmpty()) {\n                        return@getStyle\n                    }\n\n                    val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                    routeLineSource!!.setGeoJson(\n                        FeatureCollection.fromFeature(\n                            Feature.fromGeometry(\n                                LineString.fromPolyline(geometry, PRECISION_6))))\n                }\n            }\n            Unit\n        }\n    }\n\n    val removeRouteDirection = remember(mapboxMap, uiState.routeDirection) {\n        {\n            mapboxMap?.getStyle { style ->\n\n                if (style.isFullyLoaded.not()) {\n                    return@getStyle\n                }\n\n                val routeLineSource = style.getSourceAs<GeoJsonSource>(ROUTE_SOURCE_ID)\n                routeLineSource?.setGeoJson(FeatureCollection.fromFeatures(arrayOf()))\n            }\n            Unit\n        }\n    }\n\n\n    val onLocateUser = remember(uiState.routeDirection, mapboxMap) {\n        {\n\n            foregroundLocationPermissionsState.requestPermission(\n                onGranted = {\n                    if (!context.hasGPSConnection()) {\n                        context.checkLocationSetting(\n                            onDisabled = settingResultRequest::launch)\n                    }\n\n\n                    state.userLocation?.let {\n                        it.latitude ?: return@let\n                        it.longitude ?: return@let\n                        val point = LatLng(it.latitude, it.longitude)\n                        locateUser(\n                            LOCATE_USER_ZOOM_LEVEL,\n                            point,\n                            DEFAULT_CAMERA_ANIMATION_DURATION)\n\n                    }\n\n                }, onExplain = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                }, onDenied = {\n                    uiState = uiState.copy(locationPermissionDialogVisible = true)\n                })\n        }\n    }\n\n    val changeCameraMode = remember {\n        { mode: Int ->\n            mapboxMap?.locationComponent?.apply {\n                if (isLocationComponentActivated) {\n                    cameraMode = mode\n                }\n            }\n        }\n    }\n\n    val routeOverView = remember {\n        {\n            changeCameraMode(CameraMode.TRACKING)\n\n        }\n    }\n\n    val onLocateUserButton = remember(uiState.routeDirection) {\n        {\n            if (uiState.routeDirection != null) {\n                routeOverView()\n            }\n            onLocateUser()\n        }\n    }\n\n    val recenterRoute = remember {\n        {\n            changeCameraMode(CameraMode.TRACKING_GPS)\n        }\n    }\n\n    val openNavigationApp = remember(state.rescueTransaction?.route) {\n        {\n            val rescueTransaction = state.rescueTransaction\n            rescueTransaction?.let {\n                val latitude = it.getDestinationLatitude() ?: return@let\n                val longitude = it.getDestinationLongitude() ?: return@let\n                context.openNavigationApp(latitude = latitude, longitude = longitude)\n            }\n\n        }\n    }\n\n\n    val onClickOpenNavigationButton = remember {\n        {\n            openNavigationApp()\n        }\n    }\n\n    val cancelSearchingAssistance = remember {\n        {\n            coroutineScope.launch {\n                collapseBottomSheet()\n            }.invokeOnCompletion {\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelSearchingAssistance)\n                uiState = uiState.copy(searchingAssistance = false)\n            }\n            Unit\n        }\n    }\n    val onChangeCameraPosition = remember {\n        { _cameraState: CameraState ->\n            cameraState = _cameraState\n        }\n    }\n\n\n    DisposableEffect(key1 = true) {\n        onDispose {\n            val camera = mapboxMap?.cameraPosition\n            val cameraCenter = camera?.target ?: LatLng(\n                DEFAULT_LATITUDE,\n                DEFAULT_LONGITUDE,\n            )\n            val cameraZoom = camera?.zoom\n            onChangeCameraPosition(\n                CameraState(\n                    position = cameraCenter,\n                    zoom = cameraZoom ?: 0.0\n                ))\n        }\n    }\n\n    val cancelOnGoingRescue = remember(state.rescuer, state.rescueTransaction) {\n        {\n            val role = state.user.transaction?.role\n            val isRescuee = role == Role.Rescuee.name\n            val transactionId = state.rescueTransaction?.id\n            val selectionType = if (isRescuee) SELECTION_RESCUEE_TYPE else SELECTION_RESCUER_TYPE\n            val clientId = state.rescuer?.id ?: state.rescuee?.id\n\n            navController.navigateScreen(\n                route = Screens.MappingNavigation.Cancellation.passArgument(\n                    cancellationType = selectionType,\n                    transactionId = transactionId!!,\n                    clientId = clientId!!))\n\n        }\n    }\n\n    val noInternetDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                isNoInternetVisible = visibility\n            )\n        }\n    }\n\n    val hasTransaction = remember(key1 = state.rescueTransaction, key2 = state.user.transaction) {\n        state.getTransactionId().isNotEmpty()\n    }\n\n    val isRescueCancelled =\n        remember(state.rescueTransaction) {\n            (state.rescueTransaction?.cancellation)?.rescueCancelled == true\n        }\n\n    fun getConversationSelectedId(): String? {\n        val transaction = state.rescueTransaction\n        val rescueeId = transaction?.rescueeId\n        val rescuerId = transaction?.rescuerId\n        val userId = state.userId\n        val isUserRescuee = userId == rescueeId\n        val id = if (isUserRescuee) rescuerId else rescueeId\n        id ?: Toast.makeText(context, \"No current transaction\", Toast.LENGTH_SHORT).show()\n\n        return id\n    }\n\n    val onClickChatButton = remember(state.rescueTransaction, state.user.getRole()) {\n        {\n            getConversationSelectedId()?.let { id ->\n                navController.navigateScreen(\n                    route = Screens.MessagingNavigation.Conversation.passArgument(\n                        receiverMessageId = id)\n                )\n            }\n        }\n    }\n\n    val onRequestNavigationCameraToOverview = remember(mapboxMap) {\n        {\n            val locationComponent = mapboxMap?.locationComponent\n            locationComponent?.cameraMode = CameraMode.TRACKING\n        }\n    }\n\n    val destinationReached = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.DestinationArrived)\n        }\n    }\n\n    val onClickOkCancelledRescue = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.CancelRescueTransaction)\n        }\n    }\n\n    val onDismissRescueeBanner = remember {\n        {\n            val isRescueeBannerVisible = uiState.mapSelectedRescuee != null\n            if (isRescueeBannerVisible) {\n                uiState = uiState.copy(\n                    mapSelectedRescuee = null,\n                    requestHelpButtonVisible = true\n                )\n            }\n        }\n    }\n\n\n    val expandableFab = remember {\n        { expanded: Boolean ->\n            uiState = uiState.copy(\n                isFabExpanded = expanded\n            )\n        }\n    }\n\n\n    fun checkIfHasEditingMarker(noMarkerCurrentlyEditing: () -> Unit) {\n        val isCurrentlyEditing = uiState.currentlyEditingHazardousMarker != null\n        if (isCurrentlyEditing) {\n            uiState = uiState.copy(discardHazardousMarkerDialogVisible = true)\n            return\n        }\n        if (uiState.bottomSheetType == BottomSheetType.SearchAssistance.type) {\n            return\n        }\n        noMarkerCurrentlyEditing()\n    }\n\n\n    val onMapMarkerClick = remember {\n        { snippet: String, id: String ->\n            if (snippet == MarkerSnippet.HazardousLaneSnippet.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    mappingViewModel.onEvent(event = MappingVmEvent.SelectHazardousLaneMarker(id))\n                })\n            } else {\n                collapseBottomSheet()\n                mappingViewModel.onEvent(event = MappingVmEvent.SelectRescueMapIcon(id))\n            }\n        }\n    }\n\n    val hazardousLaneMarkerDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                deleteHazardousMarkerDialogVisible = visibility\n            )\n        }\n    }\n\n\n    val onMapClick = remember {\n        {\n\n            if (uiState.bottomSheetType == BottomSheetType.ReportIncident.type) {\n                collapseBottomSheet()\n            }\n\n            if (uiState.bottomSheetType == BottomSheetType.IncidentDescription.type) {\n                checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                    collapseBottomSheet()\n                })\n            }\n            onDismissRescueeBanner()\n            expandableFab(false)\n\n\n        }\n    }\n\n    val onMapLongClick = remember {\n        { latLng: LatLng ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                onDismissRescueeBanner()\n                expandableFab(false)\n                uiState = uiState.copy(\n                    lastLongPressedLocation = latLng,\n                    bottomSheetType = BottomSheetType.ReportIncident.type).also {\n                    expandBottomSheet()\n                }\n            })\n\n        }\n    }\n\n\n    val startRespondingToHelp = remember {\n        {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                notificationPermissionState.requestPermission(onGranted = {\n                    notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n                }, onExplain = {\n                    notificationPermissionDialogVisibility(true)\n                }, onDenied = {\n                    respondToHelp()\n                })\n            } else {\n                respondToHelp()\n            }\n        }\n    }\n\n\n    val onClickOkAcceptedRescue = remember {\n        {\n            onChangeNavigatingState(true)\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                bottomSheetType = BottomSheetType.OnGoingRescue.type\n            ).also {\n                expandBottomSheet()\n                onDismissRescueeBanner()\n            }\n        }\n    }\n\n    val locationPermissionDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(locationPermissionDialogVisible = visibility)\n        }\n    }\n\n    val onClickCancelButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.DeclineRescueRequest(id))\n        }\n    }\n\n    val onClickConfirmButton = remember {\n        { id: String ->\n            mappingViewModel.onEvent(MappingVmEvent.AcceptRescueRequest(id))\n        }\n    }\n\n    val onClickReportIncident = remember {\n        { incidentLabel: String ->\n            uiState.lastLongPressedLocation?.let { locationLatLng ->\n                mappingViewModel.onEvent(\n                    event = MappingVmEvent.ReportIncident(\n                        label = incidentLabel,\n                        latLng = locationLatLng,\n                        description = incidentDescription.text\n                    ))\n                uiState = uiState.copy(selectedIncidentLabel = \"\")\n                incidentDescription = TextFieldValue()\n            }\n        }\n    }\n\n    val emergencyCallDialogVisibility = remember {\n        { visible: Boolean ->\n            uiState = uiState.copy(\n                isEmergencyCallDialogVisible = visible\n            )\n        }\n    }\n\n    val changeAlertDialogState = remember {\n        { alertDialogState: AlertDialogState ->\n            uiState = uiState.copy(\n                alertDialogState = alertDialogState\n            )\n        }\n    }\n\n    val rescueRequestDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                isRescueRequestDialogVisible = visibility\n            )\n        }\n    }\n\n    val openSinoTrack = remember {\n        {\n            navController.navigateScreen(Screens.MappingNavigation.SinoTrack.screenRoute)\n        }\n    }\n\n\n\n\n\n    val callPhoneNumber = remember {\n        { phoneNumber: String ->\n            context.callPhoneNumber(phoneNumber)\n        }\n    }\n\n    val openPhoneCallPermissionState =\n        rememberPermissionState(permission = Manifest.permission.CALL_PHONE) { permissionGranted ->\n            if (permissionGranted) {\n                uiState.selectedPhoneNumber.takeIf { it.isNotEmpty() }\n                    ?.let { callPhoneNumber(it) }\n            }\n        }\n\n    val onEmergencyCall = remember {\n        { phoneNumber: String ->\n            if (!openPhoneCallPermissionState.status.isGranted) {\n                uiState = uiState.copy(selectedPhoneNumber = phoneNumber)\n                openPhoneCallPermissionState.launchPermissionRequest()\n            } else {\n                callPhoneNumber(phoneNumber)\n            }\n        }\n    }\n\n    val onAddEmergencyContact = remember {\n        {\n            navController.navigateScreen(Screens.EmergencyCallNavigation.AddEditEmergencyContact.screenRoute)\n        }\n    }\n\n    val shareLocation = remember(state.userLocation, state.user.location) {\n        {\n\n            val location = state.getCurrentLocation()\n\n            if (location == null) {\n                Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n            } else {\n                context.shareLocation(\n                    latitude = location.latitude!!,\n                    longitude = location.longitude!!\n                )\n            }\n        }\n    }\n\n\n    val openMapTypeBottomSheet = remember {\n        {\n            uiState = uiState.copy(\n                bottomSheetType = BottomSheetType.MapType.type\n            ).also {\n                expandBottomSheet()\n            }\n        }\n    }\n\n    val closeMapTypeBottomSheet = remember {\n        {\n            uiState = uiState.copy(\n                bottomSheetType = null\n            ).also {\n                collapseBottomSheet()\n            }\n        }\n    }\n\n\n    val mapTypeBottomSheetVisibility = remember {\n        { visibility: Boolean ->\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                if (visibility) {\n                    openMapTypeBottomSheet()\n                } else {\n                    closeMapTypeBottomSheet()\n                }\n            })\n        }\n    }\n\n    val onSelectMapType = remember(key1 = state.userLocation) {\n        { mapType: String ->\n            if (state.userLocation == null) {\n                Toast.makeText(context, \"Searching for GPS\", Toast.LENGTH_SHORT).show()\n            } else {\n                mappingViewModel.onEvent(event = MappingVmEvent.SetMapType(mapType))\n            }\n        }\n    }\n\n\n    val onChangeIncidentLabel = remember {\n        { incidentLabel: String ->\n            uiState = uiState.copy(selectedIncidentLabel = incidentLabel)\n        }\n    }\n\n    val onChangeIncidentDescription = remember {\n        { input: TextFieldValue ->\n            incidentDescription = input\n        }\n    }\n\n\n    val onClickDeleteIncident = remember {\n        {\n\n            uiState = uiState.copy(\n                deleteHazardousMarkerDialogVisible = true\n            )\n\n        }\n    }\n\n    val onClickEditIncidentDescription = remember {\n        { marker: HazardousLaneMarker ->\n            uiState = uiState.copy(currentlyEditingHazardousMarker = marker)\n        }\n    }\n\n    val onConfirmDeleteIncident = remember(uiState.selectedHazardousMarker) {\n        {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.DeleteHazardousLaneMarker(\n                    id = uiState.selectedHazardousMarker!!.id\n                ))\n        }\n    }\n\n    val discardChangesMarkerDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(\n                discardHazardousMarkerDialogVisible = visibility\n            )\n        }\n    }\n\n\n    val onDiscardMarkerChanges = remember {\n        {\n            uiState = uiState.copy(currentlyEditingHazardousMarker = null)\n        }\n    }\n\n    val onDismissIncidentDescriptionBottomSheet = remember {\n        {\n            checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n                collapseBottomSheet()\n            })\n        }\n    }\n\n    val onCancelEditIncidentDescription = remember {\n        {\n            checkIfHasEditingMarker(onDiscardMarkerChanges)\n        }\n    }\n\n    val onUpdateReportedIncident = remember(uiState.currentlyEditingHazardousMarker) {\n        { description: String, label: String ->\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.UpdateReportedIncident(\n                    marker = uiState.currentlyEditingHazardousMarker!!.copy(\n                        description = description,\n                        label = label)\n                ))\n        }\n    }\n\n    val onClickHazardousInfoGotIt = remember {\n        {\n            mappingViewModel.onEvent(event = MappingVmEvent.ShouldShowHazardousStartingInfo(false))\n        }\n    }\n\n    fun getRouteDirections() {\n        val rescueTransaction = state.rescueTransaction ?: return\n\n        val startingLongitude = rescueTransaction.getStartingLongitude() ?: return\n        val startingLatitude = rescueTransaction.getStartingLatitude() ?: return\n        val destinationLongitude = rescueTransaction.getDestinationLongitude() ?: return\n        val destinationLatitude = rescueTransaction.getDestinationLatitude() ?: return\n\n        mappingViewModel.onEvent(\n            event = MappingVmEvent.GetRouteDirections(\n                origin = Point.fromLngLat(startingLongitude, startingLatitude),\n                destination = Point.fromLngLat(\n                    destinationLongitude,\n                    destinationLatitude)))\n    }\n\n\n    val cancelSearchDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(cancelSearchDialogVisible = visibility)\n        }\n    }\n\n    val cancelOnGoingRescueDialogVisibility = remember {\n        { visibility: Boolean ->\n            uiState = uiState.copy(cancelOnGoingRescueDialogVisible = visibility)\n        }\n    }\n\n    fun notifyNewRescueRequest(message: String) {\n        if (notificationPermissionState.status.isGranted && !AppUtils.isAppInForeground(context = context)) {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.NotifyNewRescueRequest(\n                    message = message\n                ))\n        }\n    }\n\n    fun notifyRequestAccepted(message: String) {\n        if (notificationPermissionState.status.isGranted && !AppUtils.isAppInForeground(context = context)) {\n            mappingViewModel.onEvent(\n                event = MappingVmEvent.NotifyRequestAccepted(\n                    message = message\n                ))\n        }\n    }\n\n    val viewProfile = remember {\n        { id: String ->\n            navController.navigateScreen(\n                Screens.UserProfileNavigation.UserProfile.passArgument(\n                    userId = id))\n        }\n    }\n\n    val cancelRespondToHelp = remember(uiState.mapSelectedRescuee) {\n        {\n            uiState.mapSelectedRescuee?.userId?.let { id ->\n                mappingViewModel.onEvent(event = MappingVmEvent.CancelRespondHelp(id = id))\n            }\n        }\n    }\n\n    val resetState = remember {\n        {\n            uiState = uiState.copy(\n                rescueRequestAccepted = false,\n                requestHelpButtonVisible = true,\n                searchingAssistance = false,\n                routeDirection = null,\n                mapSelectedRescuee = null,\n            ).also {\n                collapseBottomSheet()\n            }\n            onChangeNavigatingState(false)\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n    DisposableEffect(key1 = Unit) {\n        val window = context.findActivity()?.window\n        window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n        onDispose {\n            window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n        }\n    }\n\n    BackHandler(enabled = bottomSheetScaffoldState.bottomSheetState.isExpanded) {\n        checkIfHasEditingMarker(noMarkerCurrentlyEditing = {\n\n            cancelOnGoingRescueDialogVisibility(hasTransaction)\n            cancelSearchDialogVisibility(hasTransaction)\n\n            if (hasTransaction) {\n                return@checkIfHasEditingMarker\n            }\n\n            if (uiState.searchingAssistance) {\n                return@checkIfHasEditingMarker\n            }\n\n            collapseBottomSheet()\n        })\n    }\n\n    LaunchedEffect(state.user.userAssistance) {\n\n        if (state.user.isUserNeedHelp() == true) {\n\n            uiState = uiState.copy(\n                bottomSheetType = BottomSheetType.SearchAssistance.type,\n                searchingAssistance = true)\n                .also {\n                    expandBottomSheet()\n                }\n\n        }\n    }\n\n    LaunchedEffect(key1 = true) {\n        emergencyViewModel.onEvent(event = EmergencyCallVmEvent.LoadDefaultContact)\n    }\n\n    LaunchedEffect(key1 = mainState.mappingIntentAction) {\n\n        when (mainState.mappingIntentAction) {\n            MappingConstants.ACTION_OPEN_CONVERSATION -> {\n                onClickChatButton()\n                mainViewModel.setIntentAction(DEFAULT_ACTION)\n            }\n\n            MappingConstants.ACTION_OPEN_RESCUE_REQUEST -> {\n                rescueRequestDialogVisibility(true)\n                mainViewModel.setIntentAction(DEFAULT_ACTION)\n            }\n        }\n    }\n\n    LaunchedEffect(key1 = userLocationAvailable, mapboxMap) {\n        if (userLocationAvailable) {\n            val camera = cameraState\n            locateUser(camera.zoom, camera.position, FAST_CAMERA_ANIMATION_DURATION)\n        }\n    }\n\n    LaunchedEffect(key1 = true) {\n        mappingViewModel.eventFlow.collectLatest {\n            when (it) {\n\n                is MappingEvent.NoInternetConnection -> {\n                    noInternetDialogVisibility(true)\n                }\n\n                is MappingEvent.DestinationReached -> {\n                    Timber.v(\"Destination Reached\")\n                    val role = state.user.transaction?.role\n                    val type = if (role == Role.Rescuee.name) {\n                        BottomSheetType.RescuerArrived.type\n                    } else {\n                        BottomSheetType.DestinationReached.type\n                    }\n                    uiState = uiState.copy(bottomSheetType = type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction) {\n        uiState = uiState.copy(\n            hasTransaction = hasTransaction\n        )\n    }\n    LaunchedEffect(key1 = isRescueCancelled) {\n        uiState = uiState.copy(\n            isRescueCancelled = isRescueCancelled\n        )\n    }\n    LaunchedEffect(key1 = isNavigating) {\n        uiState = uiState.copy(\n            isNavigating = isNavigating\n        )\n    }\n    LaunchedEffect(key1 = true) {\n\n        mappingViewModel.eventFlow.collectLatest { event ->\n            when (event) {\n\n                is MappingEvent.RequestHelpSuccess -> {\n                    val location = state.userLocation!!\n                    navController.navigateScreen(\n                        Screens.MappingNavigation.ConfirmDetails.passArgument(\n                            latitude = location.latitude!!.toFloat(),\n                            longitude = location.longitude!!.toFloat()\n                        ))\n                }\n\n                is MappingEvent.InsufficientUserCredential -> {\n                    navController.navigateScreen(\n                        Screens.UserProfileNavigation.EditProfile.screenRoute)\n                }\n\n                is MappingEvent.LocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescuerLocationNotAvailable -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UnexpectedError -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.UserFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RespondToHelpSuccess -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.AddressFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n\n                is MappingEvent.NewSelectedRescuee -> {\n                    uiState = uiState.copy(\n                        mapSelectedRescuee = event.selectedRescuee,\n                        requestHelpButtonVisible = false\n                    )\n                }\n\n                is MappingEvent.GenerateRouteNavigationSuccess -> {\n                    uiState = uiState.copy(\n                        routeDirection = event.routeDirection,\n                        generateRouteFailed = false\n                    )\n                    context.startLocationServiceIntentAction(intentAction = ACTION_START_FOREGROUND)\n\n                }\n\n                is MappingEvent.CancelRescueTransactionSuccess -> {\n                    resetState()\n                    onDismissRescueeBanner()\n                }\n\n                is MappingEvent.DestinationArrivedSuccess -> {\n                    resetState()\n                }\n\n                is MappingEvent.RescueRequestAccepted -> {\n                    uiState = uiState.copy(\n                        rescueRequestAccepted = true\n                    )\n                    onDismissRescueeBanner()\n                }\n\n                is MappingEvent.CancelHelpRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = true\n                    )\n                }\n\n                is MappingEvent.AcceptRescueRequestSuccess -> {\n                    uiState = uiState.copy(\n                        requestHelpButtonVisible = false,\n                        bottomSheetType = BottomSheetType.OnGoingRescue.type,\n                        isRescueRequestDialogVisible = false\n                    ).also {\n                        expandBottomSheet()\n                        rescueRequestDialogVisibility(false)\n\n                    }\n                }\n\n                is MappingEvent.FailedToCalculateDistance -> {\n                    Toast.makeText(context, \"Failed to Calculate Distance\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n\n\n                is MappingEvent.RemoveRespondentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.RescueHasTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"Unfortunately the Rescuer is currently in a Rescue.\",\n                            icon = R.raw.error\n                        ))\n                }\n\n                is MappingEvent.UserHasCurrentTransaction -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Cannot Request\",\n                            description = \"You can only have one transaction at a time\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.NewBottomSheetType -> {\n                    uiState = uiState.copy(\n                        bottomSheetType = event.bottomSheetType,\n                        searchingAssistance = event.bottomSheetType == BottomSheetType.SearchAssistance.type)\n                        .also {\n                            expandBottomSheet()\n                        }\n                }\n\n                is MappingEvent.ReportIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.ReportIncidentSuccess -> {\n                    Toast.makeText(context, \"Incident Reported\", Toast.LENGTH_SHORT).show()\n                }\n\n                is MappingEvent.IncidentDistanceTooFar -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Exceeds Reachable Distance\",\n                            description = \"The incident is taking place quite a distance away from your current location, making it challenging to directly engage or intervene.\",\n                            icon = R.raw.error\n                        )\n                    )\n                }\n\n                is MappingEvent.SelectHazardousLaneMarker -> {\n                    uiState = uiState.copy(\n                        selectedHazardousMarker = event.marker,\n                        bottomSheetType = BottomSheetType.IncidentDescription.type).also {\n                        expandBottomSheet()\n                    }\n                }\n\n                is MappingEvent.DeleteHazardousLaneMarkerFailed -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.DeleteHazardousLaneMarkerSuccess -> {\n                    collapseBottomSheet()\n                    Toast.makeText(context, \"Marker Deleted\", Toast.LENGTH_LONG).show()\n                }\n\n                is MappingEvent.UpdateIncidentFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_LONG).show()\n                }\n\n                MappingEvent.UpdateIncidentSuccess -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Incident Updated\",\n                            description = \"The incident has been updated successfully\",\n                            icon = R.raw.success\n                        )\n                    )\n                    onDiscardMarkerChanges()\n                    collapseBottomSheet()\n                }\n\n                is MappingEvent.GenerateRouteNavigationFailed -> {\n                    changeAlertDialogState(\n                        AlertDialogState(\n                            title = \"Failed to Generate Route\",\n                            description = \"Failed to generate route to the destination due to a connection error.\",\n                        ))\n                    uiState = uiState.copy(\n                        generateRouteFailed = true\n                    )\n                }\n\n                MappingEvent.CancelRespondSuccess -> {\n                    Toast.makeText(context, \"Respond Cancelled\", Toast.LENGTH_SHORT).show()\n                }\n\n                MappingEvent.RescueArrivedSuccess -> {\n                    val role = state.user.getRole()\n\n                    val route = if(role == Role.Rescuee.name){\n                        Screens.RescueRecordNavigation.RescueResults.screenRoute\n                    }else{\n                        Screens.RescueRecordNavigation.RescueDetails.screenRoute\n                    }\n\n                    navController.navigateScreen(route)\n                }\n\n                is MappingEvent.RescueArrivedFailed -> {\n                    Toast.makeText(context, event.reason, Toast.LENGTH_SHORT).show()\n                }\n\n                else -> {}\n            }\n        }\n    }\n    LaunchedEffect(key1 = uiState.routeDirection?.geometry, key2 = mapboxMap) {\n\n        val route = uiState.routeDirection\n\n        if (route == null) {\n            removeRouteDirection()\n            context.startLocationServiceIntentAction(intentAction = ACTION_STOP_FOREGROUND)\n            return@LaunchedEffect\n        }\n        showRouteDirection()\n    }\n\n\n\n\n    LaunchedEffect(\n        key1 = state.rescueTransaction?.route,\n        key2 = hasTransaction,\n        key3 = isRescueCancelled) {\n\n\n        if (hasTransaction.not() || isRescueCancelled) {\n            uiState = uiState.copy(routeDirection = null)\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n    LaunchedEffect(\n        key1 = hasInternetConnection,\n        key2 = uiState.generateRouteFailed,\n        key3 = state.rescueTransaction?.route) {\n\n        if (hasInternetConnection.not()) {\n            return@LaunchedEffect\n        }\n        if (!uiState.generateRouteFailed) {\n            return@LaunchedEffect\n        }\n\n        getRouteDirections()\n    }\n\n\n    LaunchedEffect(key1 = isNavigating, key2 = userLocationAvailable, key3 = pulsingEnabled) {\n        showUserLocation()\n    }\n    LaunchedEffect(key1 = uiState.bottomSheetType) {\n        coroutineScope.launch {\n            if (uiState.bottomSheetType?.isNotEmpty() == true) {\n                expandBottomSheet()\n            }\n        }\n    }\n    LaunchedEffect(key1 = hasTransaction, key2 = isRescueCancelled) {\n\n        if (hasTransaction.not()) {\n            return@LaunchedEffect\n        }\n\n        if (isRescueCancelled) {\n            return@LaunchedEffect\n        }\n\n        onChangeNavigatingState(false)\n\n    }\n\n    LaunchedEffect(key1 = foregroundLocationPermissionsState.allPermissionsGranted) {\n        if (!foregroundLocationPermissionsState.allPermissionsGranted) {\n            return@LaunchedEffect\n        }\n\n        if (!context.hasGPSConnection()) {\n            context.checkLocationSetting(onDisabled = settingResultRequest::launch)\n        }\n\n        context.startLocationServiceIntentAction()\n\n    }\n\n\n    MappingScreenContent(\n        modifier = Modifier.padding(paddingValues),\n        state = state,\n        locationPermissionState = foregroundLocationPermissionsState,\n        bottomSheetScaffoldState = bottomSheetScaffoldState,\n        hazardousLaneMarkers = hazardousMarkers,\n        mapboxMap = mapboxMap,\n        uiState = uiState,\n        emergencyState = emergencyState,\n        incidentDescription = incidentDescription,\n        event = { event ->\n            when (event) {\n                is MappingUiEvent.RequestHelp -> startRequestingHelp()\n                is MappingUiEvent.RespondToHelp -> startRespondingToHelp()\n                is MappingUiEvent.CancelSearching -> cancelSearchDialogVisibility(true)\n                is MappingUiEvent.ChatRescueTransaction -> onClickChatButton()\n                is MappingUiEvent.CancelRescueTransaction -> cancelOnGoingRescueDialogVisibility(\n                    true)\n\n                is MappingUiEvent.CancelledRescueConfirmed -> onClickOkCancelledRescue()\n                is MappingUiEvent.OnInitializeMap -> onInitializeMapboxMap(event.mapboxMap)\n                is MappingUiEvent.RescueRequestAccepted -> onClickOkAcceptedRescue()\n                is MappingUiEvent.OnChangeCameraState -> onChangeCameraPosition(event.cameraState)\n                is MappingUiEvent.NoInternetDialog -> noInternetDialogVisibility(event.visibility)\n                is MappingUiEvent.OnMapClick -> onMapClick()\n                is MappingUiEvent.DismissBanner -> onDismissRescueeBanner()\n                is MappingUiEvent.LocateUser -> onLocateUserButton()\n                is MappingUiEvent.RouteOverview -> routeOverView()\n                is MappingUiEvent.RecenterRoute -> recenterRoute()\n                is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()\n                is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()\n                is MappingUiEvent.DestinationArrived -> destinationReached()\n                is MappingUiEvent.LocationPermission -> locationPermissionDialogVisibility(event.visibility)\n                is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)\n                is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)\n                is MappingUiEvent.OpenFamilyTracker -> shareLocation()\n                is MappingUiEvent.RescueRequestDialog -> rescueRequestDialogVisibility(event.visibility)\n                is MappingUiEvent.DeclineRequestHelp -> onClickCancelButton(event.id)\n                is MappingUiEvent.ConfirmRequestHelp -> onClickConfirmButton(event.id)\n                is MappingUiEvent.AlertDialog -> changeAlertDialogState(event.alertDialogState)\n                is MappingUiEvent.OnMapLongClick -> onMapLongClick(event.latLng)\n                is MappingUiEvent.OnReportIncident -> onClickReportIncident(event.labelIncident)\n                is MappingUiEvent.OnEmergencyCall -> onEmergencyCall(event.phoneNumber)\n                is MappingUiEvent.OnAddEmergencyContact -> onAddEmergencyContact()\n                is MappingUiEvent.MapTypeBottomSheet -> mapTypeBottomSheetVisibility(event.visibility)\n                is MappingUiEvent.OnSelectMapType -> onSelectMapType(event.mapType)\n                is MappingUiEvent.OnChangeIncidentDescription -> onChangeIncidentDescription(event.description)\n                is MappingUiEvent.OnChangeIncidentLabel -> onChangeIncidentLabel(event.label)\n                is MappingUiEvent.OnClickDeleteIncident -> onClickDeleteIncident()\n                is MappingUiEvent.OnClickEditIncidentDescription -> onClickEditIncidentDescription(\n                    event.marker)\n\n                is MappingUiEvent.OnClickMapMarker -> onMapMarkerClick(\n                    event.markerSnippet,\n                    event.markerId)\n\n                is MappingUiEvent.HazardousLaneMarkerDialog -> hazardousLaneMarkerDialogVisibility(\n                    event.visibility)\n\n                MappingUiEvent.OnConfirmDeleteIncident -> onConfirmDeleteIncident()\n                is MappingUiEvent.DiscardChangesMarkerDialog -> discardChangesMarkerDialogVisibility(\n                    event.visibility)\n\n                MappingUiEvent.DiscardMarkerChanges -> onDiscardMarkerChanges()\n                MappingUiEvent.DismissIncidentDescriptionBottomSheet -> onDismissIncidentDescriptionBottomSheet()\n                MappingUiEvent.CancelEditIncidentDescription -> onCancelEditIncidentDescription()\n                is MappingUiEvent.UpdateIncidentDescription -> onUpdateReportedIncident(\n                    event.description,\n                    event.label)\n\n                MappingUiEvent.OnClickHazardousInfoGotIt -> onClickHazardousInfoGotIt()\n                is MappingUiEvent.CancelSearchDialog -> cancelSearchDialogVisibility(event.visibility)\n                MappingUiEvent.SearchCancelled -> cancelSearchingAssistance()\n                MappingUiEvent.CancelOnGoingRescue -> cancelOnGoingRescue()\n                is MappingUiEvent.CancelOnGoingRescueDialog -> cancelOnGoingRescueDialogVisibility(\n                    event.visibility)\n\n                is MappingUiEvent.NotificationPermissionDialog -> notificationPermissionDialogVisibility(\n                    event.visibility)\n\n                is MappingUiEvent.NotifyRequestAccepted -> notifyRequestAccepted(message = event.message)\n                is MappingUiEvent.NotifyNewRescueRequest -> notifyNewRescueRequest(message = event.message)\n                MappingUiEvent.OpenSinoTrack -> openSinoTrack()\n\n                is MappingUiEvent.ViewProfile -> viewProfile(event.id)\n                MappingUiEvent.CancelRespondHelp -> cancelRespondToHelp()\n            }\n        }\n    )\n\n}\n\n//on click cancel\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/MappingScreen.kt	(date 1698333040664)
@@ -495,7 +495,7 @@
 
     val isRescueCancelled =
         remember(state.rescueTransaction) {
-            (state.rescueTransaction?.cancellation)?.rescueCancelled == true
+            state.rescueTransaction?.isRescueCancelled() ?: false
         }
 
     fun getConversationSelectedId(): String? {
@@ -528,7 +528,7 @@
         }
     }
 
-    val destinationReached = remember {
+    val confirmedDestinationArrived = remember {
         {
             mappingViewModel.onEvent(event = MappingVmEvent.DestinationArrived)
         }
@@ -983,6 +983,9 @@
         }
     }
 
+    val arrivedAtLocation = remember{{
+        mappingViewModel.onEvent(event = MappingVmEvent.ArrivedAtLocation)
+    }}
 
 
 
@@ -1068,23 +1071,39 @@
                     noInternetDialogVisibility(true)
                 }
 
-                is MappingEvent.DestinationReached -> {
-                    Timber.v("Destination Reached")
-                    val role = state.user.transaction?.role
-                    val type = if (role == Role.Rescuee.name) {
-                        BottomSheetType.RescuerArrived.type
-                    } else {
-                        BottomSheetType.DestinationReached.type
-                    }
-                    uiState = uiState.copy(bottomSheetType = type).also {
-                        expandBottomSheet()
-                    }
-                }
+                else -> {}
+            }
+        }
+    }
+
+    LaunchedEffect(key1 = state.rescueTransaction?.status ){
+        val rescueTransaction = state.rescueTransaction
+        val isRescueFinished = rescueTransaction?.isRescueFinished() ?: false
+        val isRescueOnGoing = rescueTransaction?.isRescueOnGoing() ?: false
+
+        if(rescueTransaction == null){
+            return@LaunchedEffect
+        }
+
+        if(isRescueOnGoing){
+            return@LaunchedEffect
+        }
+
+        if(!isRescueFinished){
+            return@LaunchedEffect
+        }
+
+        val role = state.user.transaction?.role
+        val type = if (role == Role.Rescuee.name) {
+            BottomSheetType.RescuerArrived.type
+        } else {
+            BottomSheetType.DestinationReached.type
+        }
+        uiState = uiState.copy(bottomSheetType = type).also {
+            expandBottomSheet()
+        }
+    }
 
-                else -> {}
-            }
-        }
-    }
     LaunchedEffect(key1 = hasTransaction) {
         uiState = uiState.copy(
             hasTransaction = hasTransaction
@@ -1433,7 +1452,7 @@
                 is MappingUiEvent.RecenterRoute -> recenterRoute()
                 is MappingUiEvent.OpenNavigation -> onClickOpenNavigationButton()
                 is MappingUiEvent.OnRequestNavigationCameraToOverview -> onRequestNavigationCameraToOverview()
-                is MappingUiEvent.DestinationArrived -> destinationReached()
+                is MappingUiEvent.ConfirmedDestinationArrived -> confirmedDestinationArrived()
                 is MappingUiEvent.LocationPermission -> locationPermissionDialogVisibility(event.visibility)
                 is MappingUiEvent.ExpandableFab -> expandableFab(event.expanded)
                 is MappingUiEvent.EmergencyCallDialog -> emergencyCallDialogVisibility(event.visibility)
@@ -1488,6 +1507,7 @@
 
                 is MappingUiEvent.ViewProfile -> viewProfile(event.id)
                 MappingUiEvent.CancelRespondHelp -> cancelRespondToHelp()
+                MappingUiEvent.ArrivedAtLocation -> arrivedAtLocation()
             }
         }
     )
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event\n\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\nimport com.mapbox.geojson.Point\nimport com.mapbox.mapboxsdk.geometry.LatLng\n\n\nsealed class MappingVmEvent {\n\n    data object RequestHelp : MappingVmEvent()\n    data class RespondToHelp(val selectedRescuee: MapSelectedRescuee) : MappingVmEvent()\n    data class CancelRespondHelp(val id: String) : MappingVmEvent()\n    data class SelectRescueMapIcon(val id: String): MappingVmEvent()\n    data object CancelSearchingAssistance: MappingVmEvent()\n    data class DeclineRescueRequest(val id: String): MappingVmEvent()\n    data class AcceptRescueRequest(val id: String): MappingVmEvent()\n    data object CancelRescueTransaction: MappingVmEvent()\n    data object DestinationArrived: MappingVmEvent()\n    data class GetRouteDirections(val origin: Point, val destination: Point): MappingVmEvent()\n    data class ReportIncident(val label: String, val latLng: LatLng, val description: String): MappingVmEvent()\n    data class UpdateReportedIncident(val marker: HazardousLaneMarker): MappingVmEvent()\n    data class SetMapType(val mapType: String): MappingVmEvent()\n    data class SelectHazardousLaneMarker(val id: String): MappingVmEvent()\n    data class DeleteHazardousLaneMarker(val id: String): MappingVmEvent()\n    data class ShouldShowHazardousStartingInfo(val shouldShow: Boolean): MappingVmEvent()\n    data class NotifyNewRescueRequest(val message: String): MappingVmEvent()\n    data class NotifyRequestAccepted(val message: String): MappingVmEvent()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingVmEvent.kt	(date 1698333040664)
@@ -26,4 +26,5 @@
     data class ShouldShowHazardousStartingInfo(val shouldShow: Boolean): MappingVmEvent()
     data class NotifyNewRescueRequest(val message: String): MappingVmEvent()
     data class NotifyRequestAccepted(val message: String): MappingVmEvent()
+    data object ArrivedAtLocation: MappingVmEvent()
 }
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.BottomSheetScaffoldState\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport androidx.constraintlayout.compose.Dimension\nimport com.example.cyclistance.core.domain.model.AlertDialogState\nimport com.example.cyclistance.core.presentation.dialogs.alert_dialog.AlertDialog\nimport com.example.cyclistance.core.presentation.dialogs.no_internet_dialog.NoInternetDialog\nimport com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogForegroundLocationPermission\nimport com.example.cyclistance.core.presentation.dialogs.permissions_dialog.DialogNotificationPermission\nimport com.example.cyclistance.feature_authentication.presentation.common.visible\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.components.emergency_call.EmergencyCallDialog\nimport com.example.cyclistance.feature_emergency_call.presentation.emergency_call_screen.state.EmergencyCallState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.CancelledRescueModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.banner.MappingExpandableBanner\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet.MappingBottomSheet\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.CancelRespondButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RequestHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.buttons.RespondToHelpButton\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelOnGoingRescueDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.CancelSearchDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DeleteHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.dialog.DiscardHazardousLaneMarkerDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.ExpandableFABSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.fabs.FloatingButtonSection\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestAccepted\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.request.MappingRequestCancelled\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.rescue_request.RescueRequestDialog\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event.MappingUiEvent\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state.MappingUiState\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.BottomSheetType\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\nimport com.google.accompanist.permissions.MultiplePermissionsState\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\nimport com.mapbox.mapboxsdk.maps.MapboxMap\n\n\n@OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterialApi::class)\n@Composable\nfun MappingScreenContent(\n    modifier: Modifier,\n    bottomSheetScaffoldState: BottomSheetScaffoldState,\n    state: MappingState,\n    emergencyState: EmergencyCallState,\n    mapboxMap: MapboxMap?,\n\n    uiState: MappingUiState,\n    incidentDescription: TextFieldValue,\n    hazardousLaneMarkers: List<HazardousLaneMarker>,\n    locationPermissionState: MultiplePermissionsState = rememberMultiplePermissionsState(permissions = emptyList()),\n    event: (MappingUiEvent) -> Unit = {},\n) {\n\n    val respondentCount by remember(state.newRescueRequest?.request?.size) {\n        derivedStateOf { (state.newRescueRequest?.request)?.size ?: 0 }\n    }\n\n    var lastNotifiedRequestId by rememberSaveable{ mutableStateOf(\"\") }\n    var lastNotifiedAcceptedId by rememberSaveable { mutableStateOf(\"\") }\n\n    val configuration = LocalConfiguration.current\n    val markerPostedCount by remember(hazardousLaneMarkers.size){\n        derivedStateOf {\n            hazardousLaneMarkers.count { it.idCreator == state.userId }\n        }\n    }\n\n    LaunchedEffect(key1 = respondentCount){\n        val request = state.newRescueRequest?.request?.lastOrNull() ?: return@LaunchedEffect\n        if(lastNotifiedRequestId == request.id) {\n            return@LaunchedEffect\n        }\n\n        event(MappingUiEvent.NotifyNewRescueRequest(message = \"Request from ${request.name}, distance is ${request.distance}\"))\n        lastNotifiedRequestId = request.id ?: \"\"\n    }\n\n    LaunchedEffect(key1 = uiState.rescueRequestAccepted, key2 = uiState.isRescueCancelled.not()){\n\n\n        val rescueeId = state.rescuee?.id\n        if(lastNotifiedAcceptedId == rescueeId){\n            return@LaunchedEffect\n        }\n        if (uiState.rescueRequestAccepted && uiState.isRescueCancelled.not()) {\n\n            event(MappingUiEvent.NotifyRequestAccepted(\n                    message = \"${state.rescuee?.name} accepted your request\"))\n            lastNotifiedAcceptedId = rescueeId ?: \"\"\n        }\n    }\n\n\n    Surface(\n        modifier = modifier\n            .fillMaxSize(),\n        color = MaterialTheme.colors.background) {\n\n\n        Box {\n\n            if (uiState.isRescueRequestDialogVisible) {\n                RescueRequestDialog(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    mappingState = state,\n                    uiState = uiState,\n                    event = event\n                )\n            }\n\n            MappingBottomSheet(\n                state = state,\n                event = event,\n                bottomSheetScaffoldState = bottomSheetScaffoldState,\n                uiState = uiState,\n                incidentDescription = incidentDescription,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(horizontal = 12.dp)\n                    .align(Alignment.BottomCenter),\n                markerPostedCount = markerPostedCount) {\n\n\n                ConstraintLayout(modifier = Modifier.fillMaxSize()) {\n\n                    val (mapScreen, requestHelpButton, circularProgressbar, dialog, respondToHelpButton, fabSection, expandableFabSection) = createRefs()\n\n\n                    MappingMapsScreen(\n                        state = state,\n                        modifier = Modifier.constrainAs(mapScreen) {\n                            top.linkTo(parent.top)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                        },\n                        mapboxMap = mapboxMap,\n                        event = event,\n                        uiState = uiState,\n                        hazardousLaneMarkers = hazardousLaneMarkers\n                    )\n\n\n\n\n                    AnimatedVisibility(\n                        visible = uiState.mapSelectedRescuee != null && bottomSheetScaffoldState.bottomSheetState.isCollapsed,\n                        enter = expandVertically(expandFrom = Alignment.Top) { 20 },\n                        exit = shrinkVertically(animationSpec = tween()) { fullHeight ->\n                            fullHeight / 2\n                        },\n                    ) {\n                        if (uiState.mapSelectedRescuee != null) {\n                            MappingExpandableBanner(\n                                modifier = Modifier\n                                    .padding(all = 6.dp)\n                                    .fillMaxWidth(), banner = uiState.mapSelectedRescuee,\n                                onClickDismissButton = { event(MappingUiEvent.DismissBanner) })\n                        }\n                    }\n\n                    FloatingButtonSection(\n                        modifier = Modifier\n                            .constrainAs(fabSection) {\n                                end.linkTo(parent.end, margin = 8.dp)\n                                bottom.linkTo(\n                                    parent.bottom,\n                                    margin = (configuration.screenHeightDp / 2.5).dp)\n                                top.linkTo(parent.top, margin = 15.dp)\n                                height = Dimension.fillToConstraints\n\n                            },\n                        locationPermissionGranted = locationPermissionState.allPermissionsGranted,\n                        onClickLocateUserButton = { event(MappingUiEvent.LocateUser) },\n                        onClickRouteOverviewButton = { event(MappingUiEvent.RouteOverview) },\n                        onClickRecenterButton = { event(MappingUiEvent.RecenterRoute) },\n                        onClickOpenNavigationButton = { event(MappingUiEvent.OpenNavigation) },\n                        onClickLayerButton = {\n                            val mapTypeBottomSheetVisibility =\n                                bottomSheetScaffoldState.bottomSheetState.isExpanded && uiState.bottomSheetType == BottomSheetType.MapType.type\n                            event(MappingUiEvent.MapTypeBottomSheet(visibility = !mapTypeBottomSheetVisibility))\n                        },\n                        uiState = uiState\n                    )\n\n                    ExpandableFABSection(\n                        onClickEmergencyCall = { event(MappingUiEvent.EmergencyCallDialog(visibility = true)) },\n                        onClickFamilyTracker = { event(MappingUiEvent.OpenFamilyTracker) },\n                        onClickRescueRequest = { event(MappingUiEvent.RescueRequestDialog(visibility = true)) },\n                        onClickFab = { event(MappingUiEvent.ExpandableFab(expanded = !uiState.isFabExpanded)) },\n                        onClickBikeTracker = { event(MappingUiEvent.OpenSinoTrack) },\n                        isFabExpanded = uiState.isFabExpanded,\n                        badgeCount = respondentCount,\n                        modifier = Modifier.constrainAs(expandableFabSection) {\n                            end.linkTo(parent.end, margin = 8.dp)\n                            if (bottomSheetScaffoldState.bottomSheetState.isCollapsed) bottom.linkTo(\n                                parent.bottom,\n                                margin = 15.dp) else top.linkTo(fabSection.bottom, margin = 8.dp)\n                        }\n                    )\n\n\n                    val buttonVisible =\n                        uiState.isNavigating.not() && uiState.isFabExpanded.not() && bottomSheetScaffoldState.bottomSheetState.isCollapsed\n                    val requestHelpVisible = uiState.requestHelpButtonVisible && buttonVisible\n                    val respondToHelpVisible = uiState.requestHelpButtonVisible.not() && buttonVisible\n\n                    val requestPending = state.user.isRescueRequestPending(uiState.mapSelectedRescuee?.userId) == true\n\n                    RequestHelpButton(\n                        modifier = Modifier.constrainAs(requestHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        }, onClickRequestHelpButton = { event(MappingUiEvent.RequestHelp) },\n                        state = state,\n                        visible = requestHelpVisible\n\n                    )\n\n                    RespondToHelpButton(\n                        modifier = Modifier.constrainAs(respondToHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        },\n                        onClickRespondButton = { event(MappingUiEvent.RespondToHelp) },\n                        state = state,\n                        visible = respondToHelpVisible && !requestPending\n                    )\n\n\n                    CancelRespondButton(\n                        cancelRespond = { event(MappingUiEvent.CancelRespondHelp) },\n                        modifier = Modifier.constrainAs(respondToHelpButton) {\n                            bottom.linkTo(parent.bottom, margin = 15.dp)\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                        },\n                        state = state,\n                        visible = respondToHelpVisible && requestPending)\n\n\n\n                    if (state.isLoading) {\n                        CircularProgressIndicator(\n                            modifier = Modifier.constrainAs(\n                                circularProgressbar) {\n                                top.linkTo(parent.top)\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n                    if (uiState.cancelSearchDialogVisible) {\n                        CancelSearchDialog(onDismissRequest = {\n                            event(MappingUiEvent.CancelSearchDialog(visibility = false))\n                        }, onClickOkay = {\n                            event(MappingUiEvent.SearchCancelled)\n                        }, modifier = Modifier.constrainAs(dialog) {\n                            end.linkTo(parent.end)\n                            start.linkTo(parent.start)\n                            bottom.linkTo(parent.bottom)\n                            width = Dimension.matchParent\n                            height = Dimension.wrapContent\n                            this.centerTo(parent)\n                        })\n                    }\n\n                    if (uiState.cancelOnGoingRescueDialogVisible) {\n                        CancelOnGoingRescueDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.CancelOnGoingRescueDialog(visibility = false))\n                            },\n                            onClickOkay = { event(MappingUiEvent.CancelOnGoingRescue) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n\n\n                    if (uiState.isEmergencyCallDialogVisible) {\n                        EmergencyCallDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.EmergencyCallDialog(visibility = false)) },\n                            emergencyCallModel = emergencyState.emergencyCallModel,\n                            onClick = {\n                                event(\n                                    MappingUiEvent.OnEmergencyCall(\n                                        it.phoneNumber\n                                    )\n                                )\n                            }, onAddContact = {\n                                event(MappingUiEvent.OnAddEmergencyContact)\n                                event(MappingUiEvent.EmergencyCallDialog(visibility = false))\n                            }\n\n                        )\n                    }\n\n                    if (uiState.deleteHazardousMarkerDialogVisible) {\n                        DeleteHazardousLaneMarkerDialog(\n                            onDismissRequest = {\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(\n                                    visibility = false))\n                            },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            },\n                            onClickConfirmButton = {\n                                event(MappingUiEvent.OnConfirmDeleteIncident)\n                                event(MappingUiEvent.HazardousLaneMarkerDialog(visibility = false))\n                            })\n                    }\n\n                    if (uiState.isNoInternetVisible) {\n                        NoInternetDialog(\n                            onDismiss = { event(MappingUiEvent.NoInternetDialog(visibility = false)) },\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                width = Dimension.matchParent\n                                height = Dimension.wrapContent\n                                this.centerTo(parent)\n                            })\n                    }\n\n                    if (uiState.locationPermissionDialogVisible) {\n                        DialogForegroundLocationPermission(\n                            modifier = Modifier.constrainAs(\n                                dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismiss = { event(MappingUiEvent.LocationPermission(visibility = false)) }\n                        )\n                    }\n\n\n                    if (uiState.notificationPermissionVisible) {\n                        DialogNotificationPermission(\n                            modifier = Modifier.constrainAs(\n                                dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismiss = {\n                                event(\n                                    MappingUiEvent.NotificationPermissionDialog(\n                                        visibility = false))\n                            }\n                        )\n                    }\n\n\n\n                    if(uiState.alertDialogState.visible()){\n                        AlertDialog(\n                            alertDialog = uiState.alertDialogState,\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = { event(MappingUiEvent.AlertDialog(alertDialogState = AlertDialogState())) })\n                    }\n\n                    if (uiState.discardHazardousMarkerDialogVisible) {\n                        DiscardHazardousLaneMarkerDialog(\n                            modifier = Modifier.constrainAs(dialog) {\n                                end.linkTo(parent.end)\n                                start.linkTo(parent.start)\n                                bottom.linkTo(parent.bottom)\n                                height = Dimension.wrapContent\n                                centerTo(parent)\n                            },\n                            onDismissRequest = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                            },\n                            onClickDiscard = {\n                                event(MappingUiEvent.DiscardChangesMarkerDialog(visibility = false))\n                                event(MappingUiEvent.DiscardMarkerChanges)\n                            }\n                        )\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.isRescueCancelled && uiState.rescueRequestAccepted.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n\n                        val rescueTransaction = state.rescueTransaction ?: return@AnimatedVisibility\n\n                        MappingRequestCancelled(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.CancelledRescueConfirmed) },\n                            cancelledRescueModel = CancelledRescueModel(\n                                transactionID = rescueTransaction.id,\n                                rescueCancelledBy = rescueTransaction.getCancellationName(),\n                                reason = rescueTransaction.getCancellationReason(),\n                                message = rescueTransaction.getCancellationMessage()\n                            ))\n                    }\n\n                    AnimatedVisibility(\n                        visible = uiState.rescueRequestAccepted && uiState.isRescueCancelled.not(),\n                        enter = fadeIn(),\n                        exit = fadeOut(animationSpec = tween(durationMillis = 220))) {\n                        MappingRequestAccepted(\n                            modifier = Modifier.fillMaxSize(),\n                            onClickOkButton = { event(MappingUiEvent.RescueRequestAccepted) },\n                            acceptedName = state.rescuee?.name ?: \"Name placeholder\",\n                        )\n                    }\n                }\n            }\n\n\n\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingScreenContent.kt	(date 1698333040664)
@@ -462,10 +462,13 @@
                             ))
                     }
 
+                    val shouldShowAcceptedRescue =  uiState.isRescueCancelled.not() && state.rescueTransaction?.isRescueOnGoing() == true && uiState.rescueRequestAccepted
+
                     AnimatedVisibility(
-                        visible = uiState.rescueRequestAccepted && uiState.isRescueCancelled.not(),
+                        visible = shouldShowAcceptedRescue,
                         enter = fadeIn(),
                         exit = fadeOut(animationSpec = tween(durationMillis = 220))) {
+
                         MappingRequestAccepted(
                             modifier = Modifier.fillMaxSize(),
                             onClickOkButton = { event(MappingUiEvent.RescueRequestAccepted) },
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components.bottomSheet\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport com.example.cyclistance.R\nimport com.example.cyclistance.feature_mapping.domain.model.Role\nimport com.example.cyclistance.feature_mapping.domain.model.ui.bottomSheet.OnGoingRescueModel\nimport com.example.cyclistance.theme.Black440\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport com.example.cyclistance.theme.Red900\n\n@OptIn(ExperimentalMaterialApi::class)\n@Composable\nfun BottomSheetOnGoingRescue(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit,\n    role: String,\n    onGoingRescueModel: OnGoingRescueModel,\n) {\n\n    val isRescuer = remember(role) {\n        role == Role.Rescuer.name\n    }\n\n    Card(\n        modifier = modifier\n            .fillMaxWidth()\n            .shadow(\n                elevation = 12.dp,\n                shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),\n        shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp),\n        backgroundColor = MaterialTheme.colors.surface) {\n\n\n        ConstraintLayout(\n            modifier = Modifier\n                .fillMaxWidth()) {\n\n            val (time, roundedButtonSection, distance, etaIcon, speedometer, grip) = createRefs()\n\n            val etaAvailable by remember(onGoingRescueModel.estimatedTime) {\n                derivedStateOf {\n                    onGoingRescueModel.estimatedTime.isNotEmpty()\n                }\n            }\n\n            Divider(\n                modifier = Modifier\n                    .fillMaxWidth(0.1f)\n                    .padding(vertical = 4.dp)\n                    .constrainAs(grip) {\n                        top.linkTo(parent.top, margin = 4.dp)\n                        end.linkTo(parent.end)\n                        start.linkTo(parent.start)\n                    },\n                thickness = 1.dp, color = MaterialTheme.colors.primary\n            )\n\n            if (!etaAvailable) {\n\n                Text(\n                    text = \"Calculating estimated time of arrival...\",\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier.constrainAs(time) {\n                        top.linkTo(grip.bottom, margin = 12.dp)\n                        start.linkTo(parent.start)\n                        end.linkTo(parent.end)\n                    }\n                )\n\n            }\n\n            if (etaAvailable) {\n\n                if (isRescuer) {\n                    SpeedometerSection(\n                        modifier = Modifier.constrainAs(speedometer) {\n                            top.linkTo(grip.bottom)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                        },\n                        currentSpeed = onGoingRescueModel.currentSpeed,\n                        distance = onGoingRescueModel.ridingDistance,\n                        maxSpeed = onGoingRescueModel.maxSpeed,\n                    )\n                }\n\n                Text(\n                    text = onGoingRescueModel.estimatedTime,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(time) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else grip.bottom,\n                                margin = 4.dp)\n                            end.linkTo(etaIcon.start)\n                        }\n                )\n\n\n                Image(\n                    painter = painterResource(id = R.drawable.ic_eta),\n                    contentDescription = \"ETA\",\n                    modifier = Modifier\n                        .size(20.dp)\n                        .constrainAs(etaIcon) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else grip.bottom,\n                                margin = 4.dp)\n                            start.linkTo(parent.start)\n                            end.linkTo(parent.end)\n                            this.centerHorizontallyTo(parent)\n                        }\n                )\n\n\n                Text(\n                    text = onGoingRescueModel.estimatedDistance,\n                    color = MaterialTheme.colors.onSurface,\n                    style = MaterialTheme.typography.subtitle2,\n                    modifier = Modifier\n                        .padding(horizontal = 12.dp)\n                        .constrainAs(distance) {\n                            top.linkTo(\n                                if (isRescuer) speedometer.bottom else grip.bottom,\n                                margin = 4.dp,\n                            )\n                            start.linkTo(etaIcon.end)\n                        }\n                )\n            }\n\n\n            RoundButtonSection(\n                modifier = Modifier.constrainAs(roundedButtonSection) {\n                    val anchor = if (etaAvailable) etaIcon else time\n                    top.linkTo(anchor.bottom, margin = 6.dp)\n                    end.linkTo(parent.end)\n                    start.linkTo(parent.start)\n                    bottom.linkTo(parent.bottom, margin = 10.dp)\n                },\n                onClickCallButton = onClickCallButton,\n                onClickChatButton = onClickChatButton,\n                onClickCancelButton = onClickCancelButton)\n\n\n        }\n    }\n}\n\n\n@Composable\nfun SpeedometerSection(\n    modifier: Modifier = Modifier,\n    currentSpeed: String,\n    distance: String,\n    maxSpeed: String) {\n\n    Column(\n        modifier = modifier.padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n\n        Text(\n            text = \"Current Speed\",\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize),\n            color = MaterialTheme.colors.onSurface,\n            modifier = Modifier.padding(vertical = 1.dp))\n\n        Text(color = MaterialTheme.colors.onSurface, text = buildAnnotatedString {\n            withStyle(\n                style = SpanStyle(\n                    fontSize = MaterialTheme.typography.subtitle1.fontSize,\n                    fontWeight = FontWeight.Medium)) {\n                append(currentSpeed)\n            }\n            withStyle(style = SpanStyle(fontSize = MaterialTheme.typography.overline.fontSize)) {\n                append(\" km/h\")\n            }\n        }, style = MaterialTheme.typography.subtitle1, modifier = Modifier.padding(vertical = 1.dp))\n\n\n        Column(\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally,\n            modifier = Modifier\n                .padding(vertical = 4.dp)\n                .fillMaxWidth()) {\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n\n            Row(\n                modifier = Modifier\n                    .height(IntrinsicSize.Max)\n                    .fillMaxWidth(),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.SpaceEvenly) {\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Travelled Distance\",\n                    content = distance)\n\n                Divider(\n                    color = Black440, modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp))\n\n\n                ItemSpeed(\n                    modifier = Modifier\n                        .padding(vertical = 4.dp)\n                        .weight(0.3f),\n                    title = \"Max Speed\",\n                    content = maxSpeed)\n            }\n\n            Divider(\n                modifier = Modifier.fillMaxWidth(),\n                color = Black440,\n                thickness = 1.dp,\n            )\n        }\n    }\n}\n\n@Composable\nfun RowScope.ItemSpeed(modifier: Modifier, title: String, content: String) {\n    Column(\n        modifier = modifier\n            .padding(vertical = 4.dp)\n            .weight(0.3f),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center) {\n        Text(\n            text = title,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle2.copy(\n                fontWeight = FontWeight.Normal,\n                fontSize = MaterialTheme.typography.caption.fontSize))\n\n        Text(\n            text = content,\n            color = MaterialTheme.colors.onSurface,\n            style = MaterialTheme.typography.subtitle1.copy(\n                fontWeight = FontWeight.Medium,\n                fontSize = MaterialTheme.typography.button.fontSize))\n    }\n}\n\n@Composable\nprivate fun RoundButtonSection(\n    modifier: Modifier = Modifier,\n    onClickCallButton: () -> Unit,\n    onClickChatButton: () -> Unit,\n    onClickCancelButton: () -> Unit) {\n\n\n    Row(\n        modifier = modifier\n            .background(Color.Transparent)\n            .fillMaxWidth(),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.Center) {\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_call,\n            buttonSubtitle = \"Emergency Call\", onClick = onClickCallButton)\n\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = MaterialTheme.colors.secondary,\n            contentColor = MaterialTheme.colors.onSecondary,\n            imageId = R.drawable.ic_chat,\n            buttonSubtitle = \"Chat\", onClick = onClickChatButton)\n\n\n        RoundedButtonItem(\n            modifier = Modifier.weight(1f),\n            backgroundColor = Red900,\n            contentColor = Color.White,\n            imageId = R.drawable.ic_cancel_1,\n            buttonSubtitle = \"Cancel\", onClick = onClickCancelButton)\n    }\n}\n\n\n@Composable\nprivate fun RoundedButtonItem(\n    modifier: Modifier = Modifier,\n    backgroundColor: Color,\n    contentColor: Color,\n    imageId: Int,\n    buttonSubtitle: String,\n    onClick: () -> Unit) {\n\n    Column(\n        modifier = modifier\n            .wrapContentSize()\n            .padding(vertical = 4.dp),\n        verticalArrangement = Arrangement.spacedBy(\n            space = 7.dp,\n            alignment = Alignment.CenterVertically),\n        horizontalAlignment = Alignment.CenterHorizontally) {\n\n        Button(\n            modifier = Modifier\n                .size(48.dp)\n                .shadow(elevation = 2.dp, shape = CircleShape),\n            onClick = onClick,\n            shape = CircleShape,\n            colors = ButtonDefaults.buttonColors(\n                backgroundColor = backgroundColor,\n                contentColor = contentColor)) {\n\n            Icon(\n                painter = painterResource(id = imageId),\n                contentDescription = null, modifier = Modifier.fillMaxSize())\n        }\n\n        Text(\n            text = buttonSubtitle,\n            color = Black440,\n            style = MaterialTheme.typography.caption,\n            textAlign = TextAlign.Center)\n    }\n}\n\n\n@OptIn(ExperimentalMaterialApi::class)\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Galaxy Nexus\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueDark() {\n\n    CyclistanceTheme(true) {\n\n        val bottomSheetScaffoldState = rememberBottomSheetScaffoldState(\n            bottomSheetState = rememberBottomSheetState(\n                initialValue = BottomSheetValue.Expanded,\n                confirmStateChange = { false })\n        )\n\n        Box {\n\n            MappingBottomSheet(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(horizontal = 12.dp)\n                    .align(Alignment.BottomCenter),\n                bottomSheetScaffoldState = bottomSheetScaffoldState,\n                sheetGesturesEnabled = true,\n                sheetPeekHeight = 55.dp,\n                sheetContent = {\n                    BottomSheetOnGoingRescue(\n                        onClickCancelButton = {},\n                        onClickCallButton = {},\n                        onClickChatButton = {},\n                        onGoingRescueModel = OnGoingRescueModel(\n                            currentSpeed = \"13.3\",\n                            ridingDistance = \"10.0 km\",\n                            maxSpeed = \"36 km/h\",\n                            estimatedDistance = \"9.0 km\",\n                            estimatedTime = \"1h 20m\",\n                        ),\n                        role = Role.Rescuer.name)\n                }, content = {\n                    Box(\n                        contentAlignment = Alignment.BottomCenter,\n                        modifier = Modifier\n                            .fillMaxSize()\n                            .background(MaterialTheme.colors.background)) {\n\n                    }\n                })\n\n        }\n\n\n    }\n}\n\n\n@Preview(name = \"BottomSheetOnGoingRescue\", device = \"id:Nexus 5\")\n@Composable\nprivate fun PreviewBottomSheetOnGoingRescueLight() {\n\n    CyclistanceTheme(false) {\n        Box(\n            contentAlignment = Alignment.BottomCenter,\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colors.background)) {\n\n\n            BottomSheetOnGoingRescue(\n                onClickCancelButton = {},\n                onClickCallButton = {},\n                onClickChatButton = {},\n                onGoingRescueModel = OnGoingRescueModel(\n                    currentSpeed = \"13.3\",\n                    ridingDistance = \"10.0 km\",\n                    maxSpeed = \"36 km/h\",\n                    estimatedDistance = \"9.0 km\",\n                    estimatedTime = \"1h 20m\",\n                ),\n                role = Role.Rescuee.name)\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/bottomSheet/BottomSheetOnGoingRescue.kt	(date 1698333040664)
@@ -141,7 +141,7 @@
 
 
                 Text(
-                    text = onGoingRescueModel.estimatedDistance,
+                    text = onGoingRescueModel.estimatedDistance ?: ".....",
                     color = MaterialTheme.colors.onSurface,
                     style = MaterialTheme.typography.subtitle2,
                     modifier = Modifier
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.event\n\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.hazardous_lane.HazardousLaneMarker\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RouteDirection\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.MapSelectedRescuee\n\n\nsealed class MappingEvent{\n    data object RequestHelpSuccess: MappingEvent()\n    data object InsufficientUserCredential: MappingEvent()\n    data object AcceptRescueRequestSuccess: MappingEvent()\n    //\n    data class LocationNotAvailable(val reason:String = \"Tracking your Location\"): MappingEvent()\n    data class RescuerLocationNotAvailable(val reason:String = \"Can't reach Rescuer\"): MappingEvent()\n    data class UnexpectedError(val reason:String? = \"An unexpected error occurred.\"): MappingEvent()\n    data class UserFailed(val reason: String? = \"User not found\"): MappingEvent()\n\n    data class RespondToHelpSuccess(val reason:String = \"Rescue request sent\"): MappingEvent()\n    data class AddressFailed(val reason: String? = \"Rescue transaction not found\"): MappingEvent()\n    data object NoInternetConnection: MappingEvent()\n\n\n    data class NewSelectedRescuee(val selectedRescuee: MapSelectedRescuee): MappingEvent()\n    data class NewBottomSheetType(val bottomSheetType: String): MappingEvent()\n\n\n\n    data object CancelRescueTransactionSuccess: MappingEvent()\n    data object DestinationArrivedSuccess: MappingEvent()\n    data object RescueRequestAccepted: MappingEvent()\n    data object CancelHelpRequestSuccess: MappingEvent()\n\n    data object RescueHasTransaction: MappingEvent()\n    data object UserHasCurrentTransaction: MappingEvent()\n\n    data object DestinationReached: MappingEvent()\n    data object FailedToCalculateDistance: MappingEvent()\n    data class RemoveRespondentFailed(val reason: String = \"Failed to remove respondent\"): MappingEvent()\n\n    data object ReportIncidentSuccess: MappingEvent()\n    data object IncidentDistanceTooFar: MappingEvent()\n    data class ReportIncidentFailed(val reason: String): MappingEvent()\n    data class SelectHazardousLaneMarker(val marker: HazardousLaneMarker): MappingEvent()\n    data object UpdateIncidentSuccess: MappingEvent()\n    data class UpdateIncidentFailed(val reason: String): MappingEvent()\n\n    data object DeleteHazardousLaneMarkerSuccess: MappingEvent()\n    data class DeleteHazardousLaneMarkerFailed(val reason: String): MappingEvent()\n\n    data class GenerateRouteNavigationSuccess(val routeDirection: RouteDirection): MappingEvent()\n    data class GenerateRouteNavigationFailed(val reason: String = \"Failed to generate route navigation\"): MappingEvent()\n\n    data object RescueArrivedSuccess: MappingEvent()\n    data class RescueArrivedFailed(val reason: String): MappingEvent()\n\n\n\n    data object CancelRespondSuccess: MappingEvent()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingEvent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingEvent.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingEvent.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/event/MappingEvent.kt	(date 1698333040664)
@@ -33,7 +33,6 @@
     data object RescueHasTransaction: MappingEvent()
     data object UserHasCurrentTransaction: MappingEvent()
 
-    data object DestinationReached: MappingEvent()
     data object FailedToCalculateDistance: MappingEvent()
     data class RemoveRespondentFailed(val reason: String = "Failed to remove respondent"): MappingEvent()
 
Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.state\n\nimport android.os.Parcelable\nimport com.example.cyclistance.core.utils.annotations.StableState\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.rescue_transaction.RescueTransactionItem\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.LocationModel\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.NearbyCyclist\nimport com.example.cyclistance.feature_mapping.domain.model.remote_models.user.UserItem\nimport com.example.cyclistance.feature_mapping.domain.model.ui.rescue.NewRescueRequestsModel\nimport com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.utils.MapType\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@StableState\ndata class MappingState(\n    val isLoading: Boolean = false,\n    val userLocation: LocationModel? = null,\n    val rescueTransaction: RescueTransactionItem? = null,\n    val user: UserItem = UserItem(),\n    val rescuer: UserItem? = null,\n    val rescuee: UserItem? = null,\n    val profileUploaded: Boolean = false,\n    val respondedToHelp: Boolean = false,\n    val transactionLocation: LocationModel? = null,\n    val rescueETA: String = \"\",\n    val rescueDistance: String = \"\",\n    val newRescueRequest: NewRescueRequestsModel? = null,\n    val speedometerState: SpeedometerState = SpeedometerState(),\n    val nearbyCyclist: NearbyCyclist? = null,\n    val mapType: String = MapType.Default.type,\n    val userId: String = \"\",\n    val shouldShowHazardousStartingInfo: Boolean = false,\n    val lastRequestNotifiedId: String = \"\",\n) : Parcelable{\n\n\n    fun getTransactionId() = user.getTransactionId() ?: rescueTransaction?.id ?: \"\"\n    fun getTopSpeed() = speedometerState.topSpeed\n\n    fun getCurrentLocation() = user.location ?: userLocation\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt
--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(revision e4627ba14b02c1c49d7a77f7cbdfbf6601f072eb)
+++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/state/MappingState.kt	(date 1698333040664)
@@ -23,7 +23,7 @@
     val respondedToHelp: Boolean = false,
     val transactionLocation: LocationModel? = null,
     val rescueETA: String = "",
-    val rescueDistance: String = "",
+    val rescueDistance: Double? = null,
     val newRescueRequest: NewRescueRequestsModel? = null,
     val speedometerState: SpeedometerState = SpeedometerState(),
     val nearbyCyclist: NearbyCyclist? = null,
