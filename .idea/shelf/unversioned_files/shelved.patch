Index: .idea/shelf/Stash_xml_logs/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Stash_xml_logs/shelved.patch b/.idea/shelf/Stash_xml_logs/shelved.patch
new file mode 100644
--- /dev/null	(date 1685546694113)
+++ b/.idea/shelf/Stash_xml_logs/shelved.patch	(date 1685546694113)
@@ -0,0 +1,34 @@
+Index: .idea/shelf/Fix_BottomSheetPreview.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><changelist name=\"Fix_BottomSheetPreview\" date=\"1685462113550\" recycled=\"false\">\n  <option name=\"PATH\" value=\"$PROJECT_DIR$/.idea/shelf/Fix_BottomSheetPreview/shelved.patch\" />\n  <option name=\"DESCRIPTION\" value=\"Fix BottomSheetPreview\" />\n</changelist>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/shelf/Fix_BottomSheetPreview.xml b/.idea/shelf/Fix_BottomSheetPreview.xml
+--- a/.idea/shelf/Fix_BottomSheetPreview.xml	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/.idea/shelf/Fix_BottomSheetPreview.xml	(date 1685546285794)
+@@ -1,4 +1,4 @@
+-<changelist name="Fix_BottomSheetPreview" date="1685462113550" recycled="false">
++<changelist name="Fix_BottomSheetPreview" date="1685545636942" recycled="false" deleted="true">
+   <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Fix_BottomSheetPreview/shelved.patch" />
+   <option name="DESCRIPTION" value="Fix BottomSheetPreview" />
+ </changelist>
+\ No newline at end of file
+Index: .idea/shelf/Remove_runtime_permission_request_.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><changelist name=\"Remove_runtime_permission_request_\" date=\"1685462100905\" recycled=\"false\">\n  <option name=\"PATH\" value=\"$PROJECT_DIR$/.idea/shelf/Remove_runtime_permission_request_/shelved.patch\" />\n  <option name=\"DESCRIPTION\" value=\"Remove runtime permission request.\" />\n</changelist>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/shelf/Remove_runtime_permission_request_.xml b/.idea/shelf/Remove_runtime_permission_request_.xml
+--- a/.idea/shelf/Remove_runtime_permission_request_.xml	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/.idea/shelf/Remove_runtime_permission_request_.xml	(date 1685546285784)
+@@ -1,4 +1,4 @@
+-<changelist name="Remove_runtime_permission_request_" date="1685462100905" recycled="false">
++<changelist name="Remove_runtime_permission_request_" date="1685545636944" recycled="false" deleted="true">
+   <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Remove_runtime_permission_request_/shelved.patch" />
+   <option name="DESCRIPTION" value="Remove runtime permission request." />
+ </changelist>
+\ No newline at end of file
Index: .idea/shelf/Stash_xml_logs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Stash_xml_logs.xml b/.idea/shelf/Stash_xml_logs.xml
new file mode 100644
--- /dev/null	(date 1685546694517)
+++ b/.idea/shelf/Stash_xml_logs.xml	(date 1685546694517)
@@ -0,0 +1,4 @@
+<changelist name="Stash_xml_logs" date="1685546694116" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Stash_xml_logs/shelved.patch" />
+  <option name="DESCRIPTION" value="Stash xml logs" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Add_withContext(scope){_}_inside_repositoryImpl_functions/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Add_withContext(scope){_}_inside_repositoryImpl_functions/shelved.patch b/.idea/shelf/Add_withContext(scope){_}_inside_repositoryImpl_functions/shelved.patch
new file mode 100644
--- /dev/null	(date 1685546673750)
+++ b/.idea/shelf/Add_withContext(scope){_}_inside_repositoryImpl_functions/shelved.patch	(date 1685546673750)
@@ -0,0 +1,567 @@
+Index: app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.example.cyclistance.feature_readable_displays.data.repository\n\nimport android.content.Context\nimport com.example.cyclistance.core.utils.constants.ReadableConstants.DATA_STORE_INTRO_SLIDER_KEY\nimport com.example.cyclistance.core.utils.extension.editData\nimport com.example.cyclistance.core.utils.extension.getData\nimport com.example.cyclistance.feature_mapping.data.repository.dataStore\nimport com.example.cyclistance.feature_readable_displays.domain.repository.IntroSliderRepository\nimport kotlinx.coroutines.flow.Flow\n\n\nclass IntroSliderRepositoryImpl(context: Context) : IntroSliderRepository {\n    private var dataStore = context.dataStore\n\n    override fun userCompletedWalkThrough(): Flow<Boolean> {\n        return dataStore.getData(key = DATA_STORE_INTRO_SLIDER_KEY, defaultValue = false)\n    }\n\n    override suspend fun setUserCompletedWalkThrough() {\n        dataStore.editData(DATA_STORE_INTRO_SLIDER_KEY, true)\n    }\n\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt
+--- a/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/app/src/main/java/com/example/cyclistance/feature_readable_displays/data/repository/IntroSliderRepositoryImpl.kt	(date 1685544838607)
+@@ -6,10 +6,15 @@
+ import com.example.cyclistance.core.utils.extension.getData
+ import com.example.cyclistance.feature_mapping.data.repository.dataStore
+ import com.example.cyclistance.feature_readable_displays.domain.repository.IntroSliderRepository
++import kotlinx.coroutines.Dispatchers
+ import kotlinx.coroutines.flow.Flow
++import kotlinx.coroutines.withContext
++import kotlin.coroutines.CoroutineContext
+ 
+ 
+-class IntroSliderRepositoryImpl(context: Context) : IntroSliderRepository {
++class IntroSliderRepositoryImpl(
++    context: Context,
++    private val scope: CoroutineContext = Dispatchers.IO) : IntroSliderRepository {
+     private var dataStore = context.dataStore
+ 
+     override fun userCompletedWalkThrough(): Flow<Boolean> {
+@@ -17,7 +22,9 @@
+     }
+ 
+     override suspend fun setUserCompletedWalkThrough() {
+-        dataStore.editData(DATA_STORE_INTRO_SLIDER_KEY, true)
++        withContext(scope) {
++            dataStore.editData(DATA_STORE_INTRO_SLIDER_KEY, true)
++        }
+     }
+ 
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.example.cyclistance.feature_settings.data.repository\n\nimport android.content.Context\nimport android.net.Uri\nimport android.os.Bundle\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.AuthConstants\nimport com.example.cyclistance.core.utils.constants.AuthConstants.IMAGE_LARGE_SIZE\nimport com.example.cyclistance.core.utils.constants.AuthConstants.IMAGE_SMALL_SIZE\nimport com.example.cyclistance.core.utils.constants.SettingConstants.DATA_STORE_THEME_KEY\nimport com.example.cyclistance.core.utils.extension.editData\nimport com.example.cyclistance.core.utils.extension.getData\nimport com.example.cyclistance.feature_mapping.data.repository.dataStore\nimport com.example.cyclistance.feature_settings.domain.exceptions.SettingExceptions\nimport com.example.cyclistance.feature_settings.domain.repository.SettingRepository\nimport com.facebook.AccessToken\nimport com.facebook.GraphRequest\nimport com.google.firebase.FirebaseException\nimport com.google.firebase.FirebaseNetworkException\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.userProfileChangeRequest\nimport com.google.firebase.storage.FirebaseStorage\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport org.json.JSONObject\nimport kotlin.coroutines.resume\nimport kotlin.coroutines.resumeWithException\n\n\nclass SettingRepositoryImpl(\n    val context: Context,\n    private val auth: FirebaseAuth,\n    private val storage: FirebaseStorage\n\n) : SettingRepository {\n    private var dataStore = context.dataStore\n\n\n    override suspend fun toggleTheme(value: Boolean) {\n        dataStore.editData(DATA_STORE_THEME_KEY, value)\n    }\n\n    override fun isDarkTheme(): Flow<Boolean> {\n        return dataStore.getData(key = DATA_STORE_THEME_KEY, defaultValue = false)\n    }\n\n    override suspend fun updatePhoneNumber(phoneNumber: String) {\n        dataStore.editData(AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, phoneNumber)\n    }\n\n    override fun getPhoneNumber(): Flow<String> {\n        return dataStore.getData(key = AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, defaultValue = \"\")\n    }\n\n\n    override suspend fun updateProfile(photoUrl: String?, name: String?): Boolean {\n        val profileUpdates = userProfileChangeRequest {\n            name?.let { this.displayName = it }\n            photoUrl?.let { this.photoUri = Uri.parse(photoUrl) }\n        }\n\n\n        if (!context.hasInternetConnection()) {\n            throw SettingExceptions.NetworkException(message = context.getString(R.string.no_internet_message))\n        }\n\n        return suspendCancellableCoroutine { continuation ->\n            auth.currentUser?.updateProfile(profileUpdates)\n                ?.addOnCompleteListener { updateProfile ->\n                    updateProfile.exception?.let { exception ->\n\n                        if (exception is FirebaseNetworkException) {\n                            continuation.resumeWithException(\n                                SettingExceptions.NetworkException(\n                                    message = context.getString(R.string.no_internet_message)))\n                        }\n\n                        if (exception is FirebaseException) {\n\n                            continuation.resumeWithException(\n                                SettingExceptions.InternalServerException(\n                                    message = exception.message\n                                              ?: context.getString(R.string.somethingWentWrong))\n                            )\n                        }\n\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(updateProfile.isSuccessful)\n                    }\n                }\n        }\n    }\n\n\n    override suspend fun uploadImage(v: String): String {\n        val id = auth.currentUser?.uid\n        val reference = storage.reference.child(\"images/${id}\")\n        val uploadTask = reference.putFile(Uri.parse(v))\n        return suspendCancellableCoroutine { continuation ->\n            uploadTask.addOnCompleteListener { task ->\n                task.exception?.let { exception ->\n                    if (exception is FirebaseNetworkException) {\n                        continuation.resumeWithException(\n                            SettingExceptions.NetworkException(\n                                message = context.getString(R.string.no_internet_message)))\n                    }\n                }\n\n                if (task.isSuccessful) {\n                    reference.downloadUrl.addOnSuccessListener{\n                        continuation.resume(it.toString())\n                    }\n                }\n\n            }\n        }\n    }\n\n    private fun getFacebookToken(): AccessToken?{\n        return AccessToken.getCurrentAccessToken()\n    }\n\n    private suspend fun getUserFacebookInformation(): String?{\n        return suspendCancellableCoroutine { continuation ->\n            val request = GraphRequest.newMeRequest(getFacebookToken()) { jsonObject: JSONObject?, _ ->\n                val result = jsonObject.toString().takeUnless { it == \"null\" }\n                continuation.resume(result)\n            }\n            val parameters = Bundle()\n            parameters.putString(\"fields\", \"id,name, email, link, picture.type(large)\")\n            request.parameters = parameters\n            request.executeAsync()\n        }\n    }\n\n\n    override suspend fun getName(): String? {\n        val infoString = getUserFacebookInformation()\n        val jsonObject = infoString?.let(::JSONObject)\n        val fbName = jsonObject?.getString(\"name\")\n        val authName: String? = auth.currentUser?.displayName\n        return authName?.takeIf { it.isNotEmpty() } ?: fbName\n    }\n\n    override suspend fun getPhotoUrl(): String? {\n        val infoString = getUserFacebookInformation()\n        val jsonObject = infoString?.let(::JSONObject)\n        val fbPhotoUrl = jsonObject?.getJSONObject(\"picture\")?.getJSONObject(\"data\")?.getString(\"url\")\n        val authPhotoUrl: String = auth.currentUser?.photoUrl.toString().apply {\n            replace(oldValue = IMAGE_SMALL_SIZE, newValue = IMAGE_LARGE_SIZE)\n        }\n        return authPhotoUrl.takeIf { it.isNotEmpty() } ?: fbPhotoUrl\n\n    }\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt
+--- a/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/app/src/main/java/com/example/cyclistance/feature_settings/data/repository/SettingRepositoryImpl.kt	(date 1685544854543)
+@@ -21,9 +21,12 @@
+ import com.google.firebase.auth.FirebaseAuth
+ import com.google.firebase.auth.ktx.userProfileChangeRequest
+ import com.google.firebase.storage.FirebaseStorage
++import kotlinx.coroutines.Dispatchers
+ import kotlinx.coroutines.flow.Flow
+ import kotlinx.coroutines.suspendCancellableCoroutine
++import kotlinx.coroutines.withContext
+ import org.json.JSONObject
++import kotlin.coroutines.CoroutineContext
+ import kotlin.coroutines.resume
+ import kotlin.coroutines.resumeWithException
+ 
+@@ -31,14 +34,17 @@
+ class SettingRepositoryImpl(
+     val context: Context,
+     private val auth: FirebaseAuth,
+-    private val storage: FirebaseStorage
++    private val storage: FirebaseStorage,
++    private val scope: CoroutineContext = Dispatchers.IO
+ 
+ ) : SettingRepository {
+     private var dataStore = context.dataStore
+ 
+ 
+     override suspend fun toggleTheme(value: Boolean) {
+-        dataStore.editData(DATA_STORE_THEME_KEY, value)
++        withContext(scope) {
++            dataStore.editData(DATA_STORE_THEME_KEY, value)
++        }
+     }
+ 
+     override fun isDarkTheme(): Flow<Boolean> {
+@@ -46,7 +52,9 @@
+     }
+ 
+     override suspend fun updatePhoneNumber(phoneNumber: String) {
+-        dataStore.editData(AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, phoneNumber)
++        withContext(scope) {
++            dataStore.editData(AuthConstants.DATA_STORE_PHONE_NUMBER_KEY, phoneNumber)
++        }
+     }
+ 
+     override fun getPhoneNumber(): Flow<String> {
+@@ -65,31 +73,33 @@
+             throw SettingExceptions.NetworkException(message = context.getString(R.string.no_internet_message))
+         }
+ 
+-        return suspendCancellableCoroutine { continuation ->
+-            auth.currentUser?.updateProfile(profileUpdates)
+-                ?.addOnCompleteListener { updateProfile ->
+-                    updateProfile.exception?.let { exception ->
++        return withContext(scope) {
++            suspendCancellableCoroutine { continuation ->
++                auth.currentUser?.updateProfile(profileUpdates)
++                    ?.addOnCompleteListener { updateProfile ->
++                        updateProfile.exception?.let { exception ->
+ 
+-                        if (exception is FirebaseNetworkException) {
+-                            continuation.resumeWithException(
+-                                SettingExceptions.NetworkException(
+-                                    message = context.getString(R.string.no_internet_message)))
+-                        }
++                            if (exception is FirebaseNetworkException) {
++                                continuation.resumeWithException(
++                                    SettingExceptions.NetworkException(
++                                        message = context.getString(R.string.no_internet_message)))
++                            }
+ 
+-                        if (exception is FirebaseException) {
++                            if (exception is FirebaseException) {
+ 
+-                            continuation.resumeWithException(
+-                                SettingExceptions.InternalServerException(
+-                                    message = exception.message
+-                                              ?: context.getString(R.string.somethingWentWrong))
+-                            )
+-                        }
++                                continuation.resumeWithException(
++                                    SettingExceptions.InternalServerException(
++                                        message = exception.message
++                                                  ?: context.getString(R.string.somethingWentWrong))
++                                )
++                            }
+ 
+-                    }
+-                    if (continuation.isActive) {
+-                        continuation.resume(updateProfile.isSuccessful)
++                        }
++                        if (continuation.isActive) {
++                            continuation.resume(updateProfile.isSuccessful)
++                        }
+                     }
+-                }
++            }
+         }
+     }
+ 
+@@ -98,60 +108,71 @@
+         val id = auth.currentUser?.uid
+         val reference = storage.reference.child("images/${id}")
+         val uploadTask = reference.putFile(Uri.parse(v))
+-        return suspendCancellableCoroutine { continuation ->
+-            uploadTask.addOnCompleteListener { task ->
+-                task.exception?.let { exception ->
+-                    if (exception is FirebaseNetworkException) {
+-                        continuation.resumeWithException(
+-                            SettingExceptions.NetworkException(
+-                                message = context.getString(R.string.no_internet_message)))
+-                    }
+-                }
++        return withContext(scope) {
++            suspendCancellableCoroutine { continuation ->
++                uploadTask.addOnCompleteListener { task ->
++                    task.exception?.let { exception ->
++                        if (exception is FirebaseNetworkException) {
++                            continuation.resumeWithException(
++                                SettingExceptions.NetworkException(
++                                    message = context.getString(R.string.no_internet_message)))
++                        }
++                    }
+ 
+-                if (task.isSuccessful) {
+-                    reference.downloadUrl.addOnSuccessListener{
+-                        continuation.resume(it.toString())
+-                    }
+-                }
++                    if (task.isSuccessful) {
++                        reference.downloadUrl.addOnSuccessListener {
++                            continuation.resume(it.toString())
++                        }
++                    }
+ 
++                }
+             }
+         }
+     }
+ 
+-    private fun getFacebookToken(): AccessToken?{
++    private fun getFacebookToken(): AccessToken? {
+         return AccessToken.getCurrentAccessToken()
+     }
+ 
+-    private suspend fun getUserFacebookInformation(): String?{
+-        return suspendCancellableCoroutine { continuation ->
+-            val request = GraphRequest.newMeRequest(getFacebookToken()) { jsonObject: JSONObject?, _ ->
+-                val result = jsonObject.toString().takeUnless { it == "null" }
+-                continuation.resume(result)
+-            }
+-            val parameters = Bundle()
+-            parameters.putString("fields", "id,name, email, link, picture.type(large)")
+-            request.parameters = parameters
+-            request.executeAsync()
++    private suspend fun getUserFacebookInformation(): String? {
++        return withContext(scope) {
++            suspendCancellableCoroutine { continuation ->
++                val request =
++                    GraphRequest.newMeRequest(getFacebookToken()) { jsonObject: JSONObject?, _ ->
++                        val result = jsonObject.toString().takeUnless { it == "null" }
++                        continuation.resume(result)
++                    }
++                val parameters = Bundle()
++                parameters.putString("fields", "id,name, email, link, picture.type(large)")
++                request.parameters = parameters
++                request.executeAsync()
++            }
+         }
+     }
+ 
+ 
+     override suspend fun getName(): String? {
+-        val infoString = getUserFacebookInformation()
+-        val jsonObject = infoString?.let(::JSONObject)
+-        val fbName = jsonObject?.getString("name")
+-        val authName: String? = auth.currentUser?.displayName
+-        return authName?.takeIf { it.isNotEmpty() } ?: fbName
++        return withContext(scope) {
++            val infoString = getUserFacebookInformation()
++            val jsonObject = infoString?.let(::JSONObject)
++            val fbName = jsonObject?.getString("name")
++            val authName: String? = auth.currentUser?.displayName
++            authName?.takeIf { it.isNotEmpty() } ?: fbName
++        }
++
+     }
+ 
+     override suspend fun getPhotoUrl(): String? {
+-        val infoString = getUserFacebookInformation()
+-        val jsonObject = infoString?.let(::JSONObject)
+-        val fbPhotoUrl = jsonObject?.getJSONObject("picture")?.getJSONObject("data")?.getString("url")
+-        val authPhotoUrl: String = auth.currentUser?.photoUrl.toString().apply {
+-            replace(oldValue = IMAGE_SMALL_SIZE, newValue = IMAGE_LARGE_SIZE)
++        return withContext(scope) {
++            val infoString = getUserFacebookInformation()
++            val jsonObject = infoString?.let(::JSONObject)
++            val fbPhotoUrl =
++                jsonObject?.getJSONObject("picture")?.getJSONObject("data")?.getString("url")
++            val authPhotoUrl: String = auth.currentUser?.photoUrl.toString().apply {
++                replace(oldValue = IMAGE_SMALL_SIZE, newValue = IMAGE_LARGE_SIZE)
++            }
++            authPhotoUrl.takeIf { it.isNotEmpty() } ?: fbPhotoUrl
+         }
+-        return authPhotoUrl.takeIf { it.isNotEmpty() } ?: fbPhotoUrl
+ 
+     }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.example.cyclistance.feature_authentication.data.repository\n\nimport android.content.Context\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.AuthConstants.FACEBOOK_CONNECTION_FAILURE\nimport com.example.cyclistance.core.utils.constants.AuthConstants.USER_NOT_FOUND\nimport com.example.cyclistance.feature_authentication.domain.exceptions.AuthExceptions\nimport com.example.cyclistance.feature_authentication.domain.model.SignInCredential\nimport com.example.cyclistance.feature_authentication.domain.repository.AuthRepository\nimport com.google.firebase.FirebaseNetworkException\nimport com.google.firebase.FirebaseTooManyRequestsException\nimport com.google.firebase.auth.FacebookAuthProvider\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.FirebaseAuthInvalidCredentialsException\nimport com.google.firebase.auth.FirebaseAuthInvalidUserException\nimport com.google.firebase.auth.FirebaseAuthUserCollisionException\nimport com.google.firebase.auth.GoogleAuthProvider\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport timber.log.Timber\nimport kotlin.coroutines.resume\nimport kotlin.coroutines.resumeWithException\n\n\nclass AuthRepositoryImpl(\n    private val context: Context,\n    private val auth: FirebaseAuth,\n    ) : AuthRepository {\n\n\n\n\n    override suspend fun reloadEmail(): Boolean {\n        return suspendCancellableCoroutine { continuation ->\n            auth.currentUser?.reload()?.addOnCompleteListener { reload ->\n                reload.exception?.let { exception ->\n                    if (exception is FirebaseNetworkException) {\n                        continuation.resumeWithException(\n                            AuthExceptions.NetworkException(\n                                message = context.getString(\n                                    R.string.no_internet_message)))\n                    }\n                }\n                if (continuation.isActive) {\n                    continuation.resume(reload.isSuccessful)\n                }\n            }\n        }\n    }\n\n    override suspend fun sendEmailVerification(): Boolean {\n        return suspendCancellableCoroutine { continuation ->\n            auth.currentUser?.sendEmailVerification()?.addOnCompleteListener { sendEmail ->\n                sendEmail.exception?.let {\n                    continuation.resumeWithException(\n                        AuthExceptions.EmailVerificationException(message = context.getString(R.string.failed_email_verification)))\n                }\n                if (continuation.isActive) {\n                    continuation.resume(sendEmail.isSuccessful)\n                }\n            }\n        }\n    }\n\n    override suspend fun createUserWithEmailAndPassword(email: String, password: String): Boolean {\n\n        if(!context.hasInternetConnection()){\n            throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))\n        }\n\n        return suspendCancellableCoroutine { continuation ->\n            auth.createUserWithEmailAndPassword(email.trim(), password.trim())\n                .addOnCompleteListener { createAccount ->\n                    createAccount.exception?.let { exception ->\n                        if (exception is FirebaseNetworkException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(R.string.no_internet_message)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is FirebaseAuthUserCollisionException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.UserAlreadyExistsException(\n                                    title = context.getString(R.string.userAlreadyExists),\n                                    message = context.getString(R.string.accountAlreadyInUse)))\n                            return@addOnCompleteListener\n                        }\n                        continuation.resumeWithException(exception)\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(createAccount.isSuccessful)\n                    }\n                }\n        }\n    }\n\n    override suspend fun signInWithEmailAndPassword(email: String, password: String): Boolean {\n\n        if(!context.hasInternetConnection()){\n            throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))\n        }\n\n        return suspendCancellableCoroutine { continuation ->\n            auth.signInWithEmailAndPassword(email.trim(), password.trim())\n                .addOnCompleteListener { signInWithEmailAndPassword ->\n                    signInWithEmailAndPassword.exception?.let { exception ->\n                        Timber.e(exception.message)\n                        if (exception is FirebaseNetworkException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(\n                                        R.string.no_internet_message)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is FirebaseAuthInvalidCredentialsException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.PasswordException(\n                                    message = context.getString(\n                                        R.string.incorrectPasswordMessage)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is FirebaseAuthInvalidUserException) {\n                            if (exception.errorCode == USER_NOT_FOUND) {\n                                continuation.resumeWithException(\n                                    AuthExceptions.EmailException(\n                                        message = context.getString(\n                                            R.string.couldntFindAccount)))\n                                return@addOnCompleteListener\n                            }\n                        }\n\n                        if (exception is FirebaseTooManyRequestsException) {\n                            continuation.resumeWithException(\n                                AuthExceptions.TooManyRequestsException(\n                                    title = context.getString(\n                                        R.string.tooManyFailedAttempts),\n                                    message = context.getString(R.string.manyFailedAttempts)))\n                            return@addOnCompleteListener\n                        }\n\n                        if (exception is IllegalStateException) {\n                            Timber.e(exception.message)\n                        }\n\n                        continuation.resumeWithException(exception)\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(signInWithEmailAndPassword.isSuccessful)\n                    }\n                }\n        }\n    }\n\n\n    override suspend fun signInWithCredential(credential: SignInCredential): Boolean {\n        return suspendCancellableCoroutine { continuation ->\n\n            val signInCredential = when(credential){\n                is SignInCredential.Google -> GoogleAuthProvider.getCredential(credential.providerToken, null)\n                is SignInCredential.Facebook -> FacebookAuthProvider.getCredential(credential.providerToken)\n            }\n\n\n            auth.signInWithCredential(signInCredential)\n                .addOnCompleteListener { signInWithCredential ->\n                    signInWithCredential.exception?.let { exception ->\n                        if (exception.message == FACEBOOK_CONNECTION_FAILURE) {\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(\n                                        R.string.no_internet_message)))\n                        }\n\n                        if(exception is FirebaseNetworkException){\n                            continuation.resumeWithException(\n                                AuthExceptions.NetworkException(\n                                    message = context.getString(R.string.no_internet_message)))\n                            return@addOnCompleteListener\n                        }\n\n                        continuation.resumeWithException(\n                            AuthExceptions.ConflictFBTokenException(\n                                exception.message\n                                ?: \"Sorry, something went wrong. Please try again.\"))\n                    }\n                    if (continuation.isActive) {\n                        continuation.resume(signInWithCredential.isSuccessful)\n                    }\n                }\n        }\n    }\n\n    override fun signOut() {\n        auth.signOut()\n    }\n\n    override fun getId(): String? {\n        return auth.currentUser?.uid\n    }\n\n    override fun getEmail(): String? {\n        return auth.currentUser?.email\n    }\n\n\n\n\n\n    override fun isSignedInWithProvider(): Boolean? {\n        return auth.currentUser?.providerData?.any {\n            it.providerId == FacebookAuthProvider.PROVIDER_ID ||\n            it.providerId == GoogleAuthProvider.PROVIDER_ID\n        }\n    }\n\n    override fun isEmailVerified(): Boolean? {\n        return auth.currentUser?.isEmailVerified\n    }\n\n    override fun hasAccountSignedIn(): Boolean {\n        return auth.currentUser != null\n    }\n\n\n\n\n\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt b/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt
+--- a/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/app/src/main/java/com/example/cyclistance/feature_authentication/data/repository/AuthRepositoryImpl.kt	(date 1685544947718)
+@@ -16,8 +16,11 @@
+ import com.google.firebase.auth.FirebaseAuthInvalidUserException
+ import com.google.firebase.auth.FirebaseAuthUserCollisionException
+ import com.google.firebase.auth.GoogleAuthProvider
++import kotlinx.coroutines.Dispatchers
+ import kotlinx.coroutines.suspendCancellableCoroutine
++import kotlinx.coroutines.withContext
+ import timber.log.Timber
++import kotlin.coroutines.CoroutineContext
+ import kotlin.coroutines.resume
+ import kotlin.coroutines.resumeWithException
+ 
+@@ -25,38 +28,41 @@
+ class AuthRepositoryImpl(
+     private val context: Context,
+     private val auth: FirebaseAuth,
++    private val scope: CoroutineContext = Dispatchers.IO
+     ) : AuthRepository {
+ 
+ 
+ 
+ 
+     override suspend fun reloadEmail(): Boolean {
+-        return suspendCancellableCoroutine { continuation ->
+-            auth.currentUser?.reload()?.addOnCompleteListener { reload ->
+-                reload.exception?.let { exception ->
+-                    if (exception is FirebaseNetworkException) {
+-                        continuation.resumeWithException(
+-                            AuthExceptions.NetworkException(
+-                                message = context.getString(
+-                                    R.string.no_internet_message)))
+-                    }
+-                }
+-                if (continuation.isActive) {
+-                    continuation.resume(reload.isSuccessful)
++        return withContext(scope) {
++             suspendCancellableCoroutine { continuation ->
++                auth.currentUser?.reload()?.addOnCompleteListener { reload ->
++                    reload.exception?.let { exception ->
++                        if (exception is FirebaseNetworkException) {
++                            continuation.resumeWithException(AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message)))
++                        }
++                    }
++                    if (continuation.isActive) {
++                        continuation.resume(reload.isSuccessful)
++                    }
+                 }
+             }
+         }
+     }
+ 
+     override suspend fun sendEmailVerification(): Boolean {
+-        return suspendCancellableCoroutine { continuation ->
+-            auth.currentUser?.sendEmailVerification()?.addOnCompleteListener { sendEmail ->
+-                sendEmail.exception?.let {
+-                    continuation.resumeWithException(
+-                        AuthExceptions.EmailVerificationException(message = context.getString(R.string.failed_email_verification)))
+-                }
+-                if (continuation.isActive) {
+-                    continuation.resume(sendEmail.isSuccessful)
++        return withContext(scope) {
++
++            suspendCancellableCoroutine { continuation ->
++                auth.currentUser?.sendEmailVerification()?.addOnCompleteListener { sendEmail ->
++                    sendEmail.exception?.let {
++                        continuation.resumeWithException(
++                            AuthExceptions.EmailVerificationException(message = context.getString(R.string.failed_email_verification)))
++                    }
++                    if (continuation.isActive) {
++                        continuation.resume(sendEmail.isSuccessful)
++                    }
+                 }
+             }
+         }
+@@ -68,30 +74,32 @@
+             throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))
+         }
+ 
+-        return suspendCancellableCoroutine { continuation ->
+-            auth.createUserWithEmailAndPassword(email.trim(), password.trim())
+-                .addOnCompleteListener { createAccount ->
+-                    createAccount.exception?.let { exception ->
+-                        if (exception is FirebaseNetworkException) {
+-                            continuation.resumeWithException(
+-                                AuthExceptions.NetworkException(
+-                                    message = context.getString(R.string.no_internet_message)))
+-                            return@addOnCompleteListener
+-                        }
++        return withContext(scope) {
++            suspendCancellableCoroutine { continuation ->
++                auth.createUserWithEmailAndPassword(email.trim(), password.trim())
++                    .addOnCompleteListener { createAccount ->
++                        createAccount.exception?.let { exception ->
++                            if (exception is FirebaseNetworkException) {
++                                continuation.resumeWithException(
++                                    AuthExceptions.NetworkException(
++                                        message = context.getString(R.string.no_internet_message)))
++                                return@addOnCompleteListener
++                            }
+ 
+-                        if (exception is FirebaseAuthUserCollisionException) {
+-                            continuation.resumeWithException(
+-                                AuthExceptions.UserAlreadyExistsException(
+-                                    title = context.getString(R.string.userAlreadyExists),
+-                                    message = context.getString(R.string.accountAlreadyInUse)))
+-                            return@addOnCompleteListener
+-                        }
+-                        continuation.resumeWithException(exception)
+-                    }
+-                    if (continuation.isActive) {
+-                        continuation.resume(createAccount.isSuccessful)
++                            if (exception is FirebaseAuthUserCollisionException) {
++                                continuation.resumeWithException(
++                                    AuthExceptions.UserAlreadyExistsException(
++                                        title = context.getString(R.string.userAlreadyExists),
++                                        message = context.getString(R.string.accountAlreadyInUse)))
++                                return@addOnCompleteListener
++                            }
++                            continuation.resumeWithException(exception)
++                        }
++                        if (continuation.isActive) {
++                            continuation.resume(createAccount.isSuccessful)
++                        }
+                     }
+-                }
++            }
+         }
+     }
+ 
+@@ -101,95 +109,99 @@
+             throw AuthExceptions.NetworkException(message = context.getString(R.string.no_internet_message))
+         }
+ 
+-        return suspendCancellableCoroutine { continuation ->
+-            auth.signInWithEmailAndPassword(email.trim(), password.trim())
+-                .addOnCompleteListener { signInWithEmailAndPassword ->
+-                    signInWithEmailAndPassword.exception?.let { exception ->
+-                        Timber.e(exception.message)
+-                        if (exception is FirebaseNetworkException) {
+-                            continuation.resumeWithException(
+-                                AuthExceptions.NetworkException(
+-                                    message = context.getString(
+-                                        R.string.no_internet_message)))
+-                            return@addOnCompleteListener
+-                        }
++        return withContext(scope) {
++            suspendCancellableCoroutine { continuation ->
++                auth.signInWithEmailAndPassword(email.trim(), password.trim())
++                    .addOnCompleteListener { signInWithEmailAndPassword ->
++                        signInWithEmailAndPassword.exception?.let { exception ->
++                            Timber.e(exception.message)
++                            if (exception is FirebaseNetworkException) {
++                                continuation.resumeWithException(
++                                    AuthExceptions.NetworkException(
++                                        message = context.getString(
++                                            R.string.no_internet_message)))
++                                return@addOnCompleteListener
++                            }
+ 
+-                        if (exception is FirebaseAuthInvalidCredentialsException) {
+-                            continuation.resumeWithException(
+-                                AuthExceptions.PasswordException(
+-                                    message = context.getString(
+-                                        R.string.incorrectPasswordMessage)))
+-                            return@addOnCompleteListener
+-                        }
++                            if (exception is FirebaseAuthInvalidCredentialsException) {
++                                continuation.resumeWithException(
++                                    AuthExceptions.PasswordException(
++                                        message = context.getString(
++                                            R.string.incorrectPasswordMessage)))
++                                return@addOnCompleteListener
++                            }
+ 
+-                        if (exception is FirebaseAuthInvalidUserException) {
+-                            if (exception.errorCode == USER_NOT_FOUND) {
+-                                continuation.resumeWithException(
+-                                    AuthExceptions.EmailException(
+-                                        message = context.getString(
+-                                            R.string.couldntFindAccount)))
+-                                return@addOnCompleteListener
+-                            }
+-                        }
++                            if (exception is FirebaseAuthInvalidUserException) {
++                                if (exception.errorCode == USER_NOT_FOUND) {
++                                    continuation.resumeWithException(
++                                        AuthExceptions.EmailException(
++                                            message = context.getString(
++                                                R.string.couldntFindAccount)))
++                                    return@addOnCompleteListener
++                                }
++                            }
+ 
+-                        if (exception is FirebaseTooManyRequestsException) {
+-                            continuation.resumeWithException(
+-                                AuthExceptions.TooManyRequestsException(
+-                                    title = context.getString(
+-                                        R.string.tooManyFailedAttempts),
+-                                    message = context.getString(R.string.manyFailedAttempts)))
+-                            return@addOnCompleteListener
+-                        }
++                            if (exception is FirebaseTooManyRequestsException) {
++                                continuation.resumeWithException(
++                                    AuthExceptions.TooManyRequestsException(
++                                        title = context.getString(
++                                            R.string.tooManyFailedAttempts),
++                                        message = context.getString(R.string.manyFailedAttempts)))
++                                return@addOnCompleteListener
++                            }
+ 
+-                        if (exception is IllegalStateException) {
+-                            Timber.e(exception.message)
+-                        }
++                            if (exception is IllegalStateException) {
++                                Timber.e(exception.message)
++                            }
+ 
+-                        continuation.resumeWithException(exception)
+-                    }
+-                    if (continuation.isActive) {
+-                        continuation.resume(signInWithEmailAndPassword.isSuccessful)
++                            continuation.resumeWithException(exception)
++                        }
++                        if (continuation.isActive) {
++                            continuation.resume(signInWithEmailAndPassword.isSuccessful)
++                        }
+                     }
+-                }
++            }
+         }
+     }
+ 
+ 
+     override suspend fun signInWithCredential(credential: SignInCredential): Boolean {
+-        return suspendCancellableCoroutine { continuation ->
++        return withContext(scope) {
++            suspendCancellableCoroutine { continuation ->
+ 
+-            val signInCredential = when(credential){
+-                is SignInCredential.Google -> GoogleAuthProvider.getCredential(credential.providerToken, null)
+-                is SignInCredential.Facebook -> FacebookAuthProvider.getCredential(credential.providerToken)
+-            }
++                val signInCredential = when(credential){
++                    is SignInCredential.Google -> GoogleAuthProvider.getCredential(credential.providerToken, null)
++                    is SignInCredential.Facebook -> FacebookAuthProvider.getCredential(credential.providerToken)
++                }
+ 
+ 
+-            auth.signInWithCredential(signInCredential)
+-                .addOnCompleteListener { signInWithCredential ->
+-                    signInWithCredential.exception?.let { exception ->
+-                        if (exception.message == FACEBOOK_CONNECTION_FAILURE) {
+-                            continuation.resumeWithException(
+-                                AuthExceptions.NetworkException(
+-                                    message = context.getString(
+-                                        R.string.no_internet_message)))
+-                        }
++                auth.signInWithCredential(signInCredential)
++                    .addOnCompleteListener { signInWithCredential ->
++                        signInWithCredential.exception?.let { exception ->
++                            if (exception.message == FACEBOOK_CONNECTION_FAILURE) {
++                                continuation.resumeWithException(
++                                    AuthExceptions.NetworkException(
++                                        message = context.getString(
++                                            R.string.no_internet_message)))
++                            }
+ 
+-                        if(exception is FirebaseNetworkException){
+-                            continuation.resumeWithException(
+-                                AuthExceptions.NetworkException(
+-                                    message = context.getString(R.string.no_internet_message)))
+-                            return@addOnCompleteListener
+-                        }
++                            if(exception is FirebaseNetworkException){
++                                continuation.resumeWithException(
++                                    AuthExceptions.NetworkException(
++                                        message = context.getString(R.string.no_internet_message)))
++                                return@addOnCompleteListener
++                            }
+ 
+-                        continuation.resumeWithException(
+-                            AuthExceptions.ConflictFBTokenException(
+-                                exception.message
+-                                ?: "Sorry, something went wrong. Please try again."))
+-                    }
+-                    if (continuation.isActive) {
+-                        continuation.resume(signInWithCredential.isSuccessful)
++                            continuation.resumeWithException(
++                                AuthExceptions.ConflictFBTokenException(
++                                    exception.message
++                                    ?: "Sorry, something went wrong. Please try again."))
++                        }
++                        if (continuation.isActive) {
++                            continuation.resume(signInWithCredential.isSuccessful)
++                        }
+                     }
+-                }
++            }
+         }
+     }
+ 
Index: .idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_/shelved.patch b/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_/shelved.patch
new file mode 100644
--- /dev/null	(date 1685546684020)
+++ b/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_/shelved.patch	(date 1685546684020)
@@ -0,0 +1,19 @@
+Index: app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingDrawerContent.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.example.cyclistance.feature_mapping.presentation.mapping_main_screen.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.wrapContentHeight\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.ButtonDefaults\nimport androidx.compose.material.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.layout.layoutId\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.constraintlayout.compose.ConstraintLayout\nimport coil.compose.AsyncImage\nimport coil.compose.rememberAsyncImagePainter\nimport com.example.cyclistance.R\nimport com.example.cyclistance.navigation.state.NavUiState\nimport com.example.cyclistance.theme.Black440\nimport com.example.cyclistance.theme.Black450\nimport com.example.cyclistance.theme.CyclistanceTheme\nimport com.example.cyclistance.theme.Red710\n\n\n@Composable\nfun MappingDrawerContent(\n    onClickSettings: () -> Unit = {},\n    onClickChat: () -> Unit = {},\n    onClickRescueRequest: () -> Unit = {},\n    onClickSignOut: () -> Unit = {},\n    respondentCount: Int = 0,\n    uiState: NavUiState = NavUiState()\n    ) {\n\n    ConstraintLayout(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(MaterialTheme.colors.background),\n        constraintSet = drawerMappingConstraintSet) {\n\n        Box(\n            modifier = Modifier\n                .layoutId(MappingConstraintItem.UpperSection.layoutId)\n                .background(MaterialTheme.colors.secondaryVariant)) {\n\n\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                verticalArrangement = Arrangement.Bottom,\n                horizontalAlignment = Alignment.CenterHorizontally) {\n\n\n                AsyncImage(\n                    model = uiState.photoUrl, contentDescription = \"User Profile Image\",\n                    modifier = Modifier\n                        .clip(CircleShape)\n                        .size(105.dp)\n                        .border(\n                            width = 3.6.dp,\n                            color = MaterialTheme.colors.primary,\n                            shape = CircleShape),\n                    contentScale = ContentScale.Crop,\n                    placeholder = rememberAsyncImagePainter(model = R.drawable.ic_empty_profile_placeholder_large),\n                    error = painterResource(id = R.drawable.ic_empty_profile_placeholder_large),\n                    fallback = painterResource(id = R.drawable.ic_empty_profile_placeholder_large)\n                )\n\n                Text(\n                    text = uiState.name.takeIf { it.isNotEmpty() } ?: \"-----\",\n                    color = MaterialTheme.colors.onSecondary,\n                    style = MaterialTheme.typography.h6,\n                    modifier = Modifier.padding(top = 7.dp, bottom = 10.dp))\n            }\n        }\n\n\n\n        Column(\n            modifier = Modifier\n                .layoutId(MappingConstraintItem.BottomSection.layoutId),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.spacedBy(space = 1.5.dp, alignment = Alignment.Top)) {\n\n\n\n\n            DrawerContentButtonItem(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .wrapContentHeight(),\n                iconId = R.drawable.ic_emergency_call,\n                buttonText = \"Emergency Call\",\n                onClick = {})\n\n            DrawerContentButtonItem(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .wrapContentHeight(),\n                iconId = R.drawable.ic_setting,\n                buttonText = \"Settings\",\n                onClick = onClickSettings)\n\n\n            DrawerContentButtonItem(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .wrapContentHeight(),\n                iconId = R.drawable.ic_rescue_request,\n                buttonText = \"Rescue Request\",\n                onClick = onClickRescueRequest,\n                badgeCountEnabled = true,\n                badgeCount = respondentCount\n            )\n\n            DrawerContentButtonItem(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .wrapContentHeight(),\n                iconId = R.drawable.ic_ride_history,\n                buttonText = \"Ride History\",\n                onClick = onClickChat)\n\n\n            DrawerContentButtonItem(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .wrapContentHeight(),\n                iconId = R.drawable.ic_baseline_chat_bubble_outline_24,\n                buttonText = \"Chat\",\n                onClick = onClickChat)\n\n\n\n            DrawerContentButtonItem(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .wrapContentHeight(),\n                iconId = R.drawable.ic_group_35,\n                buttonText = \"Sign out\",\n                onClick = onClickSignOut)\n\n\n\n        }\n\n\n    }\n\n}\n\n@Preview\n@Composable\nfun MappingDrawerContentPreview() {\n    CyclistanceTheme(true) {\n        MappingDrawerContent(\n            onClickSettings = {},\n            onClickChat = {},\n            onClickSignOut = {},\n            uiState = NavUiState(\n                name = \"John Doe\",\n                photoUrl = \"https://www.w3schools.com/howto/img_avatar.png\"\n            )\n        )\n    }\n}\n\n@Composable\nprivate fun DrawerContentButtonItem(\n    modifier: Modifier,\n    iconId: Int,\n    badgeCountEnabled: Boolean = false,\n    buttonText: String,\n    onClick: () -> Unit,\n    badgeCount: Int = -1) {\n\n    TextButton(\n        colors = ButtonDefaults.textButtonColors(contentColor = Black450),\n        onClick = onClick,\n        modifier = modifier) {\n\n        Icon(\n            painter = painterResource(id = iconId),\n            contentDescription = null,\n            modifier = Modifier\n                .align(Alignment.CenterVertically)\n                .weight(1f)\n                .scale(1.1f), tint = Black440)\n\n\n        Text(\n            text = buttonText,\n            modifier = Modifier\n                .weight(10f)\n                .padding(start = 20.dp),\n            style = MaterialTheme.typography.subtitle1,\n            color = MaterialTheme.colors.onBackground\n\n        )\n\n        AnimatedVisibility(visible = badgeCountEnabled, enter = fadeIn(), exit = fadeOut()) {\n            BadgeCount(\n                modifier = Modifier.padding(end = 5.dp),\n                count  = badgeCount.toString()\n            )\n        }\n    }\n}\n\n@Composable\nfun BadgeCount(modifier: Modifier = Modifier, count: String) {\n\n    Surface(\n        shape = CircleShape,\n        color = Red710,\n        contentColor = Color.White,\n        modifier = modifier.size(22.dp)) {\n\n        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n            Text(\n                text = count,\n                textAlign = TextAlign.Center,\n                fontSize = MaterialTheme.typography.subtitle2.fontSize)\n        }\n    }\n\n}\n\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingDrawerContent.kt b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingDrawerContent.kt
+--- a/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingDrawerContent.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/app/src/main/java/com/example/cyclistance/feature_mapping/presentation/mapping_main_screen/components/MappingDrawerContent.kt	(date 1685545249599)
+@@ -139,7 +139,7 @@
+                     .wrapContentHeight(),
+                 iconId = R.drawable.ic_ride_history,
+                 buttonText = "Ride History",
+-                onClick = onClickChat)
++                onClick = {})
+ 
+ 
+             DrawerContentButtonItem(
Index: .idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_.xml b/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_.xml
new file mode 100644
--- /dev/null	(date 1685546684463)
+++ b/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_.xml	(date 1685546684463)
@@ -0,0 +1,4 @@
+<changelist name="onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_" date="1685546684025" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/onClick_of_DrawerContentButtonItem_RideHistory_change_to_empty_lambda_call_/shelved.patch" />
+  <option name="DESCRIPTION" value="onClick of DrawerContentButtonItem RideHistory change to empty lambda call." />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Add_withContext_scope_____inside_repositoryImpl_functions.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Add_withContext_scope_____inside_repositoryImpl_functions.xml b/.idea/shelf/Add_withContext_scope_____inside_repositoryImpl_functions.xml
new file mode 100644
--- /dev/null	(date 1685546674457)
+++ b/.idea/shelf/Add_withContext_scope_____inside_repositoryImpl_functions.xml	(date 1685546674457)
@@ -0,0 +1,4 @@
+<changelist name="Add_withContext(scope){_}_inside_repositoryImpl_functions" date="1685546673755" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Add_withContext(scope){_}_inside_repositoryImpl_functions/shelved.patch" />
+  <option name="DESCRIPTION" value="Add withContext(scope){ } inside repositoryImpl functions" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Remove_getBaseUrl_function.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Remove_getBaseUrl_function.xml b/.idea/shelf/Remove_getBaseUrl_function.xml
new file mode 100644
--- /dev/null	(date 1685546689387)
+++ b/.idea/shelf/Remove_getBaseUrl_function.xml	(date 1685546689387)
@@ -0,0 +1,4 @@
+<changelist name="Remove_getBaseUrl_function" date="1685546688955" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Remove_getBaseUrl_function/shelved.patch" />
+  <option name="DESCRIPTION" value="Remove getBaseUrl function" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Remove_getBaseUrl_function/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Remove_getBaseUrl_function/shelved.patch b/.idea/shelf/Remove_getBaseUrl_function/shelved.patch
new file mode 100644
--- /dev/null	(date 1685546688950)
+++ b/.idea/shelf/Remove_getBaseUrl_function/shelved.patch	(date 1685546688950)
@@ -0,0 +1,40 @@
+Index: app/src/main/java/com/example/cyclistance/di/MappingModule.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.example.cyclistance.di\n\nimport android.content.Context\nimport android.location.Geocoder\nimport com.example.cyclistance.R\nimport com.example.cyclistance.core.utils.connection.ConnectionStatus.hasInternetConnection\nimport com.example.cyclistance.core.utils.constants.MappingConstants.HEADER_CACHE_CONTROL\nimport com.example.cyclistance.core.utils.constants.MappingConstants.HEADER_PRAGMA\nimport com.example.cyclistance.feature_mapping.data.CyclistanceApi\nimport com.example.cyclistance.feature_mapping.data.remote.websockets.RescueTransactionWSClient\nimport com.example.cyclistance.feature_mapping.data.remote.websockets.TransactionLiveLocationWSClient\nimport com.example.cyclistance.feature_mapping.data.remote.websockets.UserWSClient\nimport com.example.cyclistance.feature_mapping.data.repository.MappingRepositoryImpl\nimport com.example.cyclistance.feature_mapping.domain.repository.MappingRepository\nimport com.example.cyclistance.feature_mapping.domain.use_case.MappingUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.GetAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.address.SetAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.GetBikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.bike_type.SetBikeTypeUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetCalculatedDistanceUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetFullAddressUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.location.GetUserLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.ConfirmCancellationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.CreateRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.DeleteRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.rescue_transaction.GetRescueTransactionByIdUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.routes.GetRouteDirectionsUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.user.*\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.BroadcastTransactionLocationUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.live_location.GetTransactionLocationUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.BroadcastRescueTransactionUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.rescue_transactions.GetRescueTransactionUpdatesUseCase\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.BroadcastToNearbyCyclists\nimport com.example.cyclistance.feature_mapping.domain.use_case.websockets.users.GetUserUpdatesUseCase\nimport com.google.gson.GsonBuilder\nimport com.mapbox.api.optimization.v1.MapboxOptimization\nimport dagger.Module\nimport dagger.Provides\nimport dagger.hilt.InstallIn\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.hilt.components.SingletonComponent\nimport io.socket.client.IO\nimport okhttp3.Cache\nimport okhttp3.CacheControl\nimport okhttp3.Interceptor\nimport okhttp3.OkHttpClient\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport java.io.File\nimport java.util.concurrent.TimeUnit\nimport javax.inject.Singleton\n\n@Module\n@InstallIn(SingletonComponent::class)\nobject MappingModule {\n\n\n    @Provides\n    @Singleton\n    fun getBaseUrl(@ApplicationContext context: Context): String{\n        return context.getString(R.string.CyclistanceApiBaseUrl)\n    }\n\n    @Provides\n    @Singleton\n    fun provideCyclistanceApi(@ApplicationContext context: Context): CyclistanceApi {\n        val okHttpClient = providesOkhttpClient(context)\n        val gson = GsonBuilder().serializeNulls().create()\n\n        return lazy {\n            Retrofit.Builder()\n                .baseUrl(getBaseUrl(context))\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .client(okHttpClient)\n                .build()\n                .create(CyclistanceApi::class.java)\n        }.value\n\n    }\n\n\n    @Singleton\n    @Provides\n    fun providesMapOptimizationDirections(@ApplicationContext context: Context): MapboxOptimization.Builder{\n        return lazy {\n            MapboxOptimization.builder()\n                .accessToken(context.getString(R.string.MapsDownloadToken))\n        }.value\n    }\n\n\n    @Provides\n    @Singleton\n    fun provideMappingRepository(\n        @ApplicationContext context: Context,\n        api: CyclistanceApi,\n        mapboxDirections: MapboxOptimization.Builder): MappingRepository {\n\n        val socket = IO.socket(getBaseUrl(context))\n        val userWSClient = UserWSClient(socket)\n        val rescueTransactionWSClient = RescueTransactionWSClient(socket)\n        val liveLocation = TransactionLiveLocationWSClient(socket)\n        val geocoder = Geocoder(context)\n\n        return MappingRepositoryImpl(\n            api = api,\n            context = context,\n            rescueTransactionClient = rescueTransactionWSClient,\n            nearbyCyclistClient = userWSClient,\n            liveLocation = liveLocation,\n            mapboxDirections = mapboxDirections,\n            geocoder = geocoder\n        )\n    }\n\n\n    @Provides\n    @Singleton\n    fun provideMappingUseCase(repository: MappingRepository): MappingUseCase {\n        return MappingUseCase(\n\n            getUsersUseCase = GetUsersUseCase(repository),\n            getUserByIdUseCase = GetUserByIdUseCase(repository),\n            createUserUseCase = CreateUserUseCase(repository),\n            deleteUserUseCase = DeleteUserUseCase(repository),\n\n            getRescueTransactionByIdUseCase = GetRescueTransactionByIdUseCase(repository),\n            createRescueTransactionUseCase = CreateRescueTransactionUseCase(repository),\n            deleteRescueTransactionUseCase = DeleteRescueTransactionUseCase(repository),\n\n\n            getUserLocationUseCase = GetUserLocationUseCase(repository),\n            getFullAddressUseCase = GetFullAddressUseCase(repository),\n\n            getBikeTypeUseCase = GetBikeTypeUseCase(repository),\n            setBikeTypeUseCase = SetBikeTypeUseCase(repository),\n            getAddressUseCase = GetAddressUseCase(repository),\n            setAddressUseCase = SetAddressUseCase(repository),\n            broadcastRescueTransactionUseCase = BroadcastRescueTransactionUseCase(repository),\n            broadcastToNearbyCyclists = BroadcastToNearbyCyclists(repository),\n            getRescueTransactionUpdatesUseCase = GetRescueTransactionUpdatesUseCase(repository),\n            getUserUpdatesUseCase = GetUserUpdatesUseCase(repository),\n            broadcastRescueTransactionToRespondent = BroadcastTransactionLocationUseCase(repository),\n            getTransactionLocationUpdatesUseCase = GetTransactionLocationUpdatesUseCase(repository),\n            deleteRescueRespondentUseCase = DeleteRescueRespondentUseCase(repository),\n            addRescueRespondentUseCase = AddRescueRespondentUseCase(repository),\n            deleteAllRespondentsUseCase = DeleteAllRespondentsUseCase(repository),\n            confirmDetailsUseCase = ConfirmDetailsUseCase(repository),\n            confirmCancellationUseCase = ConfirmCancellationUseCase(repository),\n            getRouteDirectionsUseCase = GetRouteDirectionsUseCase(repository),\n            getCalculatedDistanceUseCase = GetCalculatedDistanceUseCase(repository),\n        )\n    }\n\n\n\n    @Provides\n    @Singleton\n    fun providesOkhttpClient(@ApplicationContext context: Context): OkHttpClient {\n        val interceptor = Interceptor { chain ->\n            var request = chain.request()\n            if (!context.hasInternetConnection()) {\n                val cacheControl = CacheControl.Builder()\n                    .maxStale(1, TimeUnit.DAYS)\n                    .build()\n\n                request = request.newBuilder()\n                    .removeHeader(HEADER_PRAGMA)\n                    .removeHeader(HEADER_CACHE_CONTROL)\n                    .cacheControl(cacheControl)\n                    .build()\n            }\n            chain.proceed(request)\n        }\n        val httpCacheDirectory = File(context.cacheDir, \"offlineCache\")\n        val cacheSize = 50 * 1024 * 1024\n        val cache = Cache(httpCacheDirectory, cacheSize.toLong())\n\n        return lazy {\n            OkHttpClient.Builder()\n                .cache(cache)\n                .addInterceptor(interceptor)\n                .build()\n        }.value\n    }\n\n\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/cyclistance/di/MappingModule.kt b/app/src/main/java/com/example/cyclistance/di/MappingModule.kt
+--- a/app/src/main/java/com/example/cyclistance/di/MappingModule.kt	(revision 7eb46dee779358367305d814b8e6195480b81287)
++++ b/app/src/main/java/com/example/cyclistance/di/MappingModule.kt	(date 1685543298760)
+@@ -55,11 +55,6 @@
+ object MappingModule {
+ 
+ 
+-    @Provides
+-    @Singleton
+-    fun getBaseUrl(@ApplicationContext context: Context): String{
+-        return context.getString(R.string.CyclistanceApiBaseUrl)
+-    }
+ 
+     @Provides
+     @Singleton
+@@ -69,7 +64,7 @@
+ 
+         return lazy {
+             Retrofit.Builder()
+-                .baseUrl(getBaseUrl(context))
++                .baseUrl(context.getString(R.string.CyclistanceApiBaseUrl))
+                 .addConverterFactory(GsonConverterFactory.create(gson))
+                 .client(okHttpClient)
+                 .build()
+@@ -96,7 +91,7 @@
+         api: CyclistanceApi,
+         mapboxDirections: MapboxOptimization.Builder): MappingRepository {
+ 
+-        val socket = IO.socket(getBaseUrl(context))
++        val socket = IO.socket(context.getString(R.string.CyclistanceApiBaseUrl))
+         val userWSClient = UserWSClient(socket)
+         val rescueTransactionWSClient = RescueTransactionWSClient(socket)
+         val liveLocation = TransactionLiveLocationWSClient(socket)
